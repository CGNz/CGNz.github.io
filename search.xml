<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>test</title>
      <link href="/2021/07/28/test/"/>
      <url>/2021/07/28/test/</url>
      
        <content type="html"><![CDATA[<p>#reborn</p>]]></content>
      
      
      
        <tags>
            
            <tag> 测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DNF5.24史诗改版防具提升率分析</title>
      <link href="/2021/07/28/DNF5.24%E5%8F%B2%E8%AF%97%E6%94%B9%E7%89%88%E9%98%B2%E5%85%B7%E6%8F%90%E5%8D%87%E7%8E%87%E5%88%86%E6%9E%90/"/>
      <url>/2021/07/28/DNF5.24%E5%8F%B2%E8%AF%97%E6%94%B9%E7%89%88%E9%98%B2%E5%85%B7%E6%8F%90%E5%8D%87%E7%8E%87%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><ul><li>在5月24日的版本更新中，国服对各90级B套防具进行了属性的调整，总体来说平衡了各套的强度，下文就对各套防具的改动进行介绍和分析，希望勇士们能够参考，进而做出选择。</li></ul><h1 id="改动内容及分析"><a href="#改动内容及分析" class="headerlink" title="改动内容及分析"></a>改动内容及分析</h1><h2 id="布甲（光怪陆离的人生）"><a href="#布甲（光怪陆离的人生）" class="headerlink" title="布甲（光怪陆离的人生）"></a>布甲（光怪陆离的人生）</h2><ul><li>布甲B套的属性改版对升级布甲的玩家来说，早已是朝思夜盼的事情。布甲B套改版后的伤害提升能力是毋庸置疑的，但具体能在五套防具中排名第几，这里面需要考虑的因素就比较多了。我向来也不喜欢去为防具做“排名”，每个人都有自己的看法。那么本文就用提升率计算的方式，就布甲B套改版<strong>加强程度</strong>这一问题做一个客观的分析。</li></ul><p><strong>【布甲B套分析 装备搭配前提】</strong><br>为了对提升率进行更加贴近实战的计算，这里将右边装备设为：圣耀（荒古）武器、+10的恍惚套、三神器，年套称号、宠物和宠物装备。仍然采用<strong>单件</strong>和<strong>整体分别分析</strong>的方式，需要提一点，之所以进行单件分析，更多是考虑到部分装备没有成套、或是材料不足，从而想升级单件或者三件的玩家；单件分析的结果<strong>不能沿用</strong>至整体分析，我在进行整体分析时会另起一个步骤，希望大家在这一点上不要产生误会。</p><h3 id="布甲上衣"><a href="#布甲上衣" class="headerlink" title="布甲上衣"></a>布甲上衣</h3><figure class="image-box">                <img src="https://github.com/CGNz/blogimage/raw/master/DNF-1/bushang.png" alt="布甲上衣" title class>                <p>布甲上衣</p>            </figure><p>​布甲B套上衣的重点属性没有发生变化，仍然是1-85级技能等级+2，但在两级等级的分配方式上，从原来的2级都需要进图触发，变为了<strong>1级默认、1级进图触发</strong>，算是在一定程度上改善了此效果的触发方式。</p><p>同时，原本上衣在装备时会减少角色50点四维，改版后将此效果<strong>取消</strong>，并且新增了对基础力量的45点加成。对<strong>物理职业</strong>来说，上衣相当于新增了95点力量，在将基础力量假设为3000点时，上衣的加强程度为<code>2.92%</code>（仅指单刷）。对魔法职业来说，由于上衣Debuff的消失，也等同于增加了50点智力，在将基础智力假设为3000点时，加强程度为<code>1.54%</code>。</p><h3 id="布甲下装"><a href="#布甲下装" class="headerlink" title="布甲下装"></a>布甲下装</h3><figure class="image-box">                <img src="https://github.com/CGNz/blogimage/raw/master/DNF-1/buxia.png" alt="布甲下装" title class>                <p>布甲下装</p>            </figure><p>​布甲B套下装的属性变动较大，首先仍然是新增了<strong>45</strong>点基础力量，然后将原本的<strong>45点属强</strong>加成变为了<strong>16%的白字附加伤害加成</strong>，同时新增<strong>12%的异常状态伤害加成</strong>，异常状态伤害特指敌人进入异常状态时所受的蓝字伤害，目前只有毒王等少数职业比较依赖此伤害，这里就不多说了。</p><p>假设角色基础属强为220点，敌人的属抗为0，没有穿戴属性白字装备，此时45点属强的提升率为<code>10.23%</code>（45/440）。然后在所设定的装备前提下，其他白字附加数值为27%（年套称号、宠物及装备），此时直接以不破招的角度来看，16%白字伤害的提升率为<code>12.6%</code>（1.43/1.27）。由此可得，在不考虑新增的基础力量时，布甲B套下装所获得的加强程度为<code>2.15%</code>（1.126/1.1023）。</p><h3 id="布甲头肩"><a href="#布甲头肩" class="headerlink" title="布甲头肩"></a>布甲头肩</h3><figure class="image-box">                <img src="https://github.com/CGNz/blogimage/raw/master/DNF-1/bujian.png" alt="布甲头肩" title class>                <p>布甲头肩</p>            </figure><p>​布甲B套头肩将原本的<strong>25%减防效果</strong>删除，加入<strong>35点基础力量</strong>（后面再做整体考虑），新增<strong>16%的额外黄字伤害加成</strong>，1级一觉主动技能的加成，以及<strong>12%异常状态伤害的加成</strong>（这里不讨论）。将副本设定为卢克团队地下城，怪物的防御力为221300点；在<strong>未达到减防上限</strong>时，25%减防效果在攻击普通怪物时所带来的伤害提升为：</p><blockquote><p>25%/（1-25%+18000/221300）= <strong>30.12%</strong></p></blockquote><p>在攻击精英怪物时，此提升率会变为原来的三分之二，即<code>22.59%</code>；在攻击<strong>领主怪物</strong>时，此提升率会减半，即<code>15.06%</code>。</p><p>那么在改版之后的属性方面，16%额外黄字伤害在基础黄字伤害为20%时，提升率为<code>13.33%</code>（1.36/1.2）；1级等级加成对一觉主动的单独提升大约为<code>6%</code>。就以攻击领主怪物的情况为例，在整体伤害上，改版后的布甲头肩其实比原来弱了<code>1.53%</code>；在一觉技能的伤害方面，比原来提升了<code>4.41%</code>（1.1333*1.06/1.1506）。如果是攻击精英怪物，那么改版后的护肩无论是在整体伤害上、还是在一觉伤害上，其实都是削弱的。</p><p>但仅仅一个护肩的属性变化情况，并不能代表套装整体的变化情况，各位看到这里时也不必慌张。而且在计算护肩原来的提升率时，我默认了<strong>未达到减防上限</strong>的情况，其实在卢克团队模式的实战中，在装备布甲B护肩的情况下，随便新增一件减防装备或是一位减防职业，都是很容易达到减防上限的。所以护肩虽然在提升率方面有所削弱，但在实战能力上其实也是有所<strong>加强</strong>的，只不过布甲B套从此便失去了对队友的<strong>辅助提升</strong>。</p><h3 id="布甲腰带"><a href="#布甲腰带" class="headerlink" title="布甲腰带"></a>布甲腰带</h3><figure class="image-box">                <img src="https://github.com/CGNz/blogimage/raw/master/DNF-1/buyao.png" alt="布甲腰带" title class>                <p>布甲腰带</p>            </figure><p>​布甲B套腰带将原本的减属抗效果删除，加入26点基础力量，新增<strong>16%的额外暴击伤害</strong>，以及<strong>1级一觉主动的等级加成</strong>。仍然假设角色基础属强220点，敌人属抗为0，没有属性白字装备，此时属抗-35的提升率为<code>7.95%</code>（[0-（-35）]/440）。</p><p>接着在暴击伤害数值为<strong>20%</strong>时，16%额外暴击伤害的提升率为<code>13.33%</code>；1级加成对<strong>一觉主动</strong>的单独提升为<code>6%</code>。由此可以得出，不考虑新增的基础力量时，腰带在整体伤害方面所获得的加强程度为<code>4.98%</code>，在一觉主动方面所获得的单独加强为<code>11.28%</code>。腰带所获的加强程度十分可观，但值得惋惜仍然是失去了对队友的辅助能力。</p><h3 id="布甲鞋"><a href="#布甲鞋" class="headerlink" title="布甲鞋"></a>布甲鞋</h3><figure class="image-box">                <img src="https://github.com/CGNz/blogimage/raw/master/DNF-1/buxie.png" alt="布甲鞋" title class>                <p>布甲鞋</p>            </figure><p>布甲鞋删除原本的基础三攻和最终伤害，新增<strong>16%的百分比三攻加成</strong>。以魔法百分比职业为例，假设装备魔法攻击力的数值总和为2000点，布甲鞋原有69点魔攻的提升率为<code>3.45%</code>（69/2000）；其他装备最终伤害的数值总和为68%（包括氤氲、英雄王、布甲B的五套装效果），15%最终伤害的提升率为<code>8.93%</code>（1.83/1.68）。</p><p>接着，其他装备的百分比三攻数值为<strong>15%</strong>（清泉流响），此时16%三攻的提升率为<code>13.91%</code>（1.31/1.15）。可以得出布甲B套鞋所获得的加强程度为<code>1.08%</code>（1.1391/1.0893/1.0345）。加强程度比较微小，但是减轻了最终伤害在布甲B套中的占比，也是一件好事。</p><h3 id="布甲套装属性"><a href="#布甲套装属性" class="headerlink" title="布甲套装属性"></a>布甲套装属性</h3><figure class="image-box">                <img src="https://github.com/CGNz/blogimage/raw/master/DNF-1/butao.png" alt="布甲套装属性" title class>                <p>布甲套装属性</p>            </figure><p>首先在套装属性方面，[3]套装将原本的20%最终伤害改为20%的力智，[5]套装效果未变。接下来就全面地整合一下布甲B套发生变化的所有属性，从整体的角度来看一看它的加强程度：</p><ul><li>发生改动属性 所对应的原属性</li></ul><p>所有属性强化+45、敌人属性抗性-35：假设基础属强200点，敌人属抗为0；这两条效果的总提升率为18.18%（[45-（-35）]/440）。防御力减少25%：这里可以沿用单件分析时的计算结果，攻击精英怪物的提升率为<code>22.59%</code>，攻击领主怪物的提升率为<code>15.06%</code>（仅适用于卢克团队副本）。</p><p>基础三攻+69点：以魔法百分比职业为例，假设装备魔攻总和数值为2000点；提升率为<code>3.45%</code>。最终伤害+35%（鞋子+[3]套装）：其他最终伤害数值为68%（氤氲、英雄王、布甲B[5]套装），提升率<code>20.83%</code>（2.03/1.68）。为了便于后面的计算，这里先将这部分的总提升率算出：</p><blockquote><p>领主：1.1818<em>1.1506</em>1.0345*1.2083= <strong>1.6997</strong></p></blockquote><blockquote><p>精英怪物：1.1818<em>1.2259</em>1.0345*1.2083= <strong>1.8109</strong></p></blockquote><p>由于上衣技能等级加成、[5]套装最终伤害加成均未发生变动，所以不在这里列出；其中[5]套装的最终伤害数值已经以“其他装备最终伤害数值”的形式被加入计算时的稀释考虑。</p><ul><li>改动属性</li></ul><p>基础力量+227点（包括上衣Debuff取消的50点）：假设基础力量3000点，单刷提升率为<code>6.98%</code>（物理职业）。基础智力+50点（上衣Debuff取消的50点）：假设基础智力3000点，单刷提升率为<code>1.54%</code>（魔法职业）。白字附加伤害+16%：其他白字数值为27%，按不破招的情况考虑，提升率<code>12.6%</code>。</p><p>额外黄字伤害+16%：黄字伤害为20%，提升率<code>13.33%</code>。额外暴击伤害+16%：暴击伤害为20%，提升率<code>13.33%</code>（1.36/1.2）。物理、魔法、独立攻击力+16%：其他百分比三攻数值为15%，提升率<code>13.91%</code>（1.31/1.15）。力量、智力+20%：其他百分比力智数值为18%（黄金杯），忽略力智系数，提升率<code>16.95%</code>（1.38/1.18）。一觉主动等级+2：单独提升率<code>10%</code>。由此可得出在不同情况下，布甲B套所获得的加强程度：</p><p>首先是<strong>物理职业</strong>，在攻击领主怪物时：</p><blockquote><p>1.0698<em>1.126</em>1.1333<em>1.1333</em>1.1391*1.1695/1.6997= <strong>1.2126</strong>（整体）</p></blockquote><blockquote><p>1.0698<em>1.126</em>1.1333<em>1.1333</em>1.1391<em>1.1695</em>1.1/1.6997= <strong>1.3339</strong>（一觉）</p></blockquote><p>在攻击精英怪物时：</p><blockquote><p>1.0698<em>1.126</em>1.1333<em>1.1333</em>1.1391*1.1695/1.8109= <strong>1.1381</strong>（整体）</p></blockquote><blockquote><p>1.0698<em>1.126</em>1.1333<em>1.1333</em>1.1391<em>1.1695</em>1.1/1.8109= <strong>1.252</strong>（一觉）</p></blockquote><p>然后魔法职业所获得的加强程度，直接用上述四个结果除以1.0536即可得出，这里确实不想算了……从物理职业的角度简单概括一下：根据所攻击怪物类型的不同，改版后布甲在整体伤害上所获得的加强程度为<code>13.81%-21.26%</code>，在一觉单独伤害上所获得的加强程度为<code>25.2%-33.39%</code>。当然，这里的一觉没有包括乌鸡和刺客等Buff类的一觉，因为对一觉是Buff技能的职业而言，技能的成长率和其他职业之间是有区别的。</p><p>因为布甲B套原有的减防效果，在面对不同类型的敌人时所带来的提升也不同，所以在本次的加强程度分析上，稍微显得有些繁琐。总的说来，布甲B套的加强程度是很大的，和改版之前的强度比起来，用<strong>起飞</strong>来形容也不为过。</p><h2 id="皮甲（深渊恶魔）"><a href="#皮甲（深渊恶魔）" class="headerlink" title="皮甲（深渊恶魔）"></a>皮甲（深渊恶魔）</h2><p><strong>【布甲B套分析 装备搭配前提】</strong><br>还是按以往的规定，在对防具进行分析之前，先设定一个右边装备的搭配情况，统一的标准还是使用+10恍惚套和三神器的搭配，个人准备等海伯伦套装普及到一定程度的时候，再将特殊装备的搭配条件换成海伯伦套装。</p><h3 id="皮甲上衣"><a href="#皮甲上衣" class="headerlink" title="皮甲上衣"></a>皮甲上衣</h3><figure class="image-box">                <img src="https://github.com/CGNz/blogimage/raw/master/DNF-1/pishang.png" alt="皮甲上衣" title class>                <p>皮甲上衣</p>            </figure><p>上衣算是皮甲B套加强程度<strong>最大</strong>的装备部位，首先是增加了4点所有属性强化数值，然后还将原本的12%白字附加伤害改为了12%力智。将不带防具时的角色属强数值设为220点，深渊恶魔改版前的全属强加成数值为71点，在不考虑敌人属抗的前提下，4点属强的基础伤害提升率为0.78%（4/511）；为套装属性白字带来的提升为<code>0.24%</code>（计算步骤较多，此处省去）。</p><p>然后原有的<strong>12%白字附加伤害</strong>，在将基础属强设为220、获得皮甲B套原有71点属强加成时，在25%属性白字以及27%称号、宠物及装备的普通白字下，不破招提升率为<code>6.49%</code>（1.97/1.85）。改版后的<strong>12%力智</strong>，在其他百分比力智数值为黄金杯的18%时，暂且忽略力智系数，提升率为<code>10.17%</code>（1.3/1.18）。最后可以得出，皮甲B套上衣改版所获得的加强程度为<code>4.51%</code>（1.0078<em>1.0024</em>1.1017/1.0649）。</p><p>皮甲B套上衣的属性改动，使得皮甲B套的<strong>白字伤害总量</strong>得以减少，并且属性加成种类更加多样，算得上是皮甲B套本次改版的核心所在。</p><h3 id="皮甲下衣、护肩、腰带、鞋"><a href="#皮甲下衣、护肩、腰带、鞋" class="headerlink" title="皮甲下衣、护肩、腰带、鞋"></a>皮甲下衣、护肩、腰带、鞋</h3><figure class="image-box">                <img src="https://github.com/CGNz/blogimage/raw/master/DNF-1/pixia.png" alt="皮甲下衣" title class>                <p>皮甲下衣</p>            </figure><figure class="image-box">                <img src="https://github.com/CGNz/blogimage/raw/master/DNF-1/pijian.png" alt="皮甲护肩" title class>                <p>皮甲护肩</p>            </figure><figure class="image-box">                <img src="https://github.com/CGNz/blogimage/raw/master/DNF-1/piyao.png" alt="皮甲腰带" title class>                <p>皮甲腰带</p>            </figure><figure class="image-box">                <img src="https://github.com/CGNz/blogimage/raw/master/DNF-1/pixie.png" alt="皮甲鞋" title class>                <p>皮甲鞋</p>            </figure><p>对皮甲B套剩下的四个装备部位而言，它们所发生的改动都是可以放到一起来说的。首先每件装备除属强数值之外的属性（例如下装的<strong>百分比三攻</strong>、头肩的<strong>最终伤害</strong>等等），都是没有发生改动的。发生改动的地方，也仅仅是每件装备各自所对应的<strong>属性强化数值</strong>上升了<strong>4</strong>点（另外头肩还增加了<strong>8%的施放速度</strong>）。<br>​那么这里其实可以大致沿用上衣属强数值提升部分的分析结果，将这四个装备部位的改版加强程度均看作<code>1.02%</code>（1.0078*1.0024），并且仅仅适用于角色对应的单属性强化，比如角色走冰属性，那么腰带的加强程度就可以看作<code>1.02%</code>，而头肩、下装、鞋的加强程度则为0，其余三个部位同理。当然，在进行整体加强程度计算时，是不能沿用此结果的，这里也仅作为单件装备部位的加强程度结果使用。</p><h3 id="皮甲套装属性"><a href="#皮甲套装属性" class="headerlink" title="皮甲套装属性"></a>皮甲套装属性</h3><figure class="image-box">                <img src="https://github.com/CGNz/blogimage/raw/master/DNF-1/pitao.png" alt="皮甲套装属性" title class>                <p>皮甲套装属性</p>            </figure><p>​在皮甲B套的套装效果方面，[3]套装效果删除原有的74点固定三攻加成，用10%三攻加成加以替代。[5]套装效果则是删除了原本的8%三攻加成，新加入5%的暴击率加成。这里也不在单条属性的变化上纠结了，直接从整体来看一下皮甲B套的加强程度：</p><ul><li>改动属性所对应的 改动前属性</li></ul><p>白字附加伤害+12%：角色属强数值总和按皮甲B套改版前的属强加成数值来进行设定，设为<strong>291</strong>点，此时25%属性白字伤害所对应的普通白字伤害数值为<code>58.08%</code>（25%*（1+291/220））；另外称号宠物及装备的白字数值为<strong>27%</strong>；由此可得上衣原本12%白字附加伤害、在不破招时的提升率为<code>6.48%</code>（1.9708/1.8508）。</p><p>物理、魔法、独立攻击力+74点：以物理百分比职业为例，装备物攻总和数值设为2200点；提升率为<code>3.36%</code>（74/2200）。物理、魔法、独立攻击力+20%（下装12%，原套装效果8%）：其他百分比三攻加成数值为+10清泉流响的15%；提升率为<code>17.39%%</code>（1.35/1.15）。</p><p>其余未发生改动的属性，则不进行对应的原属性提升率计算，属强加成数值的改动直接在改动属性里计算增加数值的提升率。</p><ul><li>改动属性 提升率</li></ul><p>力量、智力+12%：其他百分比力智数值取作18%，提升率为<code>10.17%</code>（1.3/1.18）。所有属性强化的增加数值为8点（上衣多加4点全属强，其余四个装备部位各自多加4点对应单属强）：基础属强仍然设为291点，不考虑敌人的属性抗性。此时8点属强对基础伤害的提升为<code>1.57%</code>（8/511）；为套装属性白字带来的提升为0.48%（计算步骤较多，此处省去）。<strong>物理、魔法、独立攻击力+22%</strong>（下装12%，套装改版10%）：其他百分比三攻数值仍然取作15%，提升率<code>19.13%</code>（1.37/1.15）。那么最后可以得出，皮甲B套改版的加强程度为：</p><blockquote><p>1.1017<em>1.0157</em>1.0048*1.1913/1.292= <strong>1.0367</strong></p></blockquote><p>皮甲B套改版所获得的加强程度为<code>3.67%</code>，在加强程度方面确实比较低……但是我们也都知道，改版之前在同等较好的打造下，皮甲B套在破招攻击时的伤害算是五套中最优秀的，所以较小的改版加强程度，也并不能说明皮甲改版之后就比其他几套弱，因为改版之前的皮甲确实比其他几套强一些。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>从皮甲B套的加强程度中不难发现，改版后的五套防具B套的提升率正在<strong>逐渐靠拢</strong>，总的说来，皮甲B套在<strong>破招攻击</strong>时，相对其他四套防具而言还是有一定的优势，容易<strong>抓破招的职业</strong>仍然可以将皮甲B套作为防具升级的首选。</p><p>但不得不承认的是，在防具B套的提升率获得整体加强并逐渐趋于平衡的版本中，皮甲B套要想再次拉开与其他几套之间的差距，确实也不是一件容易做到的事情。那么皮甲B套的改版加强程度分析就到此结束。</p><h2 id="板甲（七宗罪的堕落）"><a href="#板甲（七宗罪的堕落）" class="headerlink" title="板甲（七宗罪的堕落）"></a>板甲（七宗罪的堕落）</h2><p>从改版后部分玩家的实测结果来看，分析结论还是比较贴近实战数据的，但唯独在<strong>板甲B套七宗罪套装</strong>上出了一些问题。</p><p>首先我在以往的分析中，将装备模版均设为<strong>荒古武器</strong>和<strong>六神器</strong>，从改版后所收到的板甲B套玩家的反馈上来看，如果右边的装备确确实实是荒古六神器的玩家，大技能（一觉及之后的技能）的提升程度的确有达到<strong>20%</strong>的，和我之前的分析也吻合。但包括我自己在内，在此次改版中所获得的加强的确没有预想得那么大。经过一番思索，这里就简单说说与预期产生差距的原因。</p><figure class="image-box">                <img src="https://github.com/CGNz/blogimage/raw/master/DNF-1/banshang.png" alt="板甲上衣" title class>                <p>板甲上衣</p>            </figure><figure class="image-box">                <img src="https://github.com/CGNz/blogimage/raw/master/DNF-1/banxia.png" alt="板甲下衣" title class>                <p>板甲下衣</p>            </figure><figure class="image-box">                <img src="https://github.com/CGNz/blogimage/raw/master/DNF-1/banjian.png" alt="板甲护肩" title class>                <p>板甲护肩</p>            </figure><figure class="image-box">                <img src="https://github.com/CGNz/blogimage/raw/master/DNF-1/banyao.png" alt="板甲腰带" title class>                <p>板甲腰带</p>            </figure><figure class="image-box">                <img src="https://github.com/CGNz/blogimage/raw/master/DNF-1/banxie.png" alt="板甲鞋" title class>                <p>板甲鞋</p>            </figure><figure class="image-box">                <img src="https://github.com/CGNz/blogimage/raw/master/DNF-1/bantao.png" alt="板甲套装属性" title class>                <p>板甲套装属性</p>            </figure><h3 id="基础力智的删除"><a href="#基础力智的删除" class="headerlink" title="基础力智的删除"></a>基础力智的删除</h3><p>先说一说面板，七宗罪套装在改版之后删除了<strong>440点基础力智加成</strong>，再加上上个版本的任务季Buff（四维+50），所以在本次改版后，板甲B套玩家的站街力智应该是降低了<strong>490点</strong>。当然，力智的实际降低数值只有440，另外的50点原本并不属于自己。</p><p>就按下降440点力量计算，力量的伤害提升率与角色目前的力量数值相关，以我改版后的3217点力量为例，此时降低的440点力量所带来的提升为<code>12.69%</code>（440/（3217+250））。对当前力量比我高的玩家来说，降低力量对你的影响会小一些；对当前力量比我低的玩家而言，降低力量对你的影响则会大一些。</p><p>所以七宗罪套装改版后达不到预期的加强程度，第一个相关因素就是角色本身的<strong>基础力量数值</strong>（魔法职业则是智力数值）。当然，我之前在进行分析时，其实也是将基础力量损失的提升率考虑进去了的，所以只要你的打造基本到位，力量不是特别低，在这方面受的<strong>影响都不会太大</strong>。</p><h3 id="武器不是荒古或者圣耀"><a href="#武器不是荒古或者圣耀" class="headerlink" title="武器不是荒古或者圣耀"></a>武器不是荒古或者圣耀</h3><p>在进行装备提升率分析时，现在都统一将武器设为荒古或者圣耀，但在玩家们的实际装备搭配中，并非每位玩家的武器都是荒古或者圣耀。以武器是<strong>金色闪光</strong>为例，除了对技能的等级加成外，可增加<strong>54%的白字</strong>。</p><p>而七宗罪头肩改版后可增加<strong>15%白字附加伤害</strong>，如果是在荒古六神器的搭配下，其他白字加成数值可取称号宠物及装备的27%，此时七宗罪头肩改版后的不破招提升率为<code>11.81%</code>（1.42/1.27）。但是在武器是金色闪光的搭配下，其他白字数值就上升到了<strong>81%</strong>（27%+54%），此时七宗罪头肩改版后同在不破招情况下，提升率仅为<code>8.29%</code>（1.96/1.81）。这就比武器带荒古或者圣耀时，低了<code>3.25%</code>的伤害（1.1181/1.0829）。差距也是一点一滴累计出来的，在B套恍惚的搭配下，<code>3.25%</code>的差距已经不算小了。</p><h3 id="特殊装备不全是三神器"><a href="#特殊装备不全是三神器" class="headerlink" title="特殊装备不全是三神器"></a>特殊装备不全是三神器</h3><p>提出这一点，<strong>并不是说</strong>三神器才是最好的，现在大多数玩家或许都处在三神器到海伯伦的过渡阶段，少数玩家也已经完成了海伯伦的制作。只是之前的计算都将<strong>三神器</strong>作为了特殊装备的<strong>搭配前提</strong>，当三神器中的任意一件装备被替换时，以它们为前提所计算出的提升率，也确实会发生改变。</p><p>​以耳环方面已经将英雄王换成了黑暗祭礼的情况下，两件耳环各自所对应的加算属性不同，英雄王对应最终伤害、黑暗祭礼对应百分比三攻，而这两条属性又恰恰在七宗罪套装中占比较大。</p><p>​先来看七宗罪套装中与最终伤害有关的属性：在改版前，七宗罪套装总共可增加<strong>52%最终伤害</strong>（改版前腰带+12%、套装+40%）；而改版后则将腰带的最终伤害提升至<strong>17%</strong>，套装则用<strong>35%技能攻击力</strong>加以替代。</p><p>​假如将右边的装备设为<strong>+10恍惚套和三神器</strong>，此时其他<strong>最终伤害数值之和33%</strong>，七宗罪腰带和套装改版前52%最终伤害的提升率为<code>39.09%</code>（1.85/1.33）；腰带和套装改版后17%最终伤害、35%技能攻击力的提升率为<code>52.26%</code>（1.5/1.33*1.35）。那么不难得出，在右边装备是恍惚套和三神器的情况下，七宗罪腰带和[5]套装效果在改版后所获得的加强程度为<code>9.47%</code>（1.5226/1.3909），当然这个数值仅仅适用于计算过程（为了比较英雄王和黑暗祭礼的搭配下，七宗罪套装加强程度的差距），<strong>不具备实际的提升意义</strong>。</p><p>那么接下来，在将恍惚套三神器中的英雄王换成黑暗祭礼之后，其他装备的最终伤害数值就只有氤氲之息的15%了，那么七宗罪腰带和套装原本52%最终伤害的提升率为<code>45.22%</code>（1.67/1.15）；同时改版后的17%最终伤害、35%技能攻击力的提升率为<code>54.96%</code>（1.32/1.15*1.35）。最后也可得出，在将耳环从英雄王换成黑暗祭礼后，七宗罪腰带和[5]套装效果的改版加强程度为<code>6.7%</code>（1.5496/1.4522），与耳环带英雄王时所得出的<strong>加强程度</strong>比起来，低了<code>2.6%</code>（1.0947/1.067）。</p><p>​然后就是与百分比三攻相关的属性了：改版之前的七宗罪下装可<strong>增加15%三攻</strong>；改版后则将数值提升至17%。在恍惚套三神器的搭配下，其他百分比三攻的加成数值为15%（+10清泉流响），同时将下装改版前的15%三攻作为基础，此时改版后高出2%三攻的提升率为<code>1.54%</code>（1.32/1.3）。</p><p>还是在将英雄王换成黑暗祭礼后，此时其他<strong>百分比三攻的加成数值为37%</strong>，同时也将下装改版前的15%三攻看作基础，此时改版后多出2%三攻的提升率为<code>1.32%</code>（1.54/1.52）。那么这里的加强程度差距也有<code>0.21%</code>（1.0154/1.0132）。</p><p>在整体考虑所有原因后（不包括力智的删除），若将改版七宗罪套装在荒古、恍惚套、三神器搭配下，所获得的<strong>大技能加强程度记为20%</strong>，那么在武器换成金色闪光、耳环换成黑暗祭礼时，加强程度会降低至：</p><blockquote><p>1.2/1.0325/1.026/1.0021= <strong>1.1304</strong></p></blockquote><p>也就是说在右边装备发生与我的角色相同或相似的变动时，七宗罪套装改版的加强程度就只有<code>13%</code>。如果再加上部分玩家的打造程度不足，使得<strong>删除力量部分</strong>的提升率被放大，那么你所获得的加强程度可能<strong>还要低一些</strong>。除此之外，<strong>右边装备</strong>在荒古六神器的基础上放生其他变动时，也可能会使得七宗罪套装改版的加强程度下降。</p><h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><p>不管怎么说，七宗罪套装的伤害提升能力在本次改版中获得了可观的加强，只是在右边装备存在差异的情况下，我们不能笼统地将大技能的加强程度记为<strong>20%</strong>。不同玩家在装备搭配、打造程度等方面的不同，也会使得在改版后所获得的加强程度不同，希望各位板甲B套玩家们，能够灵活地去看待此次的改版。</p><h2 id="重甲（娜迦王的贪食）"><a href="#重甲（娜迦王的贪食）" class="headerlink" title="重甲（娜迦王的贪食）"></a>重甲（娜迦王的贪食）</h2><p>对于<strong>娜迦王套装</strong>的改版，想必各位也等了很久了，娜迦王套装在此次改版中获得的加强程度，只能用<strong>重获新生</strong>来形容。无论是上衣、头肩的基础属性和强化属性在占比方面的改动，还是腰带伤害效果的添加，这些改动都无疑会将娜迦王套装的伤害水平<strong>带向一个更高的层次</strong>。那么下面就详细地分析一下：重甲B套娜迦王套装在此次改版中所获得的加强程度。</p><ul><li>加强程度分析 装备搭配前提<br>仍然是为了与其他防具的提升率计算前提达成一致，同时也为了符合当前版本右边装备的成型搭配，将首饰和特殊装备分别设为+10恍惚套、和三神器。或许各位每次都觉得应该将特殊装备设为海伯伦套装，但考虑到目前完成海伯伦套装制作的玩家毕竟在少数，所以还是将三神器作为特殊装备的搭配前提。</li></ul><h3 id="重甲上衣"><a href="#重甲上衣" class="headerlink" title="重甲上衣"></a>重甲上衣</h3><figure class="image-box">                <img src="https://github.com/CGNz/blogimage/raw/master/DNF-1/zhongshang.png" alt="重甲上衣" title class>                <p>重甲上衣</p>            </figure><p>​首先，如果你目前已经将上衣强化或者增幅至<strong>+15</strong>了，同时你的职业又不需要异常伤害，那么上衣在改版之后是没有加强的。但我们也知道，能将上衣强化或者增幅至+15的玩家只在极少数，大多数玩家其实都在+10至+12之间，这里就以+10为例：</p><p>改版之前，+10娜迦王上衣可增加17%的白字附加伤害，在<strong>其他白字伤害数值为27%</strong>时，不破招下的提升率为<code>13.39%</code>（1.44/1.27）。在改版之后，由于增加<em>3%的基础白字</em>（同时减少了3级强化、增幅等级的上限），所以改版后的+10娜迦王上衣可<strong>增加20%的白字附加伤害</strong>，同样在其他白字伤害数值为27%时，不破招下的提升率为<code>15.75%</code>（1.47/1.27）。那么可以得出，在强化、增幅等级为+10时，娜迦王上衣改版的加强程度为2.08%。在<strong>强化或者增幅+11、+12</strong>时，所获得的加强程度要比<strong>+10</strong>时略低一些。</p><h3 id="重甲头肩"><a href="#重甲头肩" class="headerlink" title="重甲头肩"></a>重甲头肩</h3><figure class="image-box">                <img src="https://github.com/CGNz/blogimage/raw/master/DNF-1/zhongjian.png" alt="重甲头肩" title class>                <p>重甲头肩</p>            </figure><p>​还是同样的道理，如果目前头肩的<strong>强化、增幅等级已经达到+15</strong>，改版后所获得的加强程度几乎为<code>0</code>（其实准确算来应该有<code>0.3%</code>，这里就不细说了）。但在将头肩的<strong>强化、增幅等级假设为+10</strong>时，它在改版之前所增加的<strong>技能攻击力数值为10%</strong>，由于技能攻击力之间乘算，所以提升率也是<code>10%</code>。在改版之后所增加的技能攻击力，则为基础的3%和强化、增幅所增加的10%，两者仍然乘算，最后得出提升率为<code>13.3%</code>（1.1*1.03）。所以在强化、增幅+10时，娜迦王头肩改版所获得的<strong>加强程度</strong>为<code>3%</code>。</p><p>其实对装备属性有一定理解的玩家会发现，娜迦王头肩改版后新增了3%的基础技能攻击力，它与强化、增幅的技能攻击力之间是乘算的。所以只要现在的<strong>强化、增幅等级没有大于+12</strong>，头肩改版后所获得的加强程度都是<code>3%</code>。</p><h3 id="重甲腰带"><a href="#重甲腰带" class="headerlink" title="重甲腰带"></a>重甲腰带</h3><figure class="image-box">                <img src="https://github.com/CGNz/blogimage/raw/master/DNF-1/zhongyao.png" alt="重甲腰带" title class>                <p>重甲腰带</p>            </figure><p>​腰带算是娜迦王套装改动最大的部位，删除原本的<strong>伪装、暴击率加成效果</strong>，新增<strong>12%力智</strong>，以及<strong>7%双速和10%施放速度</strong>。在伤害方面，<strong>12%力智</strong>的提升率可以直接作为腰带的改版加强程度，其他装备的百分比力智加成数值为18%（黄金杯），此时12%力智的提升率为<code>10.17%</code>（1.3/1.18），所以娜迦王腰带在改版中所获得的加强程度为<code>10.17%</code>。</p><p>并且娜迦王改版后在套装效果中新加入了10%的暴击率，所以腰带虽然减少了<strong>25%的暴击率</strong>，但暴击率的整体减少量也只有<strong>15%</strong>，对角色的影响不是很大。</p><h3 id="重甲下装"><a href="#重甲下装" class="headerlink" title="重甲下装"></a>重甲下装</h3><figure class="image-box">                <img src="https://github.com/CGNz/blogimage/raw/master/DNF-1/zhongxia.png" alt="重甲下装" title class>                <p>重甲下装</p>            </figure><p>​娜迦王下装在<strong>属强加成</strong>和<strong>百分比三攻加成</strong>方面，<strong>没有发生改动</strong>，对大部分职业来说，下装改版后的提升率和改版前是相同的。但对需要异常伤害的职业来说，下装改版后删除原本减少敌人30点灼烧抗性的效果，新增<strong>16%的异常状态伤害</strong>加成（上衣同样也增加了16%的异常状态伤害），异常伤害的具体提升率计算，需要结合其他装备的异常伤害状态加成数值来进行，这里分析时也没有考虑到异常伤害方面的装备前提，这里就不做计算了。但是哪些职业会因为新增此效果而受益，想必各位心中都有数。</p><h3 id="重甲鞋"><a href="#重甲鞋" class="headerlink" title="重甲鞋"></a>重甲鞋</h3><figure class="image-box">                <img src="https://github.com/CGNz/blogimage/raw/master/DNF-1/zhongxie.png" alt="重甲鞋" title class>                <p>重甲鞋</p>            </figure><p>​娜迦王鞋的属性基本可以<strong>视为不变</strong>，仅仅<strong>删除</strong>了原本<strong>减少敌人30点感电抗性</strong>的效果。感电抗性会影响感电状态下的异常蓝字伤害，减少敌人感电抗性也会增加感电状态下的异常蓝字伤害，所以单从这一点来讲，对需要感电异常伤害的职业而言，在<strong>单件装备上算是一种削弱</strong>。但这种削弱也通过为<strong>上衣、下装新增异常状态伤害加成</strong>的方式弥补回来了，所以也是无关痛痒的。</p><h3 id="重甲套装属性"><a href="#重甲套装属性" class="headerlink" title="重甲套装属性"></a>重甲套装属性</h3><figure class="image-box">                <img src="https://github.com/CGNz/blogimage/raw/master/DNF-1/zhongtao.png" alt="重甲套装属性" title class>                <p>重甲套装属性</p>            </figure><p>​在套装效果方面，<strong>[3]套装</strong>的最终伤害加成删除了对MP的要求，并同时增加了<strong>3%的暴击率加成</strong>；[5]套装的技能攻击力也删除了对MP的要求，增加了<strong>7%的暴击率</strong>，但<strong>删除</strong>了原有的<strong>25点属性强化</strong>。那么下面就从发生改动的属性上，来计算一下娜迦王套装改版后所获得的加强程度（计算时将上衣、头肩的强化、增幅等级设为+10，不考虑异常伤害方面的改动）。</p><ul><li>改动属性所对应的 原本属性</li></ul><p><strong>白字附加伤害+17%</strong>：在年套称号、宠物及宠物装备的27%白字数值下，不破招时的提升率为<code>13.39%</code>（1.44/1.27）。<strong>技能攻击力+10%</strong>：技能攻击力之间相互乘算，提升率<code>10%</code>。<strong>所有属性强化+25</strong>：将不带防具的属强数值设为220，娜迦王除套装效果外可对<strong>四种属性强化各自增加14点</strong>，所以将此时的属强基础数值记作234点；在不考虑怪物属抗、无属性白字装备时，25点属强的提升率为<code>5.51%</code>（25/454）。最后可以得出，娜迦王套装改动属性所对应原本属性部分的提升率为：</p><blockquote><p>1.1339<em>1.1</em>1.0551= <strong>1.316</strong></p></blockquote><p>其他技能等级加成、技能攻击力加成、最终伤害等未发生改变的属性，都不在加强程度分析的考虑范围内。</p><ul><li>改动属性</li></ul><p><strong>白字附加伤害+20%</strong>：在相同的其他白字伤害数值下，不破招时的提升率为<code>15.75%</code>（1.47/1.27）。技能攻击力<code>+13.3%</code>：基础的3%与强化、增幅的10%乘算（1.03*1.1），提升率<code>13.3%</code>。力量、智力+12%：在黄金杯的18%力智加成数值下，提升率为<code>10.17%</code>（1.3/1.18）。那么可以得出，娜迦王套装改版所得获得的加强程度为：</p><blockquote><p>1.1575<em>1.133</em>1.1017/1.316= <strong>1.098</strong> </p></blockquote><p>娜迦王套装改版后所获得的加强程度为9.8%，或许你会认为此加强程度很低，虽然从表面上看，娜迦王套装的加强程度确实没有布甲B套、板甲B套来得高，但本次加强的一个重要意义，是降低了上衣、头肩对强化、增幅等级的要求，这使得满属性的娜迦王套装不再像改版前那么遥不可及。而在改版之前，满属性的娜迦王套装本来就很强，这样看起来，是不是觉得娜迦王套装这次的加强很给力？</p><h3 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h3><p>娜迦王套装在改版之后，既提<strong>升了对整体伤害的增加量</strong>，又<strong>降低了对强化、增幅的要求</strong>，这样的加强结果已经非常不错了。当然，即便在改版之后，由于娜迦王鞋在技能等级加成的范围上，仍然存在明确的划分，这也使得娜迦王套装难以成为一套全职业皆宜的<strong>万金油</strong>套装；但对适合它的职业而言，改版后的娜迦王套装无疑可以作为防具升级的优先考虑目标。娜迦王套装的改版加强程度分析就到此结束。</p><p>&emsp;&emsp;本文转载自微博@Sky灬素颜，仅供观看参考</p>]]></content>
      
      
      <categories>
          
          <category> DNF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DNF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式</title>
      <link href="/2018/08/30/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
      <url>/2018/08/30/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="设计模式有什么用"><a href="#设计模式有什么用" class="headerlink" title="设计模式有什么用"></a>设计模式有什么用</h1><p>(1) 设计模式来源众多专家的经验和智慧，它们是从许多优秀的软件系统中总结出的成功的、能够实现可维护性复用的设计方案，使用这些方案将可以让我们避免做一些重复性的工作，也许我们冥思苦想得到的一个“自以为很了不起”的设计方案其实就是某一个设计模式。在时间就是金钱的今天，设计模式无疑会为有助于我们提高开发和设计效率，但它不保证一定会提高。</p><p>(2) 设计模式提供了一套通用的设计词汇和一种通用的形式来方便开发人员之间沟通和交流，使得设计方案更加通俗易懂。交流通常很耗时，任何有助于提高交流效率的东西都可以为我们节省不少时间。无论你使用哪种编程语言，做什么类型的项目，甚至你处于一个国际化的开发团队，当面对同一个设计模式时，你和别人的理解并无二异，因为设计模式是跨语言、跨平台、跨应用、跨国界的。</p><p>(3) 大部分设计模式都兼顾了系统的可重用性和可扩展性，这使得我们可以更好地重用一些已有的设计方案、功能模块甚至一个完整的软件系统，避免我们经常做一些重复的设计、编写一些重复的代码。此外，随着软件规模的日益增大，软件寿命的日益变长，系统的可维护性和可扩展性也越来越重要，许多设计模式将有助于提高系统的灵活性和可扩展性，让我们在不修改或者少修改现有系统的基础上增加、删除或者替换功能模块。如果一点设计模式都不懂，我想要做到这一点恐怕还是很困难的。</p><p>(4) 合理使用设计模式并对设计模式的使用情况进行文档化，将有助于别人更快地理解系统。如果某一天因为升职或跳槽等原因，别人接手了你的项目，只要他也懂设计模式，我想他应该能够很快理解你的设计思路和实现方案，让你升职无后患之忧，跳槽也心安理得，何乐而不为呢？</p><p>(5) 最后一点对初学者很重要，学习设计模式将有助于初学者更加深入地理解面向对象思想，让你知道：如何将代码分散在几个不同的类中？为什么要有“接口”？何谓针对抽象编程？何时不应该使用继承？如果不修改源代码增加新功能？同时还让你能够更好地阅读和理解现有类库（如JDK）与其他系统中的源代码，让你早点脱离面向对象编程的“菜鸟期”。</p><h1 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h1><p><a href="http://www.cnblogs.com/wangjq/archive/2012/07/12/2587966.html" target="_blank" rel="noopener">观察者模式</a></p><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>有时被称作发布/订阅模式，观察者模式定义了一种一对多的依赖关系，让多个观察者对象同时监听某一个主题对象。这个主题对象在状态发生变化时，会通知所有观察者对象，使它们能够自动更新自己。</p><h2 id="解决的问题"><a href="#解决的问题" class="headerlink" title="解决的问题"></a>解决的问题</h2><p>将一个系统分割成一个一些类相互协作的类有一个不好的副作用，那就是需要维护相关对象间的一致性。我们不希望为了维持一致性而使各类紧密耦合，这样会给维护、扩展和重用都带来不便。观察者就是解决这类的耦合关系的。</p><h2 id="模式中的角色"><a href="#模式中的角色" class="headerlink" title="模式中的角色"></a>模式中的角色</h2><p><strong>抽象主题（Subject）</strong>：它把所有观察者对象的引用保存到一个聚集里，每个主题都可以有任何数量的观察者。抽象主题提供一个接口，可以增加和删除观察者对象。</p><p><strong>具体主题（ConcreteSubject）</strong>：将有关状态存入具体观察者对象；在具体主题内部状态改变时，给所有登记过的观察者发出通知。</p><p><strong>抽象观察者（Observer）</strong>：为所有的具体观察者定义一个接口，在得到主题通知时更新自己。</p><p><strong>具体观察者（ConcreteObserver）</strong>：实现抽象观察者角色所要求的更新接口，以便使本身的状态与主题状态协调。</p><h2 id="模式总结"><a href="#模式总结" class="headerlink" title="模式总结"></a>模式总结</h2><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><p>观察者模式解除了主题和具体观察者的耦合，让耦合的双方都依赖于抽象，而不是依赖具体。从而使得各自的变化都不会影响另一边的变化。</p><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><p>依赖关系并未完全解除，抽象通知者依旧依赖抽象的观察者。</p><h3 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h3><p>当一个对象的改变需要给变其它对象时，而且它不知道具体有多少个对象有待改变时。</p><p>一个抽象某型有两个方面，当其中一个方面依赖于另一个方面，这时用观察者模式可以将这两者封装在独立的对象中使它们各自独立地改变和复用。</p><h1 id="适配器模式"><a href="#适配器模式" class="headerlink" title="适配器模式"></a>适配器模式</h1><p><a href="https://www.cnblogs.com/wangjq/archive/2012/07/09/2582485.html" target="_blank" rel="noopener">适配器模式</a></p><h2 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h2><p>将一个类的接口转换成客户希望的另外一个接口。Adapter模式使得原本由于接口不兼容而不能一起工作的那些类可以在一起工作。</p><h2 id="解决的问题-1"><a href="#解决的问题-1" class="headerlink" title="解决的问题"></a>解决的问题</h2><p>即Adapter模式使得原本由于接口不兼容而不能一起工作的那些类可以在一起工作。</p><h2 id="模式中的角色-1"><a href="#模式中的角色-1" class="headerlink" title="模式中的角色"></a>模式中的角色</h2><p><strong>目标接口（Target）</strong>：客户所期待的接口。目标可以是具体的或抽象的类，也可以是接口。</p><p><strong>需要适配的类（Adaptee）</strong>：需要适配的类或适配者类。</p><p><strong>适配器（Adapter）</strong>：通过包装一个需要适配的对象，把原接口转换成目标接口。</p><h2 id="模式总结-1"><a href="#模式总结-1" class="headerlink" title="模式总结"></a>模式总结</h2><h3 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h3><p>通过适配器，客户端可以调用同一接口，因而对客户端来说是透明的。这样做更简单、更直接、更紧凑。</p><p>复用了现存的类，解决了现存类和复用环境要求不一致的问题。</p><p>将目标类和适配者类解耦，通过引入一个适配器类重用现有的适配者类，而无需修改原有代码。</p><p>一个对象适配器可以把多个不同的适配者类适配到同一个目标，也就是说，同一个适配器可以把适配者类和它的子类都适配到目标接口。</p><h3 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h3><p>对于对象适配器来说，更换适配器的实现过程比较复杂。</p><h3 id="适用场景-1"><a href="#适用场景-1" class="headerlink" title="适用场景"></a>适用场景</h3><p>系统需要使用现有的类，而这些类的接口不符合系统的接口。</p><p>想要建立一个可以重用的类，用于与一些彼此之间没有太大关联的一些类，包括一些可能在将来引进的类一起工作。</p><p>两个类所做的事情相同或相似，但是具有不同接口的时候。</p><p>旧的系统开发的类已经实现了一些功能，但是客户端却只能以另外接口的形式访问，但我们不希望手动更改原有类的时候。</p><p>使用第三方组件，组件接口定义和自己定义的不同，不希望修改自己的接口，但是要使用第三方组件接口的功能。</p>]]></content>
      
      
      <categories>
          
          <category> IT </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Java学习笔记-3</title>
      <link href="/2018/08/30/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-3/"/>
      <url>/2018/08/30/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-3/</url>
      
        <content type="html"><![CDATA[<h1 id="HTTP协议-POST和GET的区别"><a href="#HTTP协议-POST和GET的区别" class="headerlink" title="HTTP协议 POST和GET的区别"></a>HTTP协议 POST和GET的区别</h1><p><a href="http://www.cnblogs.com/hyddd/archive/2009/03/31/1426026.html" target="_blank" rel="noopener">浅谈HTTP中Get与Post的区别</a></p><ul><li>Http定义了与服务器交互的不同方法，最基本的方法有4种，分别是GET，POST，PUT，DELETE。URL全称是资源描述符，我们可以这样认为：一个URL地址，它用于描述一个网络上的资源，而HTTP中的GET，POST，PUT，DELETE就对应着对这个资源的查，改，增，删4个操作。</li><li>GET一般用于获取/查询资源信息，而POST一般用于更新资源信息。</li></ul><h2 id="原理性的区别"><a href="#原理性的区别" class="headerlink" title="原理性的区别"></a>原理性的区别</h2><h3 id="GET-安全与幂等"><a href="#GET-安全与幂等" class="headerlink" title="GET 安全与幂等"></a>GET 安全与幂等</h3><p>根据HTTP规范，GET用于信息获取，而且应该是安全的和幂等的。</p><p>(1) 所谓安全的意味着该操作用于获取信息而非修改信息。换句话说，GET 请求一般不应产生副作用。就是说，它仅仅是获取资源信息，就像数据库查询一样，不会修改，增加数据，不会影响资源的状态。</p><p>(2) 幂等的意味着对同一URL的多个请求应该返回同样的结果。</p><p>但在实际应用中，以上2条规定并没有这么严格。引用别人文章的例子：比如，新闻站点的头版不断更新。虽然第二次请求会返回不同的一批新闻，该操作仍然被认为是安全的和幂等的，因为它总是返回当前的新闻。从根本上说，如果目标是当用户打开一个链接时，他可以确信从自身的角度来看没有改变资源即可。</p><h3 id="POST-可能修改服务器上的资源请求"><a href="#POST-可能修改服务器上的资源请求" class="headerlink" title="POST 可能修改服务器上的资源请求"></a>POST 可能修改服务器上的资源请求</h3><ul><li>继续引用上面的例子：还是新闻以网站为例，读者对新闻发表自己的评论应该通过POST实现，因为在评论提交后站点的资源已经不同了，或者说资源被修改了。</li></ul><h2 id="应用上的区别"><a href="#应用上的区别" class="headerlink" title="应用上的区别"></a>应用上的区别</h2><p><strong>说完原理性的问题，我们再从表面现像上面看看GET和POST的区别：</strong></p><p>1.GET请求的数据会附在URL之后（就是把数据放置在HTTP协议头中），以?分割URL和传输数据，参数之间以&amp;相连，如：</p><blockquote><p>login.action?name=hyddd&amp;password=idontknow&amp;verify=%E4%BD%A0%E5%A5%BD。</p></blockquote><p>如果数据是英文字母/数字，原样发送，如果是空格，转换为+，如果是中文/其他字符，则直接把字符串用BASE64加密，得出如：%E4%BD%A0%E5%A5%BD，其中％XX中的XX为该符号以16进制表示的ASCII。</p><p>POST把提交的数据则放置在是HTTP包的包体中。</p><p>2.”GET方式提交的数据最多只能是1024字节，理论上POST没有限制，可传较大量的数据。</p><p>3.在ASP中，服务端获取GET请求参数用Request.QueryString；获取POST请求参数用Request.Form。在JSP中，用request.getParameter(\”XXXX\”)来获取，虽然jsp中也有request.getQueryString()方法，但使用起来比较麻烦，比如：传一个<code>test.jsp?name=hyddd&amp;password=hyddd</code>，用request.getQueryString()得到的是：<code>name=hyddd&amp;password=hyddd</code>。</p><p>4.POST的安全性要比GET的安全性高。</p><p>注意：这里所说的安全性和上面GET提到的“安全”不是同个概念。上面“安全”的含义仅仅是不作数据修改，而这里安全的含义是真正的Security的含义，比如：通过GET提交数据，用户名和密码将明文出现在URL上，因为：</p><p>(1)登录页面有可能被浏览器缓存；</p><p>(2)其他人查看浏览器的历史纪录，那么别人就可以拿到你的账号和密码了。</p><p>除此之外，使用GET提交数据还可能会造成Cross-site request forgery攻击。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>总结一下，Get是<strong>向服务器发索取数据的一种请求</strong>，而Post是<strong>向服务器提交数据的一种请求</strong>，在FORM（表单）中，Method默认为”GET”，实质上，GET和POST只是发送机制不同，并不是一个取一个发。</p><h1 id="Java对象的生命周期"><a href="#Java对象的生命周期" class="headerlink" title="Java对象的生命周期"></a>Java对象的生命周期</h1><p><a href="https://blog.csdn.net/moneyshi/article/details/53033578" target="_blank" rel="noopener">Java 对象的生命周期</a></p><ul><li>在Java中，对象的生命周期包括以下几个阶段：</li></ul><ol><li><p>创建阶段(Created)</p></li><li><p>应用阶段(In Use)</p></li><li><p>不可见阶段(Invisible)</p></li><li><p>不可达阶段(Unreachable)</p></li><li><p>收集阶段(Collected)</p></li><li><p>终结阶段(Finalized)</p></li><li><p>对象空间重分配阶段(De-allocated)</p></li></ol><figure class="image-box">                <img src="https://img-blog.csdn.net/20140805161851452?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc29kaW5v/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="JavaObject Life Cycle" title class>                <p>JavaObject Life Cycle</p>            </figure><h2 id="创建阶段"><a href="#创建阶段" class="headerlink" title="创建阶段"></a>创建阶段</h2><p>在创建阶段系统通过下面的几个步骤来完成对象的创建过程</p><ul><li>为对象分配存储空间</li><li>开始构造对象</li><li>从超类到子类对static成员进行初始化</li><li>超类成员变量按顺序初始化，递归调用超类的构造方法</li><li>子类成员变量按顺序初始化，子类构造方法调用</li></ul><p>一旦对象被创建，并被分派给某些变量赋值，这个对象的状态就切换到了应用阶段</p><h2 id="应用阶段"><a href="#应用阶段" class="headerlink" title="应用阶段"></a>应用阶段</h2><p>对象至少被一个强引用持有着。</p><h2 id="不可见阶段"><a href="#不可见阶段" class="headerlink" title="不可见阶段"></a>不可见阶段</h2><p>当一个对象处于不可见阶段时，说明程序本身不再持有该对象的任何强引用，虽然该这些引用仍然是存在着的。</p><p>简单说就是程序的执行已经超出了该对象的作用域了。</p><p>举例如下图：本地变量count在25行时已经超出了其作用域，则在此时称之为count处于不可视阶段。当然这种情况编译器在编译的过程中会直接报错了。</p><figure class="image-box">                <img src="https://img-blog.csdn.net/20140805162025676?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc29kaW5v/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="不可见阶段示例" title class>                <p>不可见阶段示例</p>            </figure><h2 id="不可达阶段"><a href="#不可达阶段" class="headerlink" title="不可达阶段"></a>不可达阶段</h2><p>对象处于不可达阶段是指该对象不再被任何强引用所持有。</p><p>与“不可见阶段”相比，“不可见阶段”是指程序不再持有该对象的任何强引用，这种情况下，该对象仍可能被JVM等系统下的某些已装载的静态变量或线程或JNI等强引用持有着，这些特殊的强引用被称为”GC root”。存在着这些GC root会导致对象的内存泄露情况，无法被回收。</p><h2 id="收集阶段"><a href="#收集阶段" class="headerlink" title="收集阶段"></a>收集阶段</h2><p>当垃圾回收器发现该对象已经处于“不可达阶段”并且垃圾回收器已经对该对象的内存空间重新分配做好准备时，则对象进入了“收集阶段”。如果该对象已经重写了finalize()方法，则会去执行该方法的终端操作。</p><p>这里要特别说明一下：不要重载finazlie()方法！原因有两点：</p><ul><li>会影响JVM的对象分配与回收速度</li></ul><p>在分配该对象时，JVM需要在垃圾回收器上注册该对象，以便在回收时能够执行该重载方法；在该方法的执行时需要消耗CPU时间且在执行完该方法后才会重新执行回收操作，即至少需要垃圾回收器对该对象执行两次GC。</p><ul><li>可能造成该对象的再次“复活”</li></ul><p>在finalize()方法中，如果有其它的强引用再次持有该对象，则会导致对象的状态由“收集阶段”又重新变为“应用阶段”。这个已经破坏了Java对象的生命周期进程，且“复活”的对象不利用后续的代码管理。</p><h2 id="终结阶段"><a href="#终结阶段" class="headerlink" title="终结阶段"></a>终结阶段</h2><p>当对象执行完finalize()方法后仍然处于不可达状态时，则该对象进入终结阶段。在该阶段是等待垃圾回收器对该对象空间进行回收。</p><h2 id="对象空间重新分配阶段"><a href="#对象空间重新分配阶段" class="headerlink" title="对象空间重新分配阶段"></a>对象空间重新分配阶段</h2><p>垃圾回收器对该对象的所占用的内存空间进行回收或者再分配了，则该对象彻底消失了，称之为“对象空间重新分配阶段”。</p><h1 id="重载、重写以及继承、多态的区别"><a href="#重载、重写以及继承、多态的区别" class="headerlink" title="重载、重写以及继承、多态的区别"></a>重载、重写以及继承、多态的区别</h1><p><a href="https://www.cnblogs.com/cugwx/p/3650605.html" target="_blank" rel="noopener">重载、重写以及继承、多态的区别</a></p><h2 id="继承-inheritance"><a href="#继承-inheritance" class="headerlink" title="继承(inheritance)"></a>继承(inheritance)</h2><ul><li>简单的说，继承就是在一个现有类型的基础上，通过增加新的方法或者重定义已有方法（下面会讲到，这种方式叫重写）的方式，产生一个新的类型。</li></ul><p>继承是面向对象的三个基本特征–封装、继承、多态的其中之一，我们在使用JAVA时编写的每一个类都是在继承，因为在JAVA语言中，<code>java.lang.Object</code>类是所有类最根本的基类（或者叫父类、超类），如果我们新定义的一个类没有明确地指定继承自哪个基类，那么Java就会默认为它是继承自Object类的。</p><p>可以把JAVA中的类分为以下三种： </p><blockquote><p>类：使用class定义且不含有抽象方法的类。</p></blockquote><blockquote><p>抽象类：使用abstract class定义的类，它可以含有，也可以不含有抽象方法。</p></blockquote><blockquote><p>接口：使用interface定义的类。</p></blockquote><p>在这三种类型之间存在下面的继承规律： </p><blockquote><p>类可以继承（extends）类，可以继承（extends）抽象类，可以继承（implements）接口。</p></blockquote><blockquote><p>抽象类可以继承（extends）类，可以继承（extends）抽象类，可以继承（implements）接口。</p></blockquote><blockquote><p>接口只能继承（extends）接口。</p></blockquote><p>使用继承和组合复用原有的类，都是一种增量式的开发模式，这种方式带来的好处是不需要修改原有的代码，因此不会给原有代码带来新的BUG，也不用因为对原有代码的修改而重新进行测试，这对我们的开发显然是有益的。因此，如果我们是在维护或者改造一个原有的系统或模块，尤其是对它们的了解不是很透彻的时候，就可以选择增量开发的模式，这不仅可以大大提高我们的开发效率，也可以规避由于对原有代码的修改而带来的风险。 </p><h2 id="多态-Polymorphism"><a href="#多态-Polymorphism" class="headerlink" title="多态(Polymorphism)"></a>多态(Polymorphism)</h2><p>继承是多态得以实现的基础。从字面上理解，多态就是一种类型表现出多种状态）。将一个方法调用同这个方法所属的主体（也就是对象或类）关联起来叫做绑定，分前期绑定和后期绑定两种。下面解释一下它们的定义： </p><blockquote><p><strong>前期绑定</strong>：在程序运行之前进行绑定，由编译器和连接程序实现，又叫做静态绑定。比如static方法和final方法，注意，这里也包括private方法，因为它是隐式final的。</p></blockquote><blockquote><p>后期绑定：在运行时根据对象的类型进行绑定，由方法调用机制实现，因此又叫做动态绑定，或者运行时绑定。除了前期绑定外的所有方法都属于后期绑定。</p></blockquote><p>多态就是在后期绑定这种机制上实现的。多态给我们带来的好处是消除了类之间的耦合关系，使程序更容易扩展。</p><h2 id="重载-overloading-和重写-overriding"><a href="#重载-overloading-和重写-overriding" class="headerlink" title="重载(overloading)和重写(overriding)"></a>重载(overloading)和重写(overriding)</h2><ul><li>重载和重写都是针对方法的概念，在弄清楚这两个概念之前，我们先来了解一下什么叫方法的<strong>型构</strong>（英文名是signature，有的译作“签名”，虽然它被使用的较为广泛，但是这个翻译不准确的）。</li><li>型构就是指方法的组成结构，具体包括方法的名称和参数，涵盖参数的数量、类型以及出现的顺序，但是不包括方法的返回值类型，访问权限修饰符，以及abstract、static、final等修饰符。</li></ul><p>比如下面两个就是具有相同型构的方法： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public void method(int i, String s) &#123;   </span><br><span class="line">    // do something   </span><br><span class="line">&#125;   </span><br><span class="line">  </span><br><span class="line">public String method(int i, String s) &#123;   </span><br><span class="line">    // do something   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而这两个就是具有不同型构的方法： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public void method(int i, String s) &#123;   </span><br><span class="line">    // do something   </span><br><span class="line">&#125;   </span><br><span class="line">  </span><br><span class="line">public void method(String s, int i) &#123;   </span><br><span class="line">    // do something   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>了解完型构的概念后我们再来看看重载和重写，请看它们的定义： </p><blockquote><p>重写，英文名是overriding，是指在继承情况下，子类中定义了与其基类中方法具有相同型构的新方法，就叫做子类把基类的方法重写了。这是实现多态必须的步骤。</p></blockquote><blockquote><p>重载，英文名是overloading，是指在同一个类中定义了一个以上具有相同名称，但是型构不同的方法。在同一个类中，是不允许定义多于一个的具有相同型构的方法的。</p></blockquote><p>考虑一个问题：构造器可以被重载吗？答案当然是可以的，我们在实际的编程中也经常这么做。</p><p>实际上构造器也是一个方法，构造器名就是方法名，构造器参数就是方法参数，而它的返回值就是新创建的类的实例。但是构造器却不可以被子类重写，因为子类无法定义与基类具有相同型构的构造器。</p><h1 id="Linux命令行操作"><a href="#Linux命令行操作" class="headerlink" title="Linux命令行操作"></a>Linux命令行操作</h1><h2 id="find文件查找命令与grep文件内容查找命令"><a href="#find文件查找命令与grep文件内容查找命令" class="headerlink" title="find文件查找命令与grep文件内容查找命令"></a>find文件查找命令与grep文件内容查找命令</h2><ul><li>在使用linux时，经常需要进行文件查找。其中查找的命令主要有find和grep。两个命令是有区的。<br>区别：(1)find命令是根据文件的属性进行查找，如文件名，文件大小，所有者，所属组，是否为空，访问时间，修改时间等。<br>(2)grep是根据文件的内容进行查找，会对文件的每一行按照给定的模式(patter)进行匹配查找。</li></ul><h3 id="一-find命令"><a href="#一-find命令" class="headerlink" title="一.find命令"></a>一.find命令</h3><ul><li>基本格式：find  path expression</li></ul><p>1.按照文件名查找</p><p>(1)find / -name httpd.conf　　#在根目录下查找文件httpd.conf，表示在整个硬盘查找</p><p>(2)find /etc -name httpd.conf　　#在/etc目录下文件httpd.conf</p><p>(3)find /etc -name ‘<em>srm</em>‘　　#使用通配符*(0或者任意多个)。表示在/etc目录下查找文件名中含有字符串‘srm’的文件</p><p>(4)find . -name ‘srm*’ 　　#表示当前目录下查找文件名开头是字符串‘srm’的文件</p><p>2.按照文件特征查找 　　　<br>　<br>(1)find / -amin -10 　　# 查找在系统中最后10分钟访问的文件(access time)</p><p>(2)find / -atime -2　　 # 查找在系统中最后48小时访问的文件</p><p>(3)find / -empty 　　# 查找在系统中为空的文件或者文件夹</p><p>(4)find / -group cat 　　# 查找在系统中属于 group为cat的文件</p><p>(5)find / -mmin -5 　　# 查找在系统中最后5分钟里修改过的文件(modify time)</p><p>(6)find / -mtime -1 　　#查找在系统中最后24小时里修改过的文件</p><p>(7)find / -user fred 　　#查找在系统中属于fred这个用户的文件</p><p>(8)find / -size +10000c　　#查找出大于10000000字节的文件(c:字节，w:双字，k:KB，M:MB，G:GB)(9)find / -size -1000k 　　#查找出小于1000KB的文件</p><p>3.使用混合查找方式查找文件</p><ul><li>参数有： ！，-and(-a)，-or(-o)。</li></ul><p>(1)find /tmp -size +10000c -and -mtime +2 　　#在/tmp目录下查找大于10000字节并在最后2分钟内修改的文件</p><p>(2)find / -user fred -or -user george 　　#在/目录下查找用户是fred或者george的文件文件</p><p>(3)find /tmp ! -user panda　　#在/tmp目录中查找所有不属于panda用户的文件</p><h3 id="二、grep命令"><a href="#二、grep命令" class="headerlink" title="二、grep命令"></a>二、grep命令</h3><ul><li>基本格式：find  expression</li></ul><p>1.主要参数</p><p>　　　　[options]主要参数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">－c：只输出匹配行的计数。</span><br><span class="line">－i：不区分大小写</span><br><span class="line">－h：查询多文件时不显示文件名。</span><br><span class="line">－l：查询多文件时只输出包含匹配字符的文件名。</span><br><span class="line">－n：显示匹配行及行号。</span><br><span class="line">－s：不显示不存在或无匹配文本的错误信息。</span><br><span class="line">－v：显示不包含匹配文本的所有行。</span><br></pre></td></tr></table></figure></p><p>pattern正则表达式主要参数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">\： 忽略正则表达式中特殊字符的原有含义。</span><br><span class="line">^：匹配正则表达式的开始行。</span><br><span class="line">$: 匹配正则表达式的结束行。</span><br><span class="line">\&lt;：从匹配正则表达 式的行开始。</span><br><span class="line">\&gt;：到匹配正则表达式的行结束。</span><br><span class="line">[ ]：单个字符，如[A]即A符合要求 。</span><br><span class="line">[ - ]：范围，如[A-Z]，即A、B、C一直到Z都符合要求 。</span><br><span class="line">.：所有的单个字符。</span><br><span class="line">* ：有字符，长度可以为0。</span><br></pre></td></tr></table></figure></p><p>2.实例　 </p><p>(1)grep ‘test’ d*　　#显示所有以d开头的文件中包含 test的行</p><p>(2)grep ‘test’ aa bb cc 　　 #显示在aa，bb，cc文件中包含test的行</p><p>(3)grep ‘[a-z]{5}’ aa 　　#显示所有包含每行字符串至少有5个连续小写字符的字符串的行</p><p>(4)grep magic /usr/src　　#显示/usr/src目录下的文件(不含子目录)包含magic的行</p><p>(5)grep -r magic /usr/src　　#显示/usr/src目录下的文件(包含子目录)包含magic的行</p><p>(6)grep -w pattern files 只匹配整个单词，而不是字符串的一部分(如匹配’magic’，而不是’magical’)</p>]]></content>
      
      
      <categories>
          
          <category> IT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java学习笔记-2</title>
      <link href="/2018/08/30/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-2/"/>
      <url>/2018/08/30/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-2/</url>
      
        <content type="html"><![CDATA[<h1 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h1><ul><li>单例模式，是一种常用的软件设计模式。在它的核心结构中只包含一个被称为单例的特殊类。通过单例模式可以保证系统中，应用该模式的类一个类只有一个实例。即一个类只有一个对象实例</li></ul><h2 id="单例模式的特点"><a href="#单例模式的特点" class="headerlink" title="单例模式的特点"></a>单例模式的特点</h2><p>1、单例类只能有一个实例。</p><p>2、单例类必须自己创建自己的唯一实例。</p><p>3、单例类必须给所有其他对象提供这一实例。</p><h2 id="单例模式线程安全的问题"><a href="#单例模式线程安全的问题" class="headerlink" title="单例模式线程安全的问题"></a>单例模式线程安全的问题</h2><p>一方面在获取单例的时候，要保证不能产生多个实例对象，后面会详细讲到五种实现方式；</p><p>另一方面，在使用单例对象的时候，要注意单例对象内的实例变量是会被多线程共享的，推荐使用无状态的对象，不会因为多个线程的交替调度而破坏自身状态导致线程安全问题，比如我们常用的VO，DTO等（局部变量是在用户栈中的，而且用户栈本身就是线程私有的内存区域，所以不存在线程安全问题）。</p><h2 id="实现单例模式的方式"><a href="#实现单例模式的方式" class="headerlink" title="实现单例模式的方式"></a>实现单例模式的方式</h2><h3 id="饿汉式单例（立即加载方式）"><a href="#饿汉式单例（立即加载方式）" class="headerlink" title="饿汉式单例（立即加载方式）"></a>饿汉式单例（立即加载方式）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public class Singleton &#123;  </span><br><span class="line">    private static Singleton instance = new Singleton();  </span><br><span class="line">    private Singleton ()&#123;&#125;  </span><br><span class="line">    public static Singleton getInstance() &#123;  </span><br><span class="line">    return instance;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>饿汉式单例在类加载初始化时就创建好一个静态的对象供外部使用，除非系统重启，这个对象不会改变，所以本身就是线程安全的。</p><p>Singleton通过将构造方法限定为private避免了类在外部被实例化，在同一个虚拟机范围内，Singleton的唯一实例只能通过getInstance()方法访问。（事实上，通过Java反射机制是能够实例化构造方法为private的类的，那基本上会使所有的Java单例实现失效。此问题在此处不做讨论，姑且闭着眼就认为反射机制不存在。）</p><h3 id="懒汉式单例-线程不安全"><a href="#懒汉式单例-线程不安全" class="headerlink" title="懒汉式单例 (线程不安全)"></a>懒汉式单例 (线程不安全)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public class Singleton &#123;  </span><br><span class="line">    private static Singleton instance;  </span><br><span class="line">    private Singleton ()&#123;&#125;  </span><br><span class="line">  </span><br><span class="line">    public static Singleton getInstance() &#123;  </span><br><span class="line">    if (instance == null) &#123;  </span><br><span class="line">        instance = new Singleton();  </span><br><span class="line">    &#125;  </span><br><span class="line">    return instance;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 这种写法lazy loading很明显，但是致命的是在多线程不能正常工作。</p><h3 id="懒汉式单例-线程安全"><a href="#懒汉式单例-线程安全" class="headerlink" title="懒汉式单例 (线程安全)"></a>懒汉式单例 (线程安全)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public class Singleton &#123;  </span><br><span class="line">    private static Singleton instance;  </span><br><span class="line">    private Singleton ()&#123;&#125;  </span><br><span class="line">    public static synchronized Singleton getInstance() &#123;  </span><br><span class="line">    if (instance == null) &#123;  </span><br><span class="line">        instance = new Singleton();  </span><br><span class="line">    &#125;  </span><br><span class="line">    return instance;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种写法能够在多线程中很好的工作，而且看起来它也具备很好的lazyloading；<br>但是，遗憾的是，效率很低，99%情况下不需要同步。</p><h3 id="静态内部类实现"><a href="#静态内部类实现" class="headerlink" title="静态内部类实现"></a>静态内部类实现</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public class Singleton &#123;  </span><br><span class="line">    private static class SingletonHolder &#123;  </span><br><span class="line">    private static final Singleton INSTANCE = new Singleton();  </span><br><span class="line">    &#125;  </span><br><span class="line">    private Singleton ()&#123;&#125;  </span><br><span class="line">    public static final Singleton getInstance() &#123;  </span><br><span class="line">    return SingletonHolder.INSTANCE;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种方式同样利用了classloder的机制来保证初始化instance时只有一个线程，它跟第三种和第四种方式不同的是（很细微的差别）：第三种和第四种方式是只要Singleton类被装载了，那么instance就会被实例化（没有达到lazy loading效果），而这种方式是Singleton类被装载了，instance不一定被初始化。因为SingletonHolder类没有被主动使用，只有显示通过调用getInstance方法时，才会显示装载SingletonHolder类，从而实例化instance。想象一下，如果实例化instance很消耗资源，我想让他延迟加载，另外一方面，我不希望在Singleton类加载时就实例化，因为我不能确保Singleton类还可能在其他的地方被主动使用从而被加载，那么这个时候实例化instance显然是不合适的。这个时候，这种方式相比第三和第四种方式就显得很合理。</p><h3 id="内部枚举类实现"><a href="#内部枚举类实现" class="headerlink" title="内部枚举类实现"></a>内部枚举类实现</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public enum Singleton &#123;  </span><br><span class="line">    INSTANCE;  </span><br><span class="line">    public void whateverMethod() &#123;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="双重校验锁"><a href="#双重校验锁" class="headerlink" title="双重校验锁"></a>双重校验锁</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public class Singleton &#123;  </span><br><span class="line">    private volatile static Singleton singleton;  </span><br><span class="line">    private Singleton ()&#123;&#125;  </span><br><span class="line">    public static Singleton getSingleton() &#123;  </span><br><span class="line">    if (singleton == null) &#123;  </span><br><span class="line">        synchronized (Singleton.class) &#123;  </span><br><span class="line">        if (singleton == null) &#123;  </span><br><span class="line">            singleton = new Singleton();  </span><br><span class="line">        &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    return singleton;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参考资料：<a href="http://cantellow.iteye.com/blog/838473" target="_blank" rel="noopener">单例模式的七种写法</a></p><h1 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h1><p>在关系数据库中，索引是一种单独的、物理的对数据库表中一列或多列的值进行排序的一种存储结构，它是某个表中一列或若干列值的集合和相应的指向表中物理标识这些值的数据页的逻辑指针清单。索引的作用相当于图书的目录，可以根据目录中的页码快速找到所需的内容。</p><p>索引提供指向存储在表的指定列中的数据值的指针，然后根据您指定的排序顺序对这些指针排序。数据库使用索引以找到特定值，然后顺指针找到包含该值的行。这样可以使对应于表的SQL语句执行得更快，可快速访问数据库表中的特定信息。</p><p>当表中有大量记录时，若要对表进行查询，第一种搜索信息方式是全表搜索，是将所有记录一一取出，和查询条件进行一一对比，然后返回满足条件的记录，这样做会消耗大量数据库系统时间，并造成大量磁盘I/O操作；第二种就是在表中建立索引，然后在索引中找到符合查询条件的索引值，最后通过保存在索引中的ROWID（相当于页码）快速找到表中对应的记录。</p><p><a href="https://blog.csdn.net/iefreer/article/details/15815455" target="_blank" rel="noopener">索引的工作原理</a></p><h1 id="分布式架构"><a href="#分布式架构" class="headerlink" title="分布式架构"></a>分布式架构</h1><ul><li>分布式就是把一个系统或业务拆分成多个子系统或子业务，进行协同处理</li></ul><p><a href="https://blog.csdn.net/binyao02123202/article/details/32340283/" target="_blank" rel="noopener">Java分布式应用技术架构介绍</a></p><h1 id="红黑树"><a href="#红黑树" class="headerlink" title="红黑树"></a>红黑树</h1><p><a href="https://blog.csdn.net/yang_yulei/article/details/26066409" target="_blank" rel="noopener">查找/二叉查找树/2-3查找树/红黑树</a></p><ul><li>红黑树就是用红链接表示3-结点的2-3树，是对2-3查找树的改进，它能用一种统一的方式完成所有变换。</li></ul><p>红黑树背后的思想是用标准的二叉查找树（完全由2-结点构成）和一些额外的信息（替换3-结点）来表示2-3树。</p><p>我们将树中的链接分为两种类型：红链接将两个2-结点连接起来构成一个3-结点，黑链接则是2-3树中的普通链接。确切地说，我们将3-结点表示为由一条左斜的红色链接相连的两个2-结点。</p><p>这种表示法的一个优点是，我们无需修改就可以直接使用标准二叉查找树的get()方法。对于任意的2-3树，只要对结点进行转换，我们都可以立即派生出一颗对应的二叉查找树。我们将用这种方式表示2-3树的二叉查找树称为红黑树。</p><p>红黑树的另一种定义是满足下列条件的二叉查找树：</p><p>⑴红链接均为左链接。</p><p>⑵没有任何一个结点同时和两条红链接相连。</p><p>⑶该树是完美黑色平衡的，即任意空链接到根结点的路径上的黑链接数量相同。</p><h1 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h1><ul><li><p>超文本传输协议HTTP协议被用于在Web浏览器和网站服务器之间传递信息，HTTP协议以明文方式发送内容，不提供任何方式的数据加密，如果攻击者截取了Web浏览器和网站服务器之间的传输报文，就可以直接读懂其中的信息，因此，HTTP协议不适合传输一些敏感信息，比如：信用卡号、密码等支付信息。</p></li><li><p>为了解决HTTP协议的这一缺陷，需要使用另一种协议：安全套接字层超文本传输协议HTTPS，为了数据传输的安全，HTTPS在HTTP的基础上加入了SSL协议，SSL依靠证书来验证服务器的身份，并为浏览器和服务器之间的通信加密。</p></li></ul><h2 id="HTTP和HTTPS的基本概念"><a href="#HTTP和HTTPS的基本概念" class="headerlink" title="HTTP和HTTPS的基本概念"></a>HTTP和HTTPS的基本概念</h2><p><strong>HTTP</strong>：是互联网上应用最为广泛的一种网络协议，是一个客户端和服务器端请求和应答的标准（TCP），用于从WWW服务器传输超文本到本地浏览器的传输协议，它可以使浏览器更加高效，使网络传输减少。</p><p><strong>HTTPS</strong>：是以安全为目标的HTTP通道，简单讲是HTTP的安全版，即HTTP下加入SSL层，HTTPS的安全基础是SSL，因此加密的详细内容就需要SSL。</p><p>HTTPS协议的主要作用可以分为两种：一种是建立一个信息安全通道，来保证数据传输的安全；另一种就是确认网站的真实性。</p><h2 id="HTTP与HTTPS的区别"><a href="#HTTP与HTTPS的区别" class="headerlink" title="HTTP与HTTPS的区别"></a>HTTP与HTTPS的区别</h2><p>HTTP协议传输的数据都是未加密的，也就是明文的，因此使用HTTP协议传输隐私信息非常不安全，为了保证这些隐私数据能加密传输，于是网景公司设计了<strong>SSL</strong>（Secure Sockets Layer）协议用于对HTTP协议传输的数据进行加密，从而就诞生了HTTPS。简单来说，HTTPS协议是由SSL+HTTP协议构建的可进行加密传输、身份认证的网络协议，要比http协议安全。</p><p>HTTPS和HTTP的区别主要如下：</p><p>1、https协议需要到ca申请证书，一般免费证书较少，因而需要一定费用。</p><p>2、http是超文本传输协议，信息是明文传输，https则是<strong>具有安全性的ssl加密传输协议</strong>。</p><p>3、http和https使用的是完全不同的连接方式，用的端口也不一样，前者是80，后者是443。</p><p>4、http的连接很简单，是无状态的；HTTPS协议是由SSL+HTTP协议构建的可进行加密传输、身份认证的网络协议，比http协议安全。</p><h2 id="HTTPS的工作原理"><a href="#HTTPS的工作原理" class="headerlink" title="HTTPS的工作原理"></a>HTTPS的工作原理</h2><p>我们都知道HTTPS能够加密信息，以免敏感信息被第三方获取，所以很多银行网站或电子邮箱等等安全级别较高的服务都会采用HTTPS协议。</p><figure class="image-box">                <img src="http://www.mahaixiang.cn/uploads/allimg/1507/1-150H120343I41.jpg" alt="HTTPS" title class>                <p>HTTPS</p>            </figure><p>客户端在使用HTTPS方式与Web服务器通信时有以下几个步骤，如图所示。</p><p>（1）客户使用https的URL访问Web服务器，要求与Web服务器建立SSL连接。</p><p>（2）Web服务器收到客户端请求后，会将网站的证书信息（证书中包含公钥）传送一份给客户端。</p><p>（3）客户端的浏览器与Web服务器开始协商SSL连接的安全等级，也就是信息加密的等级。</p><p>（4）客户端的浏览器根据双方同意的安全等级，建立会话密钥，然后利用网站的公钥将会话密钥加密，并传送给网站。</p><p>（5）Web服务器利用自己的私钥解密出会话密钥。</p><p>（6）Web服务器利用会话密钥加密与客户端之间的通信。</p><figure class="image-box">                <img src="https://pic002.cnblogs.com/images/2012/339704/2012071410212142.gif" alt="HTTPS" title class>                <p>HTTPS</p>            </figure><h2 id="HTTPS的优点"><a href="#HTTPS的优点" class="headerlink" title="HTTPS的优点"></a>HTTPS的优点</h2><p>尽管HTTPS并非绝对安全，掌握根证书的机构、掌握加密算法的组织同样可以进行中间人形式的攻击，但HTTPS仍是现行架构下最安全的解决方案，主要有以下几个好处：</p><p>（1）使用HTTPS协议可认证用户和服务器，确保数据发送到正确的客户机和服务器；</p><p>（2）HTTPS协议是由SSL+HTTP协议构建的可进行加密传输、身份认证的网络协议，要比http协议安全，可防止数据在传输过程中不被窃取、改变，确保数据的完整性。</p><p>（3）HTTPS是现行架构下最安全的解决方案，虽然不是绝对安全，但它大幅增加了中间人攻击的成本。</p><p>（4）谷歌曾在2014年8月份调整搜索引擎算法，并称“比起同等HTTP网站，采用HTTPS加密的网站在搜索结果中的排名将会更高”。</p><h2 id="HTTPS的缺点"><a href="#HTTPS的缺点" class="headerlink" title="HTTPS的缺点"></a>HTTPS的缺点</h2><p>虽然说HTTPS有很大的优势，但其相对来说，还是存在不足之处的：</p><p>（1）HTTPS协议握手阶段比较费时，会使页面的加载时间延长近50%，增加10%到20%的耗电；</p><p>（2）HTTPS连接缓存不如HTTP高效，会增加数据开销和功耗，甚至已有的安全措施也会因此而受到影响；</p><p>（3）SSL证书需要钱，功能越强大的证书费用越高，个人网站、小网站没有必要一般不会用。</p><p>（4）SSL证书通常需要绑定IP，不能在同一IP上绑定多个域名，IPv4资源不可能支撑这个消耗。</p><p>（5）HTTPS协议的加密范围也比较有限，在黑客攻击、拒绝服务攻击、服务器劫持等方面几乎起不到什么作用。最关键的，SSL证书的信用链体系并不安全，特别是在某些国家可以控制CA根证书的情况下，中间人攻击一样可行。</p><h2 id="HTTP切换到HTTPS"><a href="#HTTP切换到HTTPS" class="headerlink" title="HTTP切换到HTTPS"></a>HTTP切换到HTTPS</h2><p>如果需要将网站从http切换到https到底该如何实现呢？</p><p>这里需要将页面中所有的链接，例如js，css，图片等等链接都由http改为https。例如：<a href="http://www.baidu.com改为https://www.baidu.com" target="_blank" rel="noopener">http://www.baidu.com改为https://www.baidu.com</a></p><p>另外，这里虽然将http切换为了https，还是建议保留http。所以我们在切换的时候可以做http和https的兼容。具体实现方式是：</p><p>去掉页面链接中的http头部，这样可以自动匹配http头和https头。</p><p>例如：将<a href="http://www.baidu.com改为//www.baidu.com。然后当用户从http的入口进入访问页面时，页面就是http，如果用户是从https的入口进入访问页面，页面即是https的。" target="_blank" rel="noopener">http://www.baidu.com改为//www.baidu.com。然后当用户从http的入口进入访问页面时，页面就是http，如果用户是从https的入口进入访问页面，页面即是https的。</a></p>]]></content>
      
      
      <categories>
          
          <category> IT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java学习笔记</title>
      <link href="/2018/08/21/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2018/08/21/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring框架概念"><a href="#Spring框架概念" class="headerlink" title="Spring框架概念"></a>Spring框架概念</h1><ul><li>Spring是一个开源容器框架，可以接管web层，业务层，dao层，持久层的组件，并且可以配置各种bean,和维护bean与bean之间的关系。其核心就是控制反转(IOC)，和面向切面(AOP)，简单的说就是一个分层的轻量级开源框架。<h2 id="控制反转-IoC-依赖注入-DI"><a href="#控制反转-IoC-依赖注入-DI" class="headerlink" title="控制反转(IoC) 依赖注入(DI)"></a>控制反转(IoC) 依赖注入(DI)</h2>依赖注入(Dependency Injection)和控制反转(Inversion of Control)是同一个概念。具体含义是:当某个角色(可能是一个Java实例，调用者)需要另一个角色(另一个Java实例，被调用者)的协助时，在传统的程序设计过程中，通常由调用者来创建被调用者的实例。但在Spring里，创建被调用者的工作不再由调用者来完成，因此称为控制反转;创建被调用者 实例的工作通常由Spring容器来完成，然后注入调用者，因此也称为依赖注入。<h2 id="面向切面-AOP"><a href="#面向切面-AOP" class="headerlink" title="面向切面(AOP)"></a>面向切面(AOP)</h2>AOP主要实现的目的是针对业务处理过程中的切面进行提取，它所面对的是处理过程中的某个步骤或阶段，以获得逻辑过程中各部分之间低耦合性的隔离效果。</li></ul><h1 id="Spring-事务机制总结"><a href="#Spring-事务机制总结" class="headerlink" title="Spring 事务机制总结"></a>Spring 事务机制总结</h1><ul><li>Spring两种事务处理机制，一是声明式事务，二是编程式事务</li></ul><h2 id="声明式事务"><a href="#声明式事务" class="headerlink" title="声明式事务"></a>声明式事务</h2><p>Spring的声明式事务管理在底层是建立在AOP的基础之上的。其本质是对方法前后进行拦截，然后在目标方法开始之前创建或者加入一个事务，在执行完目标方法之后根据执行情况提交或者回滚事务。</p><p>声明式事务最大的优点就是不需要通过编程的方式管理事务，这样就不需要在业务逻辑代码中掺杂事务管理的代码，只需在配置文件中做相关的事务规则声明（或通过等价的基于标注的方式），便可以将事务规则应用到业务逻辑中。</p><p>因为事务管理本身就是一个典型的横切逻辑，正是AOP的用武之地。Spring开发团队也意识到了这一点，为声明式事务提供了简单而强大的支持。Spring强大的声明式事务管理功能，这主要得益于Spring依赖注入容器和Spring AOP的支持。</p><p>依赖注入容器为声明式事务管理提供了基础设施，使得Bean对于Spring框架而言是可管理的；而Spring AOP则是声明式事务管理的直接实现者。</p><p>和编程式事务相比，声明式事务唯一不足地方是，后者的<strong>最细粒度</strong>只能作用到方法级别，无法做到像编程式事务那样可以作用到代码块级别。但是即便有这样的需求，也存在很多变通的方法，比如，可以将需要进行事务管理的代码块独立为方法等等。</p><ul><li>5种配置方式：<br>Spring配置文件中关于事务配置总是由三个组成部分，分别是DataSource、TransactionManager和代理机制这三部分，无论哪种配置方式，一般变化的只是代理机制这部分。</li></ul><p>DataSource、TransactionManager这两部分只是会根据数据访问方式有所变化，比如使用Hibernate进行数据访问时，DataSource实际为SessionFactory，TransactionManager的实现为HibernateTransactionManager。<br>关系图如下：<br><figure class="image-box">                <img src="http://images.blogjava.net/blogjava_net/robbie/WindowsLiveWriter/Spring_9C9C/Spring%E4%BA%8B%E5%8A%A1%E9%85%8D%E7%BD%AE%20%282%29.jpg" alt="image" title class>                <p>image</p>            </figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id=&quot;sessionFactory&quot;</span><br><span class="line">class=&quot;org.springframework.orm.hibernate3.LocalSessionFactoryBean&quot;&gt;</span><br><span class="line">&lt;property name=&quot;configLocation&quot; value=&quot;classpath:hibernate.cfg.xml&quot; /&gt;</span><br><span class="line">&lt;property name=&quot;configurationClass&quot; value=&quot;org.hibernate.cfg.AnnotationConfiguration&quot; /&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line"> </span><br><span class="line">&lt;!-- 定义事务管理器（声明式的事务） --&gt;</span><br><span class="line">&lt;bean id=&quot;transactionManager&quot; class=&quot;org.springframework.orm.hibernate3.HibernateTransactionManager&quot;&gt;</span><br><span class="line">&lt;property name=&quot;sessionFactory&quot; ref=&quot;sessionFactory&quot; /&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure><p>注意：sessionFactorty和transactionManager是下面5中配置方式的基本配置</p><h3 id="第一种方式：每个Bean都有一个代理"><a href="#第一种方式：每个Bean都有一个代理" class="headerlink" title="第一种方式：每个Bean都有一个代理"></a>第一种方式：每个Bean都有一个代理</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 配置DAO --&gt;</span><br><span class="line">&lt;bean id=&quot;userDaoTarget&quot; class=&quot;com.test.spring.dao.UserDaoImpl&quot;&gt;</span><br><span class="line">&lt;property name=&quot;sessionFactory&quot; ref=&quot;sessionFactory&quot; /&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line"> </span><br><span class="line">&lt;bean id=&quot;userDao&quot; class=&quot;org.springframework.transaction.interceptor.TransactionProxyFactoryBean&quot;&gt;</span><br><span class="line">&lt;!-- 配置事务管理器 --&gt;</span><br><span class="line">&lt;property name=&quot;transactionManager&quot; ref=&quot;transactionManager&quot; /&gt;</span><br><span class="line">&lt;property name=&quot;target&quot; ref=&quot;userDaoTarget&quot; /&gt;</span><br><span class="line">&lt;property name=&quot;proxyInterfaces&quot; value=&quot;com.test.spring.dao.GeneratorDao&quot; /&gt;</span><br><span class="line">&lt;!-- 配置事务属性 --&gt;</span><br><span class="line">&lt;property name=&quot;transactionAttributes&quot;&gt;</span><br><span class="line">&lt;props&gt;</span><br><span class="line">&lt;prop key=&quot;*&quot;&gt;PROPAGATION_REQUIRED&lt;/prop&gt;</span><br><span class="line">&lt;/props&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure><h3 id="第二种方式：所有Bean共享一个代理基类"><a href="#第二种方式：所有Bean共享一个代理基类" class="headerlink" title="第二种方式：所有Bean共享一个代理基类"></a>第二种方式：所有Bean共享一个代理基类</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id=&quot;transactionBase&quot; class=&quot;org.springframework.transaction.interceptor.TransactionProxyFactoryBean&quot; lazy-init=&quot;true&quot; abstract=&quot;true&quot;&gt;</span><br><span class="line">&lt;!-- 配置事务管理器 --&gt;</span><br><span class="line">&lt;property name=&quot;transactionManager&quot; ref=&quot;transactionManager&quot; /&gt;</span><br><span class="line">&lt;!-- 配置事务属性 --&gt;</span><br><span class="line">&lt;property name=&quot;transactionAttributes&quot;&gt;</span><br><span class="line">&lt;props&gt;</span><br><span class="line">&lt;prop key=&quot;*&quot;&gt;PROPAGATION_REQUIRED&lt;/prop&gt;</span><br><span class="line">&lt;/props&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line"> </span><br><span class="line">&lt;!-- 配置DAO --&gt;</span><br><span class="line">&lt;bean id=&quot;userDaoTarget&quot; class=&quot;com.test.spring.dao.UserDaoImpl&quot;&gt;</span><br><span class="line">&lt;property name=&quot;sessionFactory&quot; ref=&quot;sessionFactory&quot; /&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line"> </span><br><span class="line">&lt;bean id=&quot;userDao&quot; parent=&quot;transactionBase&quot;&gt;</span><br><span class="line">&lt;property name=&quot;target&quot; ref=&quot;userDaoTarget&quot; /&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure><h3 id="第三种方式：使用拦截器"><a href="#第三种方式：使用拦截器" class="headerlink" title="第三种方式：使用拦截器"></a>第三种方式：使用拦截器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id=&quot;transactionInterceptor&quot; class=&quot;org.springframework.transaction.interceptor.TransactionInterceptor&quot;&gt;</span><br><span class="line">&lt;property name=&quot;transactionManager&quot; ref=&quot;transactionManager&quot; /&gt;</span><br><span class="line">&lt;!-- 配置事务属性 --&gt;</span><br><span class="line">&lt;property name=&quot;transactionAttributes&quot;&gt;</span><br><span class="line">&lt;props&gt;</span><br><span class="line">&lt;prop key=&quot;*&quot;&gt;PROPAGATION_REQUIRED&lt;/prop&gt;</span><br><span class="line">&lt;/props&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line"> </span><br><span class="line">&lt;bean class=&quot;org.springframework.aop.framework.autoproxy.BeanNameAutoProxyCreator&quot;&gt;</span><br><span class="line">&lt;property name=&quot;beanNames&quot;&gt;</span><br><span class="line">&lt;list&gt;</span><br><span class="line">&lt;value&gt;*Dao&lt;/value&gt;</span><br><span class="line">&lt;/list&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property name=&quot;interceptorNames&quot;&gt;</span><br><span class="line">&lt;list&gt;</span><br><span class="line">&lt;value&gt;transactionInterceptor&lt;/value&gt;</span><br><span class="line">&lt;/list&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line"> </span><br><span class="line">&lt;!-- 配置DAO --&gt;</span><br><span class="line">&lt;bean id=&quot;userDao&quot; class=&quot;com.test.spring.dao.UserDaoImpl&quot;&gt;</span><br><span class="line">&lt;property name=&quot;sessionFactory&quot; ref=&quot;sessionFactory&quot; /&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure><h3 id="第四种方式：使用tx标签配置的拦截器"><a href="#第四种方式：使用tx标签配置的拦截器" class="headerlink" title="第四种方式：使用tx标签配置的拦截器"></a>第四种方式：使用tx标签配置的拦截器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;tx:advice id=&quot;txAdvice&quot; transaction-manager=&quot;transactionManager&quot;&gt;</span><br><span class="line">&lt;tx:attributes&gt;</span><br><span class="line">&lt;tx:method name=&quot;*&quot; propagation=&quot;REQUIRED&quot; /&gt;</span><br><span class="line">&lt;/tx:attributes&gt;</span><br><span class="line">&lt;/tx:advice&gt;</span><br><span class="line"> </span><br><span class="line">&lt;aop:config&gt;</span><br><span class="line">&lt;aop:pointcut id=&quot;interceptorPointCuts&quot;</span><br><span class="line">expression=&quot;execution(* com.test.spring.dao.*.*(..))&quot; /&gt;</span><br><span class="line">&lt;aop:advisor advice-ref=&quot;txAdvice&quot; pointcut-ref=&quot;interceptorPointCuts&quot; /&gt;</span><br><span class="line">&lt;/aop:config&gt;</span><br></pre></td></tr></table></figure><h3 id="第五种方式：全注解"><a href="#第五种方式：全注解" class="headerlink" title="第五种方式：全注解"></a>第五种方式：全注解</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public class test &#123;</span><br><span class="line">@Transactional</span><br><span class="line">public class UserDaoImpl extends HibernateDaoSupport implements UserDao &#123;</span><br><span class="line"> </span><br><span class="line">public List&lt;User&gt; listUsers() &#123;</span><br><span class="line">return null</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="编程式事务"><a href="#编程式事务" class="headerlink" title="编程式事务"></a>编程式事务</h2><p>Spring的编程式事务即在代码中使用编程的方式进行事务处理，可以做到比声明式事务更细粒度。有两种方式一是使用TransactionManager，另外就是TransactionTemplate。</p><h3 id="TransactionManager使用方式"><a href="#TransactionManager使用方式" class="headerlink" title="TransactionManager使用方式"></a>TransactionManager使用方式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">public class UserDaoImpl extends HibernateDaoSupport implements UserDao &#123;</span><br><span class="line">private HibernateTransactionManager transactionManager;</span><br><span class="line">private DefaultTransactionDefinition def;</span><br><span class="line"> </span><br><span class="line">public HibernateTransactionManager getTransactionManager() &#123;</span><br><span class="line">return transactionManager;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">public void setTransactionManager(HibernateTransactionManager transactionManager) &#123;</span><br><span class="line">this.transactionManager = transactionManager;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">public void createTransactionDefinition() &#123;</span><br><span class="line">def = new DefaultTransactionDefinition();</span><br><span class="line">def.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRED);</span><br><span class="line">def.setIsolationLevel(TransactionDefinition.ISOLATION_READ_COMMITTED);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">public void saveOrUpdate(User user) &#123;</span><br><span class="line">TransactionStatus status = transactionManager.getTransaction(def);</span><br><span class="line">try &#123;</span><br><span class="line">this.getHibernateTemplate().saveOrUpdate(user);</span><br><span class="line">&#125; catch (DataAccessException ex) &#123;</span><br><span class="line">transactionManager.rollback(status);</span><br><span class="line">throw ex;</span><br><span class="line">&#125;</span><br><span class="line">transactionManager.commit(status);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="TransactionTemplate方式"><a href="#TransactionTemplate方式" class="headerlink" title="TransactionTemplate方式"></a>TransactionTemplate方式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">ResultDto ret = null;</span><br><span class="line">ret = (ResultDto) this.transactionTemplate.execute(new TransactionCallback() &#123;</span><br><span class="line">@Override</span><br><span class="line">public Object doInTransaction(TransactionStatus status) &#123;</span><br><span class="line">ResultDto ret = null;</span><br><span class="line">try &#123;</span><br><span class="line">drillTaskDao.deleteByKey(taskid);</span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line">logger.error(&quot;delDrillTask:&quot; + e.getMessage(), e);</span><br><span class="line">ret = ResultBuilder.buildResult(ResultBuilder.FAIL_CODE, null, ErrorCode.COM_DBDELETEERROR);</span><br><span class="line">return ret;</span><br><span class="line">&#125;</span><br><span class="line">finally &#123;</span><br><span class="line">status.setRollbackOnly();</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">ret = cleartaskrelativedata(taskid, appid, true);</span><br><span class="line">return ret;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">return ret;</span><br></pre></td></tr></table></figure><h1 id="同步与异步"><a href="#同步与异步" class="headerlink" title="同步与异步"></a>同步与异步</h1><h2 id="java线程-同步与异步"><a href="#java线程-同步与异步" class="headerlink" title="java线程 同步与异步"></a>java线程 同步与异步</h2><p>多线程并发时，多个线程同时请求同一个资源，必然导致此资源的数据不安全，A线程修改了B线程的处理的数据，而B线程又修改了A线程处理的数理。显然这是由于全局资源造成的，有时为了解决此问题，优先考虑使用局部变量，退而求其次使用同步代码块，出于这样的安全考虑就必须牺牲系统处理性能，加在多线程并发时资源挣夺最激烈的地方，这就实现了线程的同步机制。</p><h3 id="同步："><a href="#同步：" class="headerlink" title="同步："></a>同步：</h3><p>A线程要请求某个资源，但是此资源正在被B线程使用中，因为同步机制存在，A线程请求不到，怎么办，A线程只能等待下去；</p><h3 id="异步："><a href="#异步：" class="headerlink" title="异步："></a>异步：</h3><p>A线程要请求某个资源，但是此资源正在被B线程使用中，因为没有同步机制存在，A线程<br>仍然请求的到，A线程无需等待；</p><p>显然，同步最最安全，最保险的。而异步不安全，容易导致死锁，这样一个线程死掉就会导致整个进程崩溃，但没有同步机制的存在，性能会有所提升。</p><p>java中实现多线程</p><blockquote><p>1）继承Thread,重写里面的run方法</p></blockquote><blockquote><p>2）实现runnable接口<br>比较推荐后者，第一，java没有单继承的限制；第二，还可以隔离代码。</p></blockquote><h3 id="Q-amp-A"><a href="#Q-amp-A" class="headerlink" title="Q&amp;A"></a>Q&amp;A</h3><h4 id="1、-什么时候必须同步？什么叫同步？如何同步？"><a href="#1、-什么时候必须同步？什么叫同步？如何同步？" class="headerlink" title="1、 什么时候必须同步？什么叫同步？如何同步？"></a>1、 什么时候必须同步？什么叫同步？如何同步？</h4><p>要跨线程维护正确的可见性，只要在几个线程之间共享非 final变量，就必须使用synchronized（或 volatile）以确保一个线程可以看见另一个线程做的更改。为了在线程之间进行可靠的通信，也为了互斥访问，同步是必须的。这归因于java语言规范的内存模型，它规定了：一个线程所做的变化何时以及如何变成对其它线程可见。因为多线程将异步行为引进程序，所以在需要同步时，必须有一种方法强制进行。例如：如果2个线程想要通信并且要共享一个复杂的数据结构，如链表，此时需要确保它们互不冲突，也就是必须阻止B线程在A线程读数据的过程中向链表里面写数据（A获得了锁，B必须等A释放了该锁）。为了达到这个目的，java在一个旧的的进程同步模型——监控器（Monitor）的基础上实现了一个巧妙的方案：监控器是一个控制机制，可以认为是一个很小的、只能容纳一个线程的盒子，一旦一个线程进入监控器，其它的线程必须等待，直到那个线程退出监控为止。通过这种方式，一个监控器可以保证共享资源在同一时刻只可被一个线程使用。这种方式称之为同步。（一旦一个线程进入一个实例的任何同步方法，别的线程将不能进入该同一实例的其它同步方法，但是该实例的非同步方法仍然能够被调用）。</p><ul><li>错误的理解：同步嘛，就是几个线程可以同时进行访问。</li></ul><p>同步和多线程关系：没多线程环境就不需要同步;有多线程环境也不一定需要同步。<br>锁提供了两种主要特性：<strong>互斥</strong>（mutual exclusion）和<strong>可见性</strong>（visibility）。<br>互斥即一次只允许一个线程持有某个特定的锁，因此可使用该特性实现对共享数据的协调访问协议，这样，一次就只有一个线程能够使用该共享数据。<br>可见性要更加复杂一些，它必须确保释放锁之前对共享数据做出的更改对于随后获得该锁的另一个线程是可见的——如果没有同步机制提供的这种可见性保证，线程看到的共享变量可能是修改前的值或不一致的值，这将引发许多严重问题</p><ul><li>小结：为了防止多个线程并发对同一数据的修改，所以需要同步，否则会造成数据不一致（就是所谓的：线程安全。如java集合框架中Hashtable和Vector是线程安全的。我们的大部分程序都不是线程安全的，因为没有进行同步，而且我们没有必要，因为大部分情况根本没有多线程环境）。</li></ul><h4 id="2、什么叫原子的（原子操作）？"><a href="#2、什么叫原子的（原子操作）？" class="headerlink" title="2、什么叫原子的（原子操作）？"></a>2、什么叫原子的（原子操作）？</h4><p>Java原子操作是指：不会被打断的操作。</p><p>（就是做到互斥和可见性？）</p><p>那难道原子操作就可以真的达到线程安全同步效果了吗？实际上有一些原子操作不一定是线程安全的。<br>那么，原子操作在什么情况下不是线程安全的呢？也许是这个原因导致的：java线程允许线程在自己的内存区保存变量的副本。允许线程使用本地的私有拷贝进行工作而非每次都使用主存的值是为了提高性能（虽然原子操作是线程安全的，可各线程在得到变量（读操作）后，就是各自玩弄自己的副本了，更新操作（写操作）因未写入主存中，导致其它线程不可见）。</p><p>那该如何解决呢？因此需要通过java同步机制。</p><p>在java中，32位或者更少位数的赋值是原子的。在一个32位的硬件平台上，除了double和long型的其它原始类型通常都是使用32位进行表示，而double和long通常使用64位表示。另外，对象引用使用本机指针实现，通常也是32位的。对这些32位的类型的操作是原子的。</p><p>这些原始类型通常使用32位或者64位表示，这又引入了另一个小小的神话：原始类型的大小是由语言保证的。这是不对的。java语言保证的是原始类型的表数范围而非JVM中的存储大小。因此，int型总是有相同的表数范围。在一个JVM上可能使用32位实现，而在另一个JVM上可能是64位的。在此再次强调：在所有平台上被保证的是表数范围，32位以及更小的值的操作是原子的。</p><h4 id="3、不要搞混了：同步、异步"><a href="#3、不要搞混了：同步、异步" class="headerlink" title="3、不要搞混了：同步、异步"></a>3、不要搞混了：同步、异步</h4><p>举个例子：普通B/S模式（同步）AJAX技术（异步）</p><ul><li>同步：提交请求-&gt;等待服务器处理-&gt;处理完返回这个期间客户端浏览器不能干任何事</li><li>异步：请求通过事件触发-&gt;服务器处理（这是浏览器仍然可以作其他事情）-&gt;处理完毕</li></ul><p>可见，彼“同步”非此“同步”——我们说的java中的那个共享数据同步（synchronized）</p><p>一个同步的对象是指行为（动作），一个是同步的对象是指物质（共享数据）。</p><h4 id="4、Java同步机制有4种实现方式："><a href="#4、Java同步机制有4种实现方式：" class="headerlink" title="4、Java同步机制有4种实现方式："></a>4、Java同步机制有4种实现方式：</h4><p>① ThreadLocal ② synchronized( ) ③ wait() 与 notify() ④ volatile</p><p>目的：都是为了解决多线程中的对同一变量的访问冲突</p><h5 id="ThreadLocal"><a href="#ThreadLocal" class="headerlink" title="ThreadLocal"></a>ThreadLocal</h5><p>ThreadLocal 保证不同线程拥有不同实例，相同线程一定拥有相同的实例，即为每一个使用该变量的线程提供一个该变量值的副本，每一个线程都可以独立改变自己的副本，而不是与其它线程的副本冲突。</p><ul><li>优势：提供了线程安全的共享对象</li></ul><p>与其它同步机制的区别：同步机制是为了同步多个线程对相同资源的并发访问，是为了多个线程之间进行通信；</p><p>而 ThreadLocal是隔离多个线程的数据共享，从根本上就不在多个线程之间共享资源，这样当然不需要多个线程进行同步了。</p><h5 id="volatile"><a href="#volatile" class="headerlink" title="volatile"></a>volatile</h5><p>volatile 修饰的成员变量在每次被线程访问时，都强迫从共享内存中重读该成员变量的值。</p><p>而且，当成员变量发生变化时，强迫线程将变化值回写到共享内存。</p><p>优势：这样在任何时刻，两个不同的线程总是看到某个成员变量的同一个值。</p><p>缘由：Java 语言规范中指出，为了获得最佳速度，允许线程保存共享成员变量的私有拷贝，而且只当线程进入或者离开同步代码块时才与共享成员变量的原始值对比。这样当多个线程同时与某个对象交互时，就必须要注意到要让线程及时的得到共享成员变量的变化。而 volatile关键字就是提示VM：对于这个成员变量不能保存它的私有拷贝，而应直接与共享成员变量交互。</p><p>使用技巧：在两个或者更多的线程访问的成员变量上使用 volatile 。当要访问的变量已在synchronized 代码块中，或者为常量时，不必使用。</p><p>线程为了提高效率，将某成员变量(如A)拷贝了一份（如B），线程中对A的访问其实访问的是B。只在某些动作时才进行A和B的同步，因此存在A和B不一致的情况。volatile就是用来避免这种情况的volatile告诉jvm，它所修饰的变量不保留拷贝，直接访问主内存中的（读操作多时使用较好；线程间需要通信，本条做不到）</p><p>Volatile 变量具有synchronized的可见性特性，但是不具备原子特性。这就是说线程能够自动发现 volatile 变量的最新值。Volatile变量可用于提供线程安全，但是只能应用于非常有限的一组用例：多个变量之间或者某个变量的当前值与修改后值之间没有约束。只能在有限的一些情形下使用 volatile 变量替代锁。要使volatile变量提供理想的线程安全，必须同时满足下面两个条件：</p><blockquote><p>对变量的写操作不依赖于当前值；</p></blockquote><blockquote><p>该变量没有包含在具有其他变量的不变式中。</p></blockquote><h5 id="sleep-vs-wait"><a href="#sleep-vs-wait" class="headerlink" title="sleep() vs wait()"></a>sleep() vs wait()</h5><p>sleep是线程类（Thread）的方法，导致此线程暂停执行指定时间，把执行机会给其他线程，但是监控状态依然保持，到时后会自动恢复。调用sleep不会释放对象锁。</p><p>wait是Object类的方法，对此对象调用wait方法导致本线程放弃对象锁，进入等待此对象的等待锁定池，只有针对此对象发出notify方法（或notifyAll）后本线程才进入对象锁定池准备获得对象锁进入运行状态。</p><p>（如果变量被声明为volatile，在每次访问时都会和主存一致；如果变量在同步方法或者同步块中被访问，当在方法或者块的入口处获得锁以及方法或者块退出时释放锁时变量被同步。）</p><h1 id="Mybatis"><a href="#Mybatis" class="headerlink" title="Mybatis"></a>Mybatis</h1><h2 id="jdbc"><a href="#jdbc" class="headerlink" title="jdbc"></a>jdbc</h2><h3 id="jdbc编程步骤："><a href="#jdbc编程步骤：" class="headerlink" title="jdbc编程步骤："></a>jdbc编程步骤：</h3><p>1、加载数据库驱动</p><p>2、创建并获取数据库链接</p><p>3、创建jdbc statement对象</p><p>4、设置sql语句</p><p>5、设置sql语句中的参数(使用preparedStatement)</p><p>6、通过statement执行sql并获取结果</p><p>7、对sql执行结果进行解析处理</p><p>8、释放资源(resultSet、preparedstatement、connection)</p><h3 id="jdbc问题总结如下："><a href="#jdbc问题总结如下：" class="headerlink" title="jdbc问题总结如下："></a>jdbc问题总结如下：</h3><p>1、数据库链接创建、释放频繁造成系统资源浪费从而影响系统性能，如果使用数据库链接池可解决此问题。</p><p>2、Sql语句在代码中硬编码，造成代码不易维护，实际应用sql变化的可能较大，sql变动需要改变java代码。</p><p>3、使用preparedStatement向占有位符号传参数存在硬编码，因为sql语句的where条件不一定，可能多也可能少，修改sql还要修改代码，系统不易维护。</p><p>4、对结果集解析存在硬编码（查询列名），sql变化导致解析代码变化，系统不易维护，如果能将数据库记录封装成pojo对象解析比较方便。</p><h2 id="Mybatis介绍"><a href="#Mybatis介绍" class="headerlink" title="Mybatis介绍"></a>Mybatis介绍</h2><p>MyBatis 本是apache的一个开源项目iBatis,2010年这个项目由apache software foundation迁移到了google code，并且改名为MyBatis，实质上Mybatis对ibatis进行一些改进。</p><p>MyBatis是一个优秀的持久层框架，它对jdbc的操作数据库的过程进行封装，使开发者只需要关注 SQL 本身，而不需要花费精力去处理例如注册驱动、创建connection、创建statement、手动设置参数、结果集检索等jdbc繁杂的过程代码。</p><p>Mybatis通过xml或注解的方式将要执行的各种statement（statement、preparedStatemnt、CallableStatement）配置起来，并通过java对象和statement中的sql进行映射生成最终执行的sql语句，最后由mybatis框架执行sql并将结果映射成java对象并返回。</p><h3 id="Mybatis架构"><a href="#Mybatis架构" class="headerlink" title="Mybatis架构"></a>Mybatis架构</h3><p>1、mybatis配置SqlMapConfig.xml，此文件作为mybatis的全局配置文件，配置了mybatis的运行环境等信息。</p><p>mapper.xml文件即sql映射文件，文件中配置了操作数据库的sql语句。此文件需要在SqlMapConfig.xml中加载。</p><p>2、通过mybatis环境等配置信息构造SqlSessionFactory即会话工厂</p><p>3、由会话工厂创建sqlSession即会话，操作数据库需要通过sqlSession进行。</p><p>4、mybatis底层自定义了Executor执行器接口操作数据库，Executor接口有两个实现，一个是基本执行器、一个是缓存执行器。</p><p>5、Mapped Statement也是mybatis一个底层封装对象，它包装了mybatis配置信息及sql映射信息等。mapper.xml文件中一个sql对应一Mapped Statement对象，sql的id即是Mapped statement的id。</p><p>6、Mapped Statement对sql执行输入参数进行定义，包括HashMap、基本类型、pojo，Executor通过Mapped Statement在执行sql前将输入的java对象映射至sql中，输入参数映射就是jdbc编程中对preparedStatement设置参数。</p><p>7、Mapped Statement对sql执行输出结果进行定义，包括HashMap、基本类型、pojo，Executor通过Mapped Statement在执行sql后将输出结果映射至java对象中，输出结果映射过程相当于jdbc编程中对结果的解析处理过程。</p><h3 id="Mybatis下载"><a href="#Mybatis下载" class="headerlink" title="Mybatis下载"></a>Mybatis下载</h3><p>mybaits的代码由github.com管理，地址：<a href="https://github.com/mybatis/mybatis-3/releases" target="_blank" rel="noopener">https://github.com/mybatis/mybatis-3/releases</a></p><p>mybatis-3.2.7.jar—-mybatis的核心包<br>lib—-mybatis的依赖包</p><p>mybatis-3.2.7.pdf—-mybatis使用手册<br>HashMap实现原理分析</p><h1 id="HashMap的数据结构"><a href="#HashMap的数据结构" class="headerlink" title="HashMap的数据结构"></a>HashMap的数据结构</h1><p>数据结构中有数组和链表来实现对数据的存储，但这两者基本上是两个极端。</p><h2 id="常见数据结构"><a href="#常见数据结构" class="headerlink" title="常见数据结构"></a>常见数据结构</h2><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><p>数组存储区间是连续的，占用内存严重，故空间复杂的很大。但数组的二分查找时间复杂度小，为O(1)；</p><p>数组的特点是：寻址容易，插入和删除困难；</p><h2 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h2><p>链表存储区间离散，占用内存比较宽松，故空间复杂度很小，但时间复杂度很大，达O(N)。</p><p>链表的特点是：寻址困难，插入和删除容易。</p><h2 id="哈希表"><a href="#哈希表" class="headerlink" title="哈希表"></a>哈希表</h2><p>那么我们能不能综合两者的特性，做出一种寻址容易，插入删除也容易的数据结构？答案是肯定的，这就是我们要提起的哈希表。</p><p>哈希表（(Hashtable）既满足了数据的查找方便，同时不占用太多的内容空间，使用也十分方便。</p><p>哈希表是由数组+链表组成的，一个长度为16的数组中，每个元素存储的是一个链表的头结点。那么这些元素是按照什么样的规则存储到数组中呢。一般情况是通过hash(key)%len获得，也就是元素的key的哈希值对数组长度取模得到。比如上述哈希表中，12%16=12,28%16=12,108%16=12,140%16=12。所以12、28、108以及140都存储在数组下标为12的位置。</p><p>HashMap其实也是一个线性的数组实现的,所以可以理解为其存储数据的容器就是一个线性数组。这可能让我们很不解，一个线性的数组怎么实现按键值对来存取数据呢？这里HashMap有做一些处理。</p><p>HashMap里面实现一个静态内部类Entry，其重要的属性有key,value,next，从属性key,value我们就能很明显的看出来Entry就是HashMap键值对实现的一个基础bean，我们上面说到HashMap的基础就是一个线性数组，这个数组就是Entry[]，Map里面的内容都保存在Entry[]里面。</p><h1 id="REST"><a href="#REST" class="headerlink" title="REST"></a>REST</h1><ul><li>REST– REpresentational State Transfer，英语的直译就是“表现层状态转移”。如果看这个概念，估计没几个人能明白是什么意思。那下面就让我来用一句人话解释一下什么是RESTful:URL定位资源，用HTTP动词（GET,POST,PUT,DELETE)描述操作。</li></ul><p><strong>Resource</strong>：资源，即数据。<br>Representational：某种表现形式，比如用JSON，XML，JPEG等；<br><strong>State Transfer</strong>：状态变化。通过HTTP动词实现。</p><p>所以RESTful API就是REST风格的API。那么在什么场景下使用RESTful API呢？</p><p>在当今的互联网应用的前端展示媒介很丰富。有手机、有平板电脑还有PC以及其他的展示媒介。那么这些前端接收到的用户请求统一由一个后台来处理并返回给不同的前端肯定是最科学和最经济的方式，RESTful API就是一套协议来规范多种形式的前端和同一个后台的交互方式。</p><h2 id="RESTful-API设计原则和规范"><a href="#RESTful-API设计原则和规范" class="headerlink" title="RESTful API设计原则和规范"></a>RESTful API设计原则和规范</h2><p>RESTful API由后台也就是SERVER来提供前端来调用。前端调用API向后台发起HTTP请求，后台响应请求将处理结果反馈给前端。也就是说RESTful 是典型的基于HTTP的协议。那么RESTful API有哪些设计原则和规范呢？</p><h3 id="1，资源"><a href="#1，资源" class="headerlink" title="1，资源"></a>1，资源</h3><p>首先是弄清楚资源的概念。资源就是网络上的一个实体，一段文本，一张图片或者一首歌曲。资源总是要通过一种载体来反应它的内容。文本可以用TXT，也可以用HTML或者XML、图片可以用JPG格式或者PNG格式，JSON是现在最常用的资源表现形式。</p><h3 id="2，统一接口"><a href="#2，统一接口" class="headerlink" title="2，统一接口"></a>2，统一接口</h3><p>RESTful风格的数据元操CRUD（create,read,update,delete）分别对应HTTP方法：GET用来获取资源，POST用来新建资源（也可以用于更新资源），PUT用来更新资源，DELETE用来删除资源，这样就统一了数据操作的接口。</p><h3 id="3，URI"><a href="#3，URI" class="headerlink" title="3，URI"></a>3，URI</h3><p>可以用一个URI（统一资源定位符）指向资源，即每个URI都对应一个特定的资源。要获取这个资源访问它的URI就可以，因此URI就成了每一个资源的地址或识别符。一般的，每个资源至少有一个URI与之对应，最典型的URI就是URL。</p><h3 id="4，无状态"><a href="#4，无状态" class="headerlink" title="4，无状态"></a>4，无状态</h3><p>所谓无状态即所有的资源都可以URI定位，而且这个定位与其他资源无关，也不会因为其他资源的变化而变化。</p><p>有状态和无状态的区别，举个例子说明一下，例如要查询员工工资的步骤为：</p><blockquote><p>第一步：登录系统。</p></blockquote><blockquote><p>第二步：进入查询工资的页面。</p></blockquote><blockquote><p>第三步：搜索该员工。</p></blockquote><blockquote><p>第四步：点击姓名查看工资。</p></blockquote><p>这样的操作流程就是有状态的，查询工资的每一个步骤都依赖于前一个步骤，只要前置操作不成功，后续操作就无法执行。</p><p>如果输入一个URL就可以得到指定员工的工资，则这种情况就是无状态的，因为获取工资不依赖于其他资源或状态，且这种情况下，员工工资是一个资源，由一个URL与之对应可以通过HTTP中的GET方法得到资源，这就是典型的RESTful风格。</p><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>说了这么多，到底RESTful长什么样子的呢？<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET:http://www.xxx.com/source/id</span><br></pre></td></tr></table></figure></p><p> 获取指定ID的某一类资源。例如GET:<a href="http://www.xxx.com/friends/123表示获取ID为123的会员的好友列表。如果不加id就表示获取所有会员的好友列表。" target="_blank" rel="noopener">http://www.xxx.com/friends/123表示获取ID为123的会员的好友列表。如果不加id就表示获取所有会员的好友列表。</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">POST:http://www.xxx.com/friends/123</span><br></pre></td></tr></table></figure><p>表示为指定ID为123的会员新增好友。其他的操作类似就不举例了。</p><h2 id="其他规范"><a href="#其他规范" class="headerlink" title="其他规范"></a>其他规范</h2><p>RESTful API还有其他一些规范。</p><p>1：应该将API的版本号放入URL。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET:http://www.xxx.com/v1/friend/123。</span><br></pre></td></tr></table></figure><p>或者将版本号放在HTTP头信息中。我个人觉得要不要版本号取决于自己开发团队的习惯和业务的需要，不是强制的。</p><p>2：URL中只能有名词而不能有动词，操作的表达是使用HTTP的动词GET,POST,PUT,DELETEL。URL只标识资源的地址，既然是资源那就是名词了。</p><p>3：如果记录数量很多，服务器不可能都将它们返回给用户。API应该提供参数，过滤返回结果。?limit=10：指定返回记录的数量、?page=2&amp;per_page=100：指定第几页，以及每页的记录数。</p>]]></content>
      
      
      <categories>
          
          <category> IT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>游戏中的经典AI设计：MOBA英雄AI设计分享</title>
      <link href="/2018/07/23/%E6%B8%B8%E6%88%8F%E4%B8%AD%E7%9A%84%E7%BB%8F%E5%85%B8AI%E8%AE%BE%E8%AE%A1%EF%BC%9AMOBA%E8%8B%B1%E9%9B%84AI%E8%AE%BE%E8%AE%A1%E5%88%86%E4%BA%AB/"/>
      <url>/2018/07/23/%E6%B8%B8%E6%88%8F%E4%B8%AD%E7%9A%84%E7%BB%8F%E5%85%B8AI%E8%AE%BE%E8%AE%A1%EF%BC%9AMOBA%E8%8B%B1%E9%9B%84AI%E8%AE%BE%E8%AE%A1%E5%88%86%E4%BA%AB/</url>
      
        <content type="html"><![CDATA[<h1 id="设计概要"><a href="#设计概要" class="headerlink" title="设计概要"></a>设计概要</h1><h2 id="设计原则和目的"><a href="#设计原则和目的" class="headerlink" title="设计原则和目的"></a>设计原则和目的</h2><p>英雄AI的目的主要有：</p><blockquote><p>1.新手过渡局，让玩家刚进入到游戏时，和较弱电脑对战，培养成就感，避免尚未熟悉游戏导致的挫折流失。</p></blockquote><blockquote><p>2.人机对战，给玩家练习新英雄或者挑战高难度电脑的机会。</p></blockquote><blockquote><p>3.温暖局，对连败玩家，匹配机器人去补偿一场胜利，舒缓连败挫折。</p></blockquote><blockquote><p>4.掉线托管，用强度合理的AI来补位掉线玩家，减少其他在线玩家的掉线局有损体验。</p></blockquote><p>英雄AI的设计原则是：<strong>优秀的AI并不要求是尽量的和人表现一致，也不是多么的精准和无懈可击，而是能够和玩家进行很好的交互，提升游戏体验。</strong></p><h2 id="设计思路"><a href="#设计思路" class="headerlink" title="设计思路"></a>设计思路</h2><p>我们的AI实现分为四个阶段，正好类似于玩家的成长。</p><ul><li><p><strong>第一阶段</strong>是基本战术AI，主要包括：混线，买装备，逃避危险，回城，补兵。是一种单兵作战AI。模仿新手玩家的刚刚开始学习操作。</p></li><li><p><strong>第二阶段</strong>是增加一些事件响应用来控制英雄的走位和换线，包括敌塔下撤退，救援己方塔，包括抱团。模仿玩家已经开始渐渐了解塔的属性，初步开始与其他玩家合作。</p></li><li><p><strong>第三阶段</strong>是协同战术AI，该AI周期性的判断是否应该果断出击打出一波局部进攻。它会在比较短的时间内控制局部范围内的单位一起行动，会有走位，配合使用技能等较细致的行为，是一种小团队AI。模仿玩家已经开始熟悉所有英雄，微操提升，对Gank略有心得。</p></li><li><p><strong>第四阶段</strong>是战略AI，整体协调全部玩家在地图上的分布，野区，兵线。模仿玩家已经有较强的团队意识，会分工和配合了。</p></li></ul><h1 id="名词解释"><a href="#名词解释" class="headerlink" title="名词解释"></a>名词解释</h1><ul><li><p>1．<strong>单体战术AI</strong>：每个英雄都会配备自己独特的战术AI，此AI将实现战斗细节，比如英雄何时该释放技能，对谁释放;如何走位规避风险或者形成Gank优势站位;怎么补兵;购买贩卖何种道具;何时追击何时逃跑等等。</p></li><li><p>2．<strong>全局AI</strong>：全局AI是一种综合考虑场上所有战斗因素之后对单体发布指令的控制器。全局AI所关注的事情主要有：兵线英雄的分布，Gank发动时机，逃避危险，救援建筑。全局AI是通过给单位添加指令buff和修改单体战术AI的参数来实现的。</p></li><li><p>3． <strong>AI参数</strong>：我们将尽可能的暴露出AI的各种行为参数，并通过AI参数来控制电脑的AI难度强度。高难度AI，意味着它优先使用较高收益的战略。而低难度AI则可以选择比较低收益的战略。我们的不同难度AI是通过修改AI的一系列参数来实现的。</p></li><li><p>4．<strong>行为树</strong>：树形结构的行为流程处理，每个Tick到来时，行为树按照一定的规则进行搜索和执行相应节点，直到到达某个返回true的叶节点，之后结束当前Tick。</p></li><li><p>5． <strong>Gank 小组</strong>：Gank小组是一个动态的局部的概念，当我方英雄A周边有敌对英雄时，英雄A就是属于某个Gank小组的，Gank小组的其他成员必须和A距离很近。</p></li><li><p>6． <strong>Gank 行为</strong>：Gank行为是一种对集体行为的模仿，其本质仍然是单体AI，但Gank发动时机是通过全局AI来控制的。处于Gank状态的机器人会表现出与单体行动很不一样的行为，比如坦克可能宁死也不撤退，ADC优先释放控制技能。</p></li></ul><h1 id="行为树实现"><a href="#行为树实现" class="headerlink" title="行为树实现"></a>行为树实现</h1><h2 id="行为树脑图"><a href="#行为树脑图" class="headerlink" title="行为树脑图"></a>行为树脑图</h2><p>行为树脑图是一个多叉树，各个父节点的所有子节点节点按照从左到右、从上到下的顺序逐个检测，只要返回True了，之下的节点都不再执行。灰色注释为节点执行的先决条件，灰色节点不满足则直接返回False。脑图中的</p><p>对应着行为树中的Selector节点。</p><p>行为树工具基本思想都一致，但使用起来还是有较大差别的。常见的是Unity3D的BehaviorDesigner插件，虚幻4自带的行为树组件，公司内部的Behaviac。我最喜欢的是BehaviorDesigner，学习时还是推荐Behaviac，传送门：<a href="http://www.behaviac.com/language/zh/%E9%A6%96%E9%A1%B5/" target="_blank" rel="noopener">http://www.behaviac.com/language/zh/%E9%A6%96%E9%A1%B5/</a></p><p>原因比较简单，只有它是中文。</p><figure class="image-box">                <img src="https://github.com/CGNz/blogimage/raw/master/MOBAAI/01treehead.jpg" alt="英雄AI行为树脑图" title class>                <p>英雄AI行为树脑图</p>            </figure><p>这是一个尚未展开的行为树，每个超链接都对应一个子树，会逐个展开来讲解。</p><h3 id="购买道具"><a href="#购买道具" class="headerlink" title="购买道具"></a>购买道具</h3><figure class="image-box">                <img src="https://github.com/CGNz/blogimage/raw/master/MOBAAI/02buy.jpg" alt="购买道具" title class>                <p>购买道具</p>            </figure><p>英雄购买道具需要提前写好英雄对应的阶段道具设置。</p><p>比如：</p><figure class="image-box">                <img src="https://github.com/CGNz/blogimage/raw/master/MOBAAI/03chuzhuang.jpg" alt="出装流程" title class>                <p>出装流程</p>            </figure><p>每隔一段时间检测一次金钱是否可以买卖下阶段的道具。</p><h3 id="濒死逃亡"><a href="#濒死逃亡" class="headerlink" title="濒死逃亡"></a>濒死逃亡</h3><figure class="image-box">                <img src="https://github.com/CGNz/blogimage/raw/master/MOBAAI/04taowang.jpg" alt="濒死逃亡" title class>                <p>濒死逃亡</p>            </figure><h3 id="Gank战术行为"><a href="#Gank战术行为" class="headerlink" title="Gank战术行为"></a>Gank战术行为</h3><figure class="image-box">                <img src="https://github.com/CGNz/blogimage/raw/master/MOBAAI/05gankact.jpg" alt="Gank战术行为" title class>                <p>Gank战术行为</p>            </figure><p>每个英雄都需要单独编写此子树。首先搜寻最优攻击目标，而后检测是否能用技能组合一次秒之。</p><ul><li><strong>最优技能释放目标搜索</strong></li></ul><p>满足以下条件的单位应该优先被锁定：</p><p>1.HP较低</p><p>2.AP或者MP较高</p><p>3.物理或魔法护甲较低</p><p>4.处在友方其他英雄攻击范围内</p><p>我们可以使用如下计算公式(本文里面的任何公式都不一定是最优解的，但都满足定性的设计要求)：</p><figure class="image-box">                <img src="https://github.com/CGNz/blogimage/raw/master/MOBAAI/06gongshi.png" alt="最优技能释放目标搜索" title class>                <p>最优技能释放目标搜索</p>            </figure><p>其中a,b为参数，AllyNearBy为敌方英雄600码内我方英雄数量，每增加一个盟友，敌人的诱惑程度增加b。推荐参数值a=0.7, b=0.3</p><p>技能是否使用只对最优释放目标进行考虑。</p><h3 id="推兵线"><a href="#推兵线" class="headerlink" title="推兵线"></a>推兵线</h3><figure class="image-box">                <img src="https://github.com/CGNz/blogimage/raw/master/MOBAAI/07tui.jpg" alt="推兵线" title class>                <p>推兵线</p>            </figure><p>英雄磨血节点需要考虑收益，计算公式：</p><figure class="image-box">                <img src="https://github.com/CGNz/blogimage/raw/master/MOBAAI/08gongshi.jpg" alt title class>                <p></p>            </figure><p>收益值要考虑率较多因素，包括敌我双方血量，敌方英雄的同盟单位，收益值可能为负值。</p><h3 id="执行AI行动指令"><a href="#执行AI行动指令" class="headerlink" title="执行AI行动指令"></a>执行AI行动指令</h3><p><img src="https://github.com/CGNz/blogimage/raw/master/MOBAAI/09zhixing.jpg" alt></p><p>AI行动指令一般都是通过行为树之外的全局AI脚本来产生，并通知给AI行为树。常见的使用方式是，用一个全局AI脚本来产生各种指令，将指令传递给行为树，实现全局AI控制单位。</p><h2 id="AI事件响应"><a href="#AI事件响应" class="headerlink" title="AI事件响应"></a>AI事件响应</h2><h3 id="英雄躲避塔的攻击"><a href="#英雄躲避塔的攻击" class="headerlink" title="英雄躲避塔的攻击"></a>英雄躲避塔的攻击</h3><figure class="image-box">                <img src="https://github.com/CGNz/blogimage/raw/master/MOBAAI/10duobi.jpg" alt title class>                <p></p>            </figure><p>避免英雄冲塔行为。</p><h3 id="全局GankAI"><a href="#全局GankAI" class="headerlink" title="全局GankAI"></a>全局GankAI</h3><figure class="image-box">                <img src="https://github.com/CGNz/blogimage/raw/master/MOBAAI/11gankai.jpg" alt title class>                <p></p>            </figure><p>周期计算Gank形势。通知AI是否该Gank或者集体逃亡。</p><h3 id="救援塔"><a href="#救援塔" class="headerlink" title="救援塔"></a>救援塔</h3><figure class="image-box">                <img src="https://github.com/CGNz/blogimage/raw/master/MOBAAI/12jiuyuan.jpg" alt title class>                <p></p>            </figure><p>当塔受到攻击时触发，用来产生AI指令，控制AI行为。</p><h3 id="兵线分布调整"><a href="#兵线分布调整" class="headerlink" title="兵线分布调整"></a>兵线分布调整</h3><figure class="image-box">                <img src="https://github.com/CGNz/blogimage/raw/master/MOBAAI/13bingxian.jpg" alt title class>                <p></p>            </figure><p>当游戏运行时间超过6分钟时，AI要开始抱团，强推一路，之后每三分钟都要进行一次抱团检测。</p><p>兵线危机值计算：</p><p>兵线局势需要考察的因素：英雄数量，士兵数量，塔的数量，前塔的HP，推荐公式：</p><figure class="image-box">                <img src="https://github.com/CGNz/blogimage/raw/master/MOBAAI/14gongshi.jpg" alt title class>                <p></p>            </figure><p>其中a,b,c为参数，Lane表示兵线1,2,3。对应10v10游戏推荐参数设置：a=8, b=2, c=6, d=0.2,e=20</p><p>兵线危机值可以是负值，危机值越高则兵线越危险，值越低则兵线越安全。我们每10秒计算一次兵线危机值，根据兵线的状况来决定是否援助和抱团。</p><p>抱团是一个较为稳定的行为，我们设定每次防守抱团之后都要锁定切换兵线行为3分钟，进攻抱团锁定2分钟。</p><p>从另外两条兵线抽调英雄到最危险兵线。派遣数量服从规律：抽调后兵线上 我方英雄数目/敌方英雄数目&gt;0.65(参数)，尽可能多抽调英雄，但也确保不会让被抽调的兵线变得很不安全。派遣数目可以是0，表示全线吃紧，每条兵线都无法抽调英雄去支援其他兵线。初期，每条兵线最少也要保留一个英雄。</p><h2 id="Gank详解"><a href="#Gank详解" class="headerlink" title="Gank详解"></a>Gank详解</h2><h3 id="Gank行为基本设定"><a href="#Gank行为基本设定" class="headerlink" title="Gank行为基本设定"></a>Gank行为基本设定</h3><ul><li>首先要明确几个设计前提：</li></ul><p>1.Gank行为优先级要高于单体行为优先级，或者说，Gank行为执行期间会屏蔽掉大多数单体AI行为。</p><p>2.Gank行为需要考虑到局部范围内(比如说整个屏幕)所有单位(包括敌方)，而后控制所有我方英雄一起行动。</p><p>3.Gank AI控制下的机器人可能会表现出和单体AI完全不一致的行为，比如肉可能直接冲到敌人人堆中，吸收仇恨，至死方休;ADC和APC最优先的策略可能不是输出，而是控制;部分机器人输出伤害优先级要高于逃避危险。</p><p>4.Gank行为并非常态。达成一定条件之后才会触发。比如某个时刻敌我力量对比呈现一边倒</p><ul><li>Gank小队的生成</li></ul><p>Gank是局部小团队行为。必须考察周边敌我英雄和塔的个数，英雄和塔的潜在杀伤。Gank是个局部行为，只有距离很近的那些单位才会被认为是处于同一个Gank小组内。Gank小组是个动态变化的单位组。需要每隔一段时间重新生成一次。</p><p>生成方案：</p><p>寻找Gank中心英雄，Gank中心英雄只是根据位置搜索产生的，并不意味着它们会在Gank中处于核心地位。每隔一个周期(2秒，参数)先遍历某阵营场上全部英雄，统计这些英雄身边敌对英雄的数目。并按照递减顺序排列。身边敌对英雄越多，该英雄越可能处于Gank中心位置。按顺序遍历己方英雄(只遍历身边有敌对英雄的)，如果它们还未参与Gank，则以该英雄为中心，在一定半径(2000，参数)内搜索敌我未参与Gank的英雄，将盟友英雄写入Gank小队，并标记它们已经参与Gank了，将敌方英雄写入Gank目标小队(目标小队并不是敌方的实际Gank小队，敌方的实际Gank小队生成方式和我方一致)。如此，所有可能正处于交战状态的英雄就按照区域划分到了不同的Gank小组。</p><ul><li>Gank的发起和结束</li></ul><p>Gank小队是动态生成的，每一时刻Gank小队都是存在的，但发起Gank行为是需要条件的。</p><p>每隔一段时间要检测一下Gank小队的实力对比.</p><ol><li><p>如果我放Gank小队实力明显强于目标敌方小队，则发动Gank，并锁定5(参数)秒。Gank期间英雄优先执行Gank AI，屏蔽掉单体行为。Gank结束锁定后。重新生成Gank小组，重新判断形势，决定是否发起新的Gank。</p></li><li><p>当我方Gank小队实力明显弱于敌方时，集体执行撤退到己方前沿塔。但并不进入Gank行为。</p></li><li><p>均衡局面，如果有敌方单位可秒(可秒的含义是，gank小组的输出期望是目标单位hp的1.6(参数)倍)，则立刻发动Gank。否则调整我方站位，综合防御最强的英雄位置保持不变，脆皮远离敌小队中心，但不能离开坦克超过(1000参数)。调整站位是单体AI行为，战略AI通过参数来控制单体行为(发送指令buff，发送目标位置)。</p></li></ol><h3 id="技能伤害量化"><a href="#技能伤害量化" class="headerlink" title="技能伤害量化"></a>技能伤害量化</h3><p>如果希望AI精准的释放技能，量化技能伤害是至关重要的。并不是所有技能都是直接立即伤害的，AI要怎么理解自己的被动技能和buff技能?</p><p>我们做的处理是：</p><p>l 默认在一次Gank周期中AI可以普通攻击三次，或者5秒。</p><p>l 将被动技能，比如暴击和加速之类的，直接量化为三次攻击或5秒攻击中的伤害收益。</p><p>l 晕眩技能根据晕眩时间量化成额外伤害百分比。</p><p>l 辅助技能仅仅起加强队友作用的，伤害量化为0</p><p>当技能全部量化成具体数字之后，就能计算每个英雄在单次Gank中的伤害输出期望值了。</p><ul><li><strong>英雄威胁值</strong></li></ul><p>我们用英雄威胁值来表征英雄在单次Gank中的伤害输出期望值。</p><ul><li>威胁值的计算：</li></ul><p>首先遍历场上所有英雄，根据英雄技能等级和CD状态预估出来技能的三种伤害(物理，魔法，真实)数据。</p><p>对峙双方如果威胁值总和差别很大(参数60%)，则认为非均衡局面出现。优势一方会立刻发起Gank，进入团战模式。而劣势一方会立刻进入集体撤退状态。</p><p>威胁值相差不是很大时，英雄表现为单兵行动。此时威胁值的主要作用是敌对目标选择。</p><h3 id="GankTarget选择"><a href="#GankTarget选择" class="headerlink" title="GankTarget选择"></a>GankTarget选择</h3><p>GankTarget的选择方式——寻找最具吸引力的敌方单位，改进版的吸引力公式：</p><figure class="image-box">                <img src="https://github.com/CGNz/blogimage/raw/master/MOBAAI/15gongshi.jpg" alt title class>                <p></p>            </figure><p>这个公式综合考虑的因素有：敌人是否高AD或者高AP?物理护甲和魔法护甲如何?当前血量?我方集火的情况下，伤害总输出能杀死他几次?</p><p>最大吸引值得敌方英雄会成为Gank小组的共同目标</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>在本文中，我们按照从零开始逐步展开，完整描述了MOBA英雄AI的设计流程。限于篇幅，我们仅仅描述了最核心的框架，诸多细节都未展开。在手游 MOBA《全民超神》项目中，按照这个框架，我们在短短一个月时间内就实现了英雄AI。</p><p>本方案原创了两个核心设定：Gank和技能伤害量化。</p><p>Gank的设定让AI能够有效的躲避危险，也能很精准的捕捉战机，完成很多让人赞叹的绝妙击杀。</p><p>伤害量化，让AI理解自己技能的特性。对AI行为收益优化帮助很大。</p>]]></content>
      
      
      <categories>
          
          <category> 其他游戏分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 游戏策划 </tag>
            
            <tag> MOBA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>写在DNF十周年</title>
      <link href="/2018/06/30/%E5%86%99%E5%9C%A8DNF%E5%8D%81%E5%91%A8%E5%B9%B4/"/>
      <url>/2018/06/30/%E5%86%99%E5%9C%A8DNF%E5%8D%81%E5%91%A8%E5%B9%B4/</url>
      
        <content type="html"><![CDATA[<ul><li>一个<strong>阿拉德大陆</strong>,一首<a href="https://www.bilibili.com/video/av18997868" target="_blank" rel="noopener"><strong>风一样的勇士</strong></a>，这个大陆，这首每个勇士都可以熟练哼唱出来的旋律，还有那个温柔的赛利亚，不知不觉已经陪伴了我们10年之久，运营了十年，也黄了十年。</li></ul><p><a href="https://www.bilibili.com/video/av18997868" target="_blank" rel="noopener">“风一样的勇士”超强指弹！</a></p><p>这十年间，他经历了掉线，外挂，私服和各种竞争对手的洗礼，依然可以保持如此旺盛的生命力，说他是网游史上的一个奇迹也不为过，因为在这个传统网游逐渐衰退的年代（打怪升级提升装备的传统网游），即使是魔兽世界，玩家人数也是一直在流失的，而DNf新玩家一致在增长，老玩家同样在回归，他不仅熬死了其他同类游戏，也熬过了<strong>英雄联盟和绝地求生的竞技热潮</strong>。</p><h1 id="DNF进入中国"><a href="#DNF进入中国" class="headerlink" title="DNF进入中国"></a>DNF进入中国</h1><p>DNF在进入中国之前名气就很大了，网吧占有率甚至超过了冒险岛，所以作为一款国民级的网络游戏，他的代理费用也是水涨船高，NEOPLE信心满满的来到中国挑选代理商，却没有得到相应的重视。当时中国的网游公司根本就不看好这个画质粗糙的2D网游。3D网游时代了，一个2D游戏要这么多钱，做梦的吧。</p><p>当时NEOPLE一共和四家中国代理有过接触：<strong>盛大</strong>、<strong>九城</strong>、<strong>网易</strong>、<strong>腾讯</strong>，然后从公司实力，代理中的产品、硬件质量和运营计划这四个方面考查了这四家公司。其中<strong>综合实力最强</strong>的，毫无疑问就是盛大；九城是<strong>硬件最好</strong>的，因为去年因为代理激战这个世界级的RPG大作，九城花了3000万美元从美国引进了当时全世界最好的刀片服务器，只是没想到激战水土不服，公测几个月就惨遭滑铁卢，然后九城打算把激战的服务器让给DNF，对于这一点，韩国方面相当满意。只是后来发现NEOPLE发现九城在跟他们谈判的同时，还在跟其他多达十款游戏进行谈判，服务器就那几个，谁知道你是不是跟每家公司都这么说。</p><figure class="image-box">                <img src="https://github.com/CGNz/blogimage/raw/master/DNF-3/shengda.png" alt="盛大" title class>                <p>盛大</p>            </figure><figure class="image-box">                <img src="https://github.com/CGNz/blogimage/raw/master/DNF-3/jiucheng.png" alt="九城" title class>                <p>九城</p>            </figure><figure class="image-box">                <img src="https://github.com/CGNz/blogimage/raw/master/DNF-3/wangyi.png" alt="网易" title class>                <p>网易</p>            </figure><figure class="image-box">                <img src="https://github.com/CGNz/blogimage/raw/master/DNF-3/tengxun.png" alt="腾讯" title class>                <p>腾讯</p>            </figure><p>网易的话，他自己有一个<strong>2D游戏运营成功的案例</strong>，就是<strong>梦幻西游</strong>，这款游戏甚至被一些国外媒体认为是<strong>世界上最赚钱的游戏之一</strong>，所以有点膨胀。网易认为他们在2D领域有足够的想法和经验，而且现在是3D的时代，他们也一直在着手3D化的战略，所以网易内部大部分的高层认为时至今日还要花这么多钱代理一款2D街机游戏简直就是吃饱了撑的。<br>而盛大出局的根本原因是他们<strong>根本不看好这款游戏</strong>。盛大内部的专业评测团队和网易一样，对这种2D横版游戏的前景不报乐观态度，他们的内部评测团队都是一群海归和博士，并不是用玩游戏的方式来判断游戏的好坏，而是通过<strong>一套复杂的计算公式来评测</strong>，最后评测的结果是<code>不及格</code>。因此，在后续的谈判过程中，盛大反复压低条件，韩国人当然不愿意了，好歹作为一款国民级的网游也是有尊严的。<br>最后实在没有办法DNF才落到了原本最不被看好的腾讯手上，至少腾讯的<strong>态度让他们很舒服</strong>，<strong>竭尽全力的满足他们的要求</strong>。作为几家公司中<strong>用户量最大</strong>的腾讯，在游戏方面却始终慢人一步，同时也<strong>缺乏大型产品的代理运营经验</strong>，不知何年何月才能拿到一款真正的好项目，而DNF也并不是他们心目中的那个“好项目”，而是<strong>一个跳板</strong>，就像这次争夺DNF的代理权一样，游戏研发公司首先会考察你<strong>代理过的游戏和运营状况</strong>，而腾讯在这之前连一款能<strong>拿的出手的游戏</strong>都没有，所以DNF当时在腾讯中的地位也仅仅是那一款能拿得出手的游戏而已，毕竟只有成功代理一款知名的大型游戏，才有资本去代理更好更有分量的其他海外大作，比如<strong>英雄联盟</strong>。一种角度来说，九城如果没有<strong>奇迹</strong>，也拿不到<strong>魔兽世界</strong>的代理权。这虽然是腾讯的<strong>一个机会</strong>，但也同时是<strong>一场豪赌</strong>，代理费用有一部分是腾讯<strong>贷款支付</strong>的，连服务器也是租的，虽然租来的服务器也不怎么样，卡顿和六字真言都是家常便饭，但至少也比世纪天成那破罐子破摔的态度要好得多。<br>最后的结果也有目共睹：盛大接连让出两款大作：魔兽世界和DNF，他引以为豪的<strong>博士评测团队</strong>给这两款游戏都打出了极低的分数，后来又因<strong>决策上的失误</strong>一蹶不振。 而九城在前面提到在争夺DNF代理权的同时也跟其他十家韩国网游公司<strong>关系暧昧</strong>，最后反而被那十款网游拖累，还失去了赖以生存的魔兽世界。网易就更不用说了，<strong>DNF就是腾讯在游戏领域超越网易的第一步</strong>。</p><h1 id="早期的DNF"><a href="#早期的DNF" class="headerlink" title="早期的DNF"></a>早期的DNF</h1><figure class="image-box">                <img src="https://github.com/CGNz/blogimage/raw/master/DNF-3/jiufuwuqi.png" alt="DNF以前的服务器(此刻脑海里的BGM是什么~)" title class>                <p>DNF以前的服务器(此刻脑海里的BGM是什么~)</p>            </figure><h2 id="高难度的“半成品”"><a href="#高难度的“半成品”" class="headerlink" title="高难度的“半成品”"></a>高难度的“半成品”</h2><figure class="image-box">                <img src="https://github.com/CGNz/blogimage/raw/master/DNF-3/DNFyiqian.png" alt="60版本的DNF 怪物相当难打" title class>                <p>60版本的DNF 怪物相当难打</p>            </figure><ul><li>如果经常逛贴论坛就会发现，几乎每天都有各式各样的老玩家怀念过去，下面还有一堆跟风的：<strong>你知道60版本有多好玩吗</strong>，<strong>你知道60版本的绿装系统有多好吗</strong>，<strong>你知道60版本的僵尸带一次要3000金币吗</strong>之类的。在现在看来，60版本就是一个<code>半成品</code>，除了他新颖的游戏模式之外一无是处，毫无游戏体验，回忆青春可以，但如果跟现在的版本比较，真不能说更好。他们区别就像是血狮和魔兽争霸，连提鞋的资格都没有。</li></ul><p>DNF刚开始内测的时候并没有多少关注度，内测的时候只需要QQ会员就可以免费登录了，刚开始确实挺有意思，但新鲜感一过就有些绝望了，各种智障的数值让人非常难受，<strong>低蓝量，低回蓝，低血防，低三速</strong>，加上<strong>非常高的MISS几率</strong>，让人难以坚持下来。<br>60版本入坑的玩家，大多都是被那个全职业觉醒技能展示的宣传视频吸引进来的。特别如果玩了一些看起来很炫酷（漫游！）但是实际刷图特别困难的职业是几乎难以玩下去的，有时候甚至把武器打到耐久归零都过不去。当时大家都舍不得放无色，舍不得交复活币，技能甩两个蓝就没了，甚至还要一整条疲劳都拿去刷同一个副本更家难受。<br>因此也有部分玩家选择了<strong>开挂</strong>，DNF的外挂只是像单机游戏一样<strong>帮助自己快速成型</strong>，并不会太多的影响到别人，跟竞技游戏开挂还是有一定的区别的。版本初期的外挂泛滥也是因为NEOPLE作为一家小的工作室没有什么研发经验，游戏公测以后就开始暴露出了小工作室的各种不成熟，<strong>游戏的本地文件几乎都没有加密，所以可以利用GE修改游戏数据，甚至还可以调用一些游戏还没有开放的数据</strong>（比如提前开老鼠深渊刷50粉装等等）。</p><h2 id="各种各样的BUG"><a href="#各种各样的BUG" class="headerlink" title="各种各样的BUG"></a>各种各样的BUG</h2><p>一款漏洞百出的游戏所需要面对的不仅仅是外挂，还有bug，当时可以利用摆摊的bug来复制装备，还有刷罐子等等。这一系列的恶性事件对于腾讯来说，可谓是屋漏偏逢连夜雨，腾讯赌上一切代理的网游，居然是这样一个“病秧子”、“药罐子”，这对腾讯来说是一个前所未有的考验了，<strong>外挂泛滥，恶性bug频出，服务器也不堪重负</strong>，这逼得腾讯不得不开始实行<code>一刀切</code>的政策，刷罐子就把罐子封了，开挂伤害高了搞一个伤害检测，虽然连累了许多合法体验游戏的玩家，但当时的各种误封和掉线也确实是无奈之举。<br>腾讯当时作为一家没有实力，没有经验，硬件又惨不忍睹的公司，能将这么一款残破的游戏运营的风生水起，这背后所付出的努力和代价是显而易见的，如果当时的腾讯没有在DNF这里熬过来，现如今的网络格局又会是什么样子的呢？</p><h1 id="如今的DNF"><a href="#如今的DNF" class="headerlink" title="如今的DNF"></a>如今的DNF</h1><figure class="image-box">                <img src="https://github.com/CGNz/blogimage/raw/master/DNF-3/DNFxianzai.png" alt="我的DNF冒险团角色" title class>                <p>我的DNF冒险团角色</p>            </figure><p><strong>“DNF要凉，风暴要火”</strong>这两句话似乎已经变成了一个可以组合在一起的梗，而这两款神奇游戏一直神奇的坚持到了现在，甚至都在呈现出<strong>老玩家回归，新玩家入坑的状态</strong>，是这些梗产生的神奇魔法吗，说实话有点关系，但<strong>梗也只能吸引玩家，并不能保证玩家都留下来</strong>，而让玩家留下来的关键就是<strong>游戏的运营</strong>了。<br>DNF的运营可以说是中国网游圈的教课书了，非常值得其他网游公司的借鉴和模仿，当然那些逐渐走向衰退的公司就不要报什么希望了。这并不是对腾讯的洗白，此处说的运营单指现在的DNF，腾讯的其他游戏可不算，想想天美，想想剑灵，前后一对比，差距就出来了。<br>但是,上面所指的强调的是现在DNF，因为现在的DNF才是一个<code>完全体</code>，这个<code>完全体</code>不仅仅指的是游戏本身，还有游戏良好的运营参与其中，才形成了这个相对健康的生态体系。平民有平民的玩法，土豪有土豪的追求，<strong>每个人都可以通过自己的努力体验到这款游戏百分之百的内容</strong>，一款免费游戏能做到如此地步，对国内的网游公司而言是非常难能可贵的，DNF最强的竞争对手<strong>龙之谷</strong>是怎么死的，即便不能说死，但也就那样了。</p><h2 id="曾经的对手-龙之谷"><a href="#曾经的对手-龙之谷" class="headerlink" title="曾经的对手-龙之谷"></a>曾经的对手-龙之谷</h2><figure class="image-box">                <img src="https://github.com/CGNz/blogimage/raw/master/DNF-3/DN.png" alt="龙之谷" title class>                <p>龙之谷</p>            </figure><p>龙之谷满级之前的游戏体验非常好，在剧情中插入的及时演算动画的表现效果也非常非常好，对当时的网游玩家来说代入感真的太强了，但满级之后你就会发现不氪金就只能体验大概70％的内容，大多数副本都没人要，平民玩家上了游戏都不知道自己该干什么，这个游戏完全是盛大自己作死的，如果当年是盛大拿到了DNF，那我们大家估计就没钱守护阿拉德了。</p><figure class="image-box">                <img src="https://github.com/CGNz/blogimage/raw/master/DNF-3/DNtuanben.png" alt="龙之谷当年的绿龙团本 又回想起了刚开荒时被支配的恐惧~" title class>                <p>龙之谷当年的绿龙团本 又回想起了刚开荒时被支配的恐惧~</p>            </figure><h2 id="“简单”的副本难度"><a href="#“简单”的副本难度" class="headerlink" title="“简单”的副本难度"></a>“简单”的副本难度</h2><figure class="image-box">                <img src="https://github.com/CGNz/blogimage/raw/master/DNF-3/DNFtuanben.png" alt="DNF安图恩团队攻坚" title class>                <p>DNF安图恩团队攻坚</p>            </figure><p>很多人说现在的DNF过于简单，在我看来反而是DNF的各种<strong>玩法定位更加清晰</strong>了，<code>白图</code>就是让你<strong>升级练手搬砖赚钱</strong>的，另外还有一个更重要的作用，就是让你<strong>体验到流畅的游戏剧情</strong>，完全的无缝连接，加之完善有深度的世界观，让玩家的<strong>代入感成倍提升</strong>；这一路刷完以后，玩家至少知道角色的技能改怎么用了，习惯也养成了。</p><p>接下来就是<strong>高手进阶</strong>，去<code>远古图</code>，<code>深渊</code>来<strong>测试自己的操作、验证自己的想法、修正自己的习惯</strong>，然后经过一段时间的努力，该做的东西都做完了，深渊也刷的差不多了，这时候，玩家对自己的职业应该都有了一个新的理解，<strong>操作水平和熟练度也有了一个质的提升</strong>，然后就是<code>团本</code>了。游戏难度的提升是非常平滑的，不会像以前60版本一样一上来就“劝退”玩家。<strong>肉眼可见的属性提升</strong>，这种反馈带个玩家的<strong>成就感</strong>是无与伦比的。再说团本，它就像高考一样，努力了这么久，单机了这么久，终于有了一个展示自己的平台，土豪秀装备，大神秀操作，咸鱼喊666，所以说现在的DNF在单机和网游之间产生了一个微妙的平衡，刚开始没有什么朋友赶紧升级提升装备，等到可以刷团本之后再结识新朋友，虽然老朋友大多都已经不在了，但<strong>总不能永远活在过去</strong>，总是感慨自己那个<strong>加了滤镜</strong>的60版本吧。</p><figure class="image-box">                <img src="https://github.com/CGNz/blogimage/raw/master/DNF-3/DNFtuanben2.png" alt="DNF卢克团队攻坚" title class>                <p>DNF卢克团队攻坚</p>            </figure><p>为什么那些人老说现在的版本难度低，不好玩了，因为大多数人<strong>连团本的打法都懒得研究</strong>，更不要说再让他们去体验60版本的高难度了，他们就是喜欢那个不动脑子，单纯的以<strong>低三速，低血蓝，高MISS之类</strong>的<code>智障属性</code>强行提升难度的版本，这样简单粗暴的难度提升不需要你动脑子，也不需要太深入的研究打法，知道僵尸偶尔跳一下就行了，这些玩家中有几个能刷悲鸣和机械牛的？大多数也只是能刷老鼠，只会抱怨。<br>怀念归怀念，但也要有个度。我也怀念以前的版本，但我<strong>怀念的是我的青春，是我的回忆</strong>，若是让我现在再去玩那个不成熟的蹩脚的版本，恐怕也没有时间和那份耐心了。这真的不是老版本好，只是时过境迁，经历的多了只记得了他的好。</p><p>此外，还有一个细节，以前的版本，包括60但不限于60版本，是DNF玩家社会地位最低的几个版本，当年的DNF和CF一样被各类玩家称之为<strong>小学生网游</strong>，甚至是lowb网游，这导致当时许多勇士都不好意思去网吧里玩DNF。而现在，虽然有一些<strong>自以为是的优越党</strong>还是这样想，但他们的想法放下键盘后一文不值。而现在腾讯不仅仅在优化游戏，还针对DNF这个IP做了很多<strong>周边内容</strong>，比如<strong>电影，动画，小说，音乐</strong>等等，他就是要让勇士们体会到，我们玩的游戏已经不是以前那个很土的东西了，以前你把游戏推荐给朋友，一些比较优越的朋友可能会说：这什么破游戏啊，怎么还没死，我为什么要玩这么土的游戏？而现在腾讯和勇士们做出的这些努力，不管他们玩不玩，至少已经让大众<strong>认可了这个产品</strong>，就算他们不认可，也让他们不敢说出来。</p><h2 id="“长生不老”的“秘诀”"><a href="#“长生不老”的“秘诀”" class="headerlink" title="“长生不老”的“秘诀”"></a>“长生不老”的“秘诀”</h2><figure class="image-box">                <img src="https://github.com/CGNz/blogimage/raw/master/DNF-3/DNFshenyuan.png" alt="深渊出货 直至今日你依然是我的光~" title class>                <p>深渊出货 直至今日你依然是我的光~</p>            </figure><p>那么说了这么多，DNF玩家人数不减反增的原因到底是什么呢？其实在前面已经分析过了，在此再补充一些，首先出去团本，DNF作为一款<strong>比较休闲</strong>的游戏，不会影响你的正常生活，玩家可以<strong>随时退出，随时离开，也可以随时回来</strong>，非常适合<strong>忙里偷闲</strong>。此外，DNF的<strong><code>沉没成本</code>不高</strong>，不想玩了半年不上都不会有太大的影响，也有各种各样的丰富活动帮助角色快速成型，<code>回归成本</code>大大降低，加之奔跑之类的活动一方面减轻了玩家的负担，另一方面也<strong>增加了游戏的粘度</strong>，时时刻刻都在提醒玩家就算腻了，不想玩了，去玩LOL了，去玩吃鸡了，另有新欢了，心里依然也要<strong>为DNF留下这么一个位置</strong>，是后来者质量不好吗？并不是，有些游戏甚至在<strong>游戏质量方面已经完全超DNF</strong>了，比DNF漂亮，比DNF好看，但是这些<strong>“妖艳贱货”</strong>仗着自己的颜值和新鲜感卖弄风骚，放纵任性，今天<strong>让你买包，明天让你买貂</strong>。DNF始终就是那个在家里等着勇士们在外边玩够了，再回来找自己的“黄脸婆”。你会发现那些竞争对手一直在针对DNF，但DNF好像<strong>并没有做什么</strong>他们就自己把自己给玩死了。这一方面归功于<strong>游戏良好的运</strong>营，而另一方面是<code>情怀</code>，对，是情怀。</p><p><a href="https://github.com/CGNz/blogimage/raw/master/DNF-3/bairenchangjuan.png" target="_blank" rel="noopener">DNF百人长卷</a></p><h1 id="情怀"><a href="#情怀" class="headerlink" title="情怀"></a>情怀</h1><p>判定一款游戏是否可以吸引玩家的标准有很多，但<strong>情怀凌驾于所有标准之上</strong>，当然你要真利用玩家的情怀把其他方面做的跟屎一样玩家也不会买账，只要不逊色与竞争对手太多，那么情怀就可以<strong>把这些方面丢失的分数一举拉回来</strong>，如果其他方面标准各占10％，那么情怀这一个标准就可以占50％，这也是传奇经久不衰的原因之一。<br>DNF坑吗？还好吧，在我看来一款免费游戏可以让平民<strong>体验到游戏100％的内容就足够良心了</strong>。每个网游都有玩家骂狗策划，DNF的活动奖励确实也越来越蚊子腿，但至少他没有像竞争对手一样作死，对比一下其他一些免费游戏和手游的策划，只能说<strong>全靠同行衬托</strong>。<br>其实一直以来，大部分玩家一直都处于一种<strong>眼高手低</strong>的状态，土豪<code>+15</code>了我也想<code>+15</code>，其他游戏有<strong>高门槛</strong>，你不强化到那个标准没人要。但DNF，你没有那么夸张的强化属性也一样可以打团啊，千错万错都是旭旭宝宝的错嘛，不说了，肝柱子去了。</p><figure class="image-box">                <img src="https://github.com/CGNz/blogimage/raw/master/DNF-3/qingquan1.png" alt="许愿清泉流响！" title class>                <p>许愿清泉流响！</p>            </figure><figure class="image-box">                <img src="https://github.com/CGNz/blogimage/raw/master/DNF-3/qingquan2.png" alt="嘤嘤嘤" title class>                <p>嘤嘤嘤</p>            </figure><p>#后记</p><p>DNF一晃就十周年了，虽然这十年中，并非一直一同走过，但是不知不觉又回到了原点，又找回了“初恋”的感觉，千言万语过后，剩下的只有感慨和由衷的祝福，希望下一个十年，归来再少年！~</p><figure class="image-box">                <img src="https://github.com/CGNz/blogimage/raw/master/DNF-3/chulian.png" alt="我哭了 你们呢" title class>                <p>我哭了 你们呢</p>            </figure>]]></content>
      
      
      <categories>
          
          <category> DNF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DNF </tag>
            
            <tag> 游戏策划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《Slay the Spire》中Roguelike元素的设计和使用</title>
      <link href="/2018/06/29/%E3%80%8ASlay-the-Spire%E3%80%8B%E4%B8%ADRoguelike%E5%85%83%E7%B4%A0%E7%9A%84%E8%AE%BE%E8%AE%A1%E5%92%8C%E4%BD%BF%E7%94%A8/"/>
      <url>/2018/06/29/%E3%80%8ASlay-the-Spire%E3%80%8B%E4%B8%ADRoguelike%E5%85%83%E7%B4%A0%E7%9A%84%E8%AE%BE%E8%AE%A1%E5%92%8C%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<figure class="image-box">                <img src="https://github.com/CGNz/blogimage/raw/master/Slay%20the%20Spire/1.png" alt="Slay the Spire" title class>                <p>Slay the Spire</p>            </figure><h1 id="随机并行学习"><a href="#随机并行学习" class="headerlink" title="随机并行学习"></a>随机并行学习</h1><p>许多游戏中，针对不同的关卡，游戏设计有许多不同种类的熟练度类型。玩家在不同的时间里，根据客观的需要或者是潜意识的驱使，他们决定去掌握一些技能，或者无意识地学到了一些技能。在游戏中设置需要掌握的东西越多，就相当于更少地限制玩家掌握某一项特定的东西，从而能在游戏过程中给予玩家一种“我明白了！”的感觉，这种体验是非常棒的，会让玩家觉得他们真正学到了东西，让游戏的体验更加充实。此外，这种设定是关于当人们有动力时，他们所倾向如何学习，来突破困难从而达到目标。<br>杀戮尖塔中，玩家所选择的路线总不是一成不变的，因此对阵的怪物和遇见的事件总是不相同的，自身的卡组和遗物都不尽相同，这时候，一些卡组和遗物，遇见的怪物在某种情况下会产生不同的效应，比如以中毒为主的卡组面对长期高护甲的怪物就会特别舒服（毒伤无视护甲），而在面对多怪物强攻击的则会十分吃力（多回合难以应付，缺少爆发秒怪），因此玩家会在多样的游戏中学习到不同的东西，游玩的过程也是不断提升熟练度的过程。</p><h1 id="非胜即零（Hero-or-Zero）"><a href="#非胜即零（Hero-or-Zero）" class="headerlink" title="非胜即零（Hero or Zero）"></a>非胜即零（Hero or Zero）</h1><p>在roguelike游戏中，对于游戏中的永久死亡，以及游戏内的艰难地成长，在此设定下，玩家对失败有所预期，因而会具有寻求能够成长和进步的思维倾向，成长和进步在roguelike游戏中意味的就是进一步地熟练掌握通关的方法和技巧；除此之外，由于失败是游戏中大多数时候默认的状况，玩家们总会记住自己游戏过程中那些精彩的、高光的片段，比如做了一些酷炫的事，或者在某一个boss关卡虎口脱险侥幸逃脱等等。有了相对稀有的体验，这种强烈的对比会让玩家更容易记住积极的体验。在这种设计之下，玩家会选择去“原谅”设计者的高难度关卡，而非去责难其为“糟糕”的设计。<br>（记住超棒的回合或者是完美的胜利，却记不太清，那些角色死亡的时刻，即便自己的死亡失败次数达到了一个相当高的数值）毕竟，关卡和玩法的设计就是为了让玩家体验到那些精彩的游戏时刻。<br>做法：让玩家有能够变得很强的设定；增加一些仪式感的元素和设定，让玩家知道自己所完成的成就很重要，增强玩家积极的游戏体验；PS：创造游戏进程外的成长空间</p><h1 id="道具多样化与限制使用"><a href="#道具多样化与限制使用" class="headerlink" title="道具多样化与限制使用"></a>道具多样化与限制使用</h1><p>在roguelike游戏中，玩家会获得各式各样的道具去面对各种各样的挑战，然而，玩家获得的道具都不是全能的，而且大多数情况下，游戏会限制玩家去使用那些强力的道具，或者是使用一些次级的道具甚至没有道具，通过设计创造使用道具的情境，去鼓励玩家学习玩家使用各种道具，让他们去斟酌、去选择已有的道具和使用组合，而非让玩家去过多地、持续性的使用相同的道具或是相同的思路。这种做法让玩家对大部分的内容感到有趣和兴奋，而非漠不关心。<br>在杀戮尖塔中，有接近200多个遗物，遗物的效能也各不相同；许多遗物属性看上去十分诱人，但是使用上总是有许多限制，比如“符文十二面体”，虽然能够在每回合提供多一点能量，但是必须要在自身血量为满的时候生效，这是玩家就必须小心的使用格挡，或者通过一些生命恢复的手段让自己的生命在战斗的时候维持。<br>做法：道具应该有限制，短时间内使用，多种选一，长CD，需要使用技巧的道具，让限制变得自然，当道具过强的时候，“是否是在潜在地削弱游戏性”，但也需要一些强力的道具去维持游戏的深层元素，如“非胜即零”的模式是需要强道具去实现的。因此需要在道具的强度和可用性上达到平衡，让玩家进入思考与权衡的模式。</p><h1 id="建立对立与战略一致"><a href="#建立对立与战略一致" class="headerlink" title="建立对立与战略一致"></a>建立对立与战略一致</h1><p>在游戏中时常会让玩家做出一些非常尖锐而有趣的选择，比如舍弃掉所有攻击牌并降低15点最大生命值，替换成5张“嗜血”牌——造成七点伤害并回复2点生命值；又如   。游戏提供十分对立的选项，而且选项所代表的对象方式也有所不同——有的是短期的生命值换取长期的道具增益，有的是获得长期的能力增益而锁定提升的上限，玩家在这种对立的选择之间只能选择一边，而没有折中的选项。一种有用而且强力的设置，往往也会伴随着削弱另一些设定或者提升使用的门槛；在这些选择面前，玩家此前可能会有一个既定的策略或者是倾向，但玩家还是会想是否应该坚持此前的战略，或者是转变自己的策略的方向？这种思考实际上也是在思考回报，潜在地为选择的结果下赌注，从而在做出决定之后有着加良好的积极体验。<br>战略一致则是面对游戏的终极目标，玩家所需要做出的权衡，为了通关这个游戏，面对困难的抉择，玩家需要去协同，比如在营地，玩家可以选择休息来短暂地恢复生命值，又或者是对自己卡组中的一张卡进行强化，在这种短时生命恢复和永久能力强化之间，玩家总会需要抉择。在你生命值较低的时候如果不顾生命强行提升的话，很有可能在紧接着的战斗中“翻车”，而一味的保守也有可能使自己卡牌的强度不足以应付未来的精英怪和BOSS。玩家的最终战略目的是通关，因而在这些选择中要进行折中。</p><p>//这是许多RPG游戏中不具有的，比如在地下城中，刷出来的一把武器比自己身上的武器攻速稍慢，但是伤害却高了一倍，即便这是一定程度上的属性对立，但是玩家可以通过权衡，强行判断出一个最优解，而让选择趋同，并非说这种设定不好，而是这样的设定的确少了那种玩家经过抉择后的成就感和积极反馈。</p><h1 id="多样性但非随机性"><a href="#多样性但非随机性" class="headerlink" title="多样性但非随机性"></a>多样性但非随机性</h1><p>Roguelike游戏基本都具有随机性的特征，玩家虽然热爱多样化，喜欢富有变化的体验，这样能更好的实践随机并行学习、熟练度等模式，保持趣味性；但是过于随机的模式有的时候反而会丧失一定的趣味，比如在游戏中，连续随机到了相对孤立的卡牌组合，或者是强度较弱的卡牌，则在这次的挑战中可以说是“基本凉了”，因为卡牌的强度并非总能通过操作弥补的。因此在某次挑战中，最终所能达到的层数取决于前期的“积累”，这也是这个游戏稍有不足可以改进的地方。在随机性的程度上可以做一些改进，在“无意”中给予玩家一些相对强力卡牌。</p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>这篇文章是根据一个游戏开发者的讲座，总结出的一些roguelike元素的要点，并通过游玩体验《杀戮尖塔》来分析游戏中这些元素的体现，加深自身对游戏的理解。而由于时间的关系，对这款游戏的体验并不够深，无法完全体验这款游戏的深度和广度，不可否认的是这款游戏这些方面都已经非常优秀，很好的融入了roguelike游戏的特点，是一款值得深入游玩的游戏。<br>另外分析一下国内游戏使用roguelike元素的限制。第一点，国内游戏与国外游戏不同，对于国外的游戏，大多都是先付费购买，再体验游玩的，具有一定的门槛，加入了roguelike元素后，游戏变得相对硬核，玩家可能在遇到挫折的时候会想：“我都买了这款游戏了，总得把他玩完体验一遍才物有所值吧”，因此这些玩家会“被迫的”玩下去，进而体验到游戏困难之外的魅力；而国内游戏大多免费，准入门槛很低，在玩家遇到困难而短时间得不到解决的时候，玩家甚至会直接放弃这款游戏，因而这些较为硬核的设定难以在游戏中开展，或者说设计出来却得不到玩家的肯定。此外更重要的一点，roguelike元素在设计多人模式的时候是有困难的，设计者难以在关卡和多个玩家之间找到相对的平衡，国外带有roguelike元素的游戏大多为单机的独立游戏，而国内市场还是以MMO为主，所以这些设定的实现也有待设计者在未来去实现。</p>]]></content>
      
      
      <categories>
          
          <category> 其他游戏分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DNF </tag>
            
            <tag> 游戏策划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>枪剑士职业介绍及史诗武器分析</title>
      <link href="/2018/06/28/%E6%9E%AA%E5%89%91%E5%A3%AB%E8%81%8C%E4%B8%9A%E4%BB%8B%E7%BB%8D%E5%8F%8A%E5%8F%B2%E8%AF%97%E6%AD%A6%E5%99%A8%E5%88%86%E6%9E%90/"/>
      <url>/2018/06/28/%E6%9E%AA%E5%89%91%E5%A3%AB%E8%81%8C%E4%B8%9A%E4%BB%8B%E7%BB%8D%E5%8F%8A%E5%8F%B2%E8%AF%97%E6%AD%A6%E5%99%A8%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h1 id="枪剑士职业介绍"><a href="#枪剑士职业介绍" class="headerlink" title="枪剑士职业介绍"></a>枪剑士职业介绍</h1><p>暗刃是枪剑士的转职职业之一，伤害类型为物理百分比，在技能形态方面将枪术和剑术充分结合，有着比较华丽的多段攻击；枪术形态与漫游枪手比较相似，剑术在部分技能的形态上与剑魂有些相似，整体看来是一个为帅而生的职业。想必也有比较多的玩家做好了玩暗刃的准备，那么本文就从Buff技能、装备发展等方向，来为各位分析一下“暗刃”这一帅气的职业。</p><h2 id="暗刃"><a href="#暗刃" class="headerlink" title="暗刃"></a>暗刃</h2><ul><li>他不仅帅，还能当25仔混团</li></ul><h3 id="技能分析"><a href="#技能分析" class="headerlink" title="技能分析"></a>技能分析</h3><h4 id="Buff技能-战术指示"><a href="#Buff技能-战术指示" class="headerlink" title="Buff技能 战术指示"></a>Buff技能 战术指示</h4><p>​战术指示的效果是增加基本攻击力和技能攻击力，每级成长率为2%，学习10级时可增加30%技能攻击力；同时能为队友带来固定的25%技能攻击力加成（25仔混团能力get）。30%的Buff基准在所有职业里面算是比较低的，先不说别的，枪剑士其他三个转职职业的Buff基准都是40%，所以暗刃在Buff技能的倍率上比其他职业差了一些。</p><p>​暗刃可以通过异界[6]套装、以及安徒恩传说武器来提升Buff技能的属性值，CQB初级战术[6]套装可使战术指示技能攻击力增加量+10%，传说长刀火焰荡漾可使战术指示技能攻击力增加量+7%。最初的换装方式，可以使用：CQB[6]套装、火焰荡漾、以及其他增加技能等级的装备，整体说来是比较容易达成的。同时换装装备的效果只对自己有效，不管怎样换装，战术指示为队友带来的加成数值固定为25%。</p><h4 id="被动技能分析"><a href="#被动技能分析" class="headerlink" title="被动技能分析"></a>被动技能分析</h4><p>​除了Buff技能之外，暗刃在二觉之前共有3个增加伤害的被动技能。[长刀精通]将武器类型定为了长刀，可增加武器物理攻击力、命中率，10级时的精通基准为25%物理攻击力、5%命中率。[暗刃战略]可增加移速、物理暴击伤害增加量、以及物理暴击率，10级精通时大约可增加30%左右的物理暴击伤害增加量。</p><p>一觉被动[B.G枪刃改造]可增加基本攻击力和技能攻击力，对攻速也有一定的加成。这里由于我的角色等级暂时不够，不能看到每个技能精通之后的数据。但从整体看来，这三个被动技能在除伤害加成之外，为暗刃带来了攻速、移速、命中率、和物理暴击率的加成，较高的速度加成使暗刃具备了优秀的打击手感，比较符合这个职业“帅”的特点。</p><h4 id="输出技能简单分析"><a href="#输出技能简单分析" class="headerlink" title="输出技能简单分析"></a>输出技能简单分析</h4><p>​暗刃的输出技能分为枪术技能和剑术技能，Hit次数整体较多，在部分怪物的破防上有着一定的优势。输出距离偏向于中、近程，部分技能有抓取效果，在掌握每个技能的判定、位移之后，可以轻松地打出流畅程度较高的连招。但仅从目前可见的数据看来，暗刃的技能百分比数值并不高，同时精通武器长刀的基础物攻也不高，要想赶上其他百分比较高的职业，还需要在武器强化方面下更多的功夫。</p><h3 id="武器分析"><a href="#武器分析" class="headerlink" title="武器分析"></a>武器分析</h3><p>​暗刃的精通武器是长刀，最终的毕业武器自然是圣耀救赎长刀。但圣耀武器对于一个刚出的职业而言还比较遥远，在此之前，自制史诗轮回之悖论、深渊史诗鲜血猎杀这两把武器都可以作为毕业武器使用。</p><p>两把武器算是各有各的有点，在搭配万世、上元、铁马这类高属强防具时，鲜血猎杀要稍微强一些。需要注意的是，轮回之悖论的技能等级加成效果还不完整（目前只加1级一觉），等出到枪剑士二觉的时候，这把武器会加入两个二觉技能的等级加成效果。</p><h3 id="防具选择分析"><a href="#防具选择分析" class="headerlink" title="防具选择分析"></a>防具选择分析</h3><p>​暗刃的精通防具是轻甲，以防具B套的眼光来看，轻甲超大陆套装兼顾伤害与速度，在属性加成上比较符合暗刃的职业特点，所以暗刃在选择防具时可以优先考虑超大陆套装。除此之外，板甲B套和布甲B套也比较适合暗刃，装备成型后的暗刃基本是依靠大技能输出，小技能的伤害不太理想；在大技能伤害提升方面，布甲B套则是相对优秀的。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>在枪剑士初期，能说的东西基本就只有这么多了，这里再简单说一下暗刃和特工的不同：首先在技能形态方面，虽然两个职业都是结合枪术与剑术、有着华丽技能形态的职业，但暗刃的输出距离算是中、近程，而特工则更偏向于近程；稍微说得形象一点，暗刃给人的感觉更像是漫游枪手，而特工除了拥有一些漫游枪手的特点外，还拥有一些剑豪的特点。在伤害方面，特工的技能百分比高于暗刃。那么新职业暗刃的技能、装备分析就到此结束，感谢您的阅读。​​​​</p><h2 id="特工"><a href="#特工" class="headerlink" title="特工"></a>特工</h2><ul><li>分析特工的技能换装与装备发展，这是个帅与伤害并存的职业</li></ul><p>绝命谍影（特工）是枪剑士的又一个转职，在技能形态上与暗刃有些相似，缺少了解的玩家或许容易将这两个职业混淆。事实上，<strong>特工的技能大都是近距离的剑术攻击</strong>，枪术攻击相对较少，这与枪术、剑术几乎对半分的暗刃是有区别的。特工的技能百分比数值较高，同时也是<strong>枪剑士四个转职中唯一没有辅助能力的职业</strong>，种种特点都注定特工只能成为一个主C。那么想要玩好这样一个帅气的主C，我们在初期应该注意些什么问题呢？下面就来为各位讲解一下。</p><h3 id="技能分析-1"><a href="#技能分析-1" class="headerlink" title="技能分析"></a>技能分析</h3><h4 id="Buff技能-特工使命"><a href="#Buff技能-特工使命" class="headerlink" title="Buff技能 特工使命"></a>Buff技能 特工使命</h4><p>​Buff特工使命可增加基本攻击力和技能攻击力，1级时的增加量为22%，成长率为每级2%，学到10级时则是40%。后续可以使用等级加成装备、异界套、换装武器、以及裂魂气息散件来继续增加[特工使命]的属性值。</p><p>​异界装备-特岚希的绝杀瞬间[6]套装可使[特工使命]的技能攻击力增加率+10%，85级传说小太刀-特岚希的熔岩心脏可使[特工使命]的技能攻击力增加量+10%。初期可以使用特岚希[6]套装、熔岩心脏、等级增加装备来达成一个速成换装，随着后期技能宝珠、光环、称号及宠物的增加，可以慢慢将等级加成装备换成裂魂气息散件装备。换装方面可以说的东西不多，下面继续来看看被动技能。</p><h4 id="特工被动技能分析"><a href="#特工被动技能分析" class="headerlink" title="特工被动技能分析"></a>特工被动技能分析</h4><p>​特工目前有着三个增加伤害的被动技能：[小太刀精通]可增加百分比物理攻击力和命中率，10级的增加基准分别为15%、8%。[特工秘技]可增加物理暴击率和暴击伤害增加量，10级的基准分别是15%、30%，同时可为特工增加一个类似于神枪手空中射击的“后跳攻击”形态。</p><p>一觉被动[使命觉悟]可增加基本攻击力和技能攻击力，同时可增加特工的寻敌范围，特工的部分技能有着“标记”敌人的效果，而寻敌范围大概指的是被标记敌人与特工的距离。除了这三个增加伤害的被动技能之外，特工还拥有一个不加伤害、却十分重要的被动技能——[迅步闪避]：</p><p>​学习此技能后，可在指定技能与[迅步突袭]之间进行柔化，施放迅步突袭后，特工会获得短时间的无敌状态。在实战中灵活运用此技能的无敌效果，可以有效防止连招被打断。</p><h4 id="特工输出技能分析"><a href="#特工输出技能分析" class="headerlink" title="特工输出技能分析"></a>特工输出技能分析</h4><p>​特工技能的百分比数值较高，一觉技能[噬血绝杀]在1级时就拥有了47558%的百分比（其他三个职业都是30000%左右）。有Hit数较高的多段攻击技能，也有Hit数较低的单段高伤害技能，无论是技能的百分比数值、还是技能的持续与爆发，与其他三个枪剑士转职比起来，特工都有一定的优势。</p><h3 id="特工输出武器分析"><a href="#特工输出武器分析" class="headerlink" title="特工输出武器分析"></a>特工输出武器分析</h3><p>​特工的精通武器类型为小太刀，在制作出圣耀救赎小太刀之前，深渊史诗贝尔玛尔之剑、自制史诗纳斯卡：禁忌的遗产都可以作为次一级的毕业武器使用。两把武器的水准比较接近，在50-80级技能的伤害上，贝尔玛尔之剑的优势要大一些。升到90级可直接获得一把纳斯卡，在有纳斯卡的前提下，没有必要刻意地去刷贝尔玛尔之剑。</p><h3 id="特工防具B套分析"><a href="#特工防具B套分析" class="headerlink" title="特工防具B套分析"></a>特工防具B套分析</h3><p>​特工的精通防具类型是皮甲，同时特工在实战中也比较容易抓破招，深渊恶魔套装可以作为优先选择的装备。同时从特工的技能形态和对速度的要求来看，超大陆套装和七宗罪套装也都在可选范围内，这两套防具的伤害在同等打造水平下虽然不及深渊恶魔套装，但二者的手感都比深渊恶魔套装要好，在这个不缺伤害的版本，舍弃一点伤害来换取更好的手感，也不是不可以。</p><p>当然，对于难以直接点出一套史诗防具的玩家而言，最后选哪套还是取决于在深渊中齐了哪套。总之五套防具B套对特工而言都能用，优先考虑皮甲，其次考虑轻甲和板甲，布甲和重甲则作为最后考虑。</p><p>至于前期的过渡防具套装，可以在魔战、天御、战术这三套防具之中进行选择，在手感方面：魔战套的手感最佳，战术套略微次之，天御套的手感与前两者比起来则相对较差。在伤害方面：单看技能伤害数据是天御套最高，但魔战套在实战中可以通过重置技能来提升伤害总量，在实战伤害总量上赶上天御，也不是不可能的事情。要给出一个选择顺序的话，充分考虑伤害与手感之后：魔战＞战术≥天御。</p><h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><p>绝命谍影（特工）目前在韩服算是一线职业，也是枪剑士四个转职中排名最靠前的，虽然韩服的职业排名不一定适用于国服，但这也能在一定程度上体现特工输出能力的强大。如果真的用心去玩了，想必这个职业是不会令我们失望的。绝命谍影（特工）的职业分析就到此结束，感谢您的阅读。​​​​</p><h1 id="枪剑士自制史诗属性"><a href="#枪剑士自制史诗属性" class="headerlink" title="枪剑士自制史诗属性"></a>枪剑士自制史诗属性</h1><ul><li>能按武器的强度来选择职业吗？</li></ul><p>枪剑士史诗武器的属性已经在国服实装了，在枪剑士版本中，角色在达到90级之后可以直接获得一把自制史诗武器，部分玩家或许是想根据四把自制史诗强度，来对枪剑士的转职职业进行选择。那么下面就对枪剑士四把自制史诗的提升率进行一个分析计算。</p><h2 id="枪剑士自制史诗武器分析-装备搭配前提"><a href="#枪剑士自制史诗武器分析-装备搭配前提" class="headerlink" title="枪剑士自制史诗武器分析 装备搭配前提"></a>枪剑士自制史诗武器分析 装备搭配前提</h2><p>枪剑士是一个新职业，对任何玩家而言，<strong>不可能一开始就有防具B套、恍惚套等装备</strong>。但是，一把武器在<strong>不设装备搭配前提时，所得出的提升率难以符合实战情况</strong>，并且在这90版本的中后期，把装备搭配设为魔战、冰雪也是不太合适的，所以这里还是把装备前提设为：七宗罪套装、+10恍惚套、三神器。但做出这样的设定并不是说我的枪剑士在刚开始玩时就有这些装备，而是为了更加准确地去分析武器的提升率，希望各位能够理解。</p><h2 id="长刀-轮回之悖论"><a href="#长刀-轮回之悖论" class="headerlink" title="长刀 轮回之悖论"></a>长刀 轮回之悖论</h2><figure class="image-box">                <img src="https://github.com/CGNz/blogimage/raw/master/DNF-456/zcd.png" alt="轮回之悖论" title class>                <p>轮回之悖论</p>            </figure><p>​自制史诗长刀（对应转职为暗刃）可增加21%白字附加伤害、以及30%物理攻击力；同时可增加1级<strong>[电光飞掠]</strong>，此技能等级加成效果和之前在韩服所看到的有所不同，应该是<strong>没有显示增加二觉技能的部分</strong>（因为周年庆版本是枪剑士的一觉版本，二觉技能还不存在），在进行提升率计算时，暂时不将这条效果考虑进去。整合长刀轮回之悖论除技能等级加成之外的属性：</p><p>白字附加伤害+21%：其他白字伤害加成数值取42%（称号、宠物及宠物装备的27%，七宗罪头肩的15%）；不破招提升率为14.79%（1.63/1.42），白字双破招提升率为<code>17.21%</code>。物理攻击力+30%：其他百分比物攻加成数值为32%（+10清泉流响的15%，七宗罪下装的17%）；提升率为<code>22.73%</code>（1.62/1.32）。那么可以得出，长刀在不计技能等级加成时的提升率为：</p><blockquote><p>1.2273*1.1479=<code>1.4088</code>（不破招）</p></blockquote><blockquote><p>1.2273*1.1721=<code>1.4385</code>（白字双破招）</p></blockquote><p>长刀轮回之悖论在不计技能等级加成效果时，在不破招下的提升率为<code>40.88%</code>，在白字双破招下的提升率为<code>43.85%</code>，这样的结果不是很理想。但由于技能等级加成效果的不确定，所以也不能仅凭此数值来对长刀的伤害提升能力进行判断。那么这里就先对长刀的提升率保持观望，待技能等级加成效果确定之后再做定论。</p><h2 id="小太刀-纳斯卡：禁忌的遗产"><a href="#小太刀-纳斯卡：禁忌的遗产" class="headerlink" title="小太刀 纳斯卡：禁忌的遗产"></a>小太刀 纳斯卡：禁忌的遗产</h2><figure class="image-box">                <img src="https://github.com/CGNz/blogimage/raw/master/DNF-456/zxtd.png" alt="纳斯卡：禁忌的遗产" title class>                <p>纳斯卡：禁忌的遗产</p>            </figure><p>​自制史诗小太刀可增加30%力智、以及30%额外暴击伤害，同时可增加5%双速和7%施放速度。小太刀在设定上是枪剑士转职——特工的武器，其在物魔加成数值上较为均衡。整合小太刀的所有伤害提升属性：</p><p>力量、智力+30%：其他百分比力智加成数值取作33%（黄金杯的18%、七宗罪上衣的15%），忽略力智系数；提升率为<code>22.56%</code>（1.63/1.33）。额外暴击伤害+30%：其他暴击伤害数值为20%（恍惚套），其他额外暴击伤害数值为25%（七宗罪[3]套装）；提升率为<code>20.69%</code>（1.75/1.45）。最后可以直接得出，小太刀纳斯卡的提升率为：</p><blockquote><p>1.2256*1.2069=<code>1.4792</code></p></blockquote><p>小太刀纳斯卡的提升率为47.92%，算得上90级史诗武器里面的中上水准。或许部分玩家在了解特工的技能形态之后，早已下定了玩特工的决心，那么就这把自制史诗武器的伤害提升能力而言，也基本算是带的动特工。</p><h2 id="重剑-苍月伯爵"><a href="#重剑-苍月伯爵" class="headerlink" title="重剑 苍月伯爵"></a>重剑 苍月伯爵</h2><figure class="image-box">                <img src="https://github.com/CGNz/blogimage/raw/master/DNF-456/zzj.png" alt="苍月伯爵" title class>                <p>苍月伯爵</p>            </figure><p>​自制史诗重剑（对应转职为佣兵）可增加35%额外黄字伤害、以及25%最终伤害；攻击时有25%几率召唤蝙蝠群。重剑在基础属性和手感方面，都与鬼剑士的巨剑有着异曲同工之妙，能带动这把武器的职业，是技能形态较为简约的佣兵。整合重剑苍月伯爵的所有属性：</p><p>额外黄字伤害+35%：其他黄字伤害数值为20%（恍惚套），其他额外黄字伤害数值为15%（七宗罪鞋）；提升率为<code>25.93%</code>（1.7/1.35）。最终伤害+25%：其他最终伤害加成数值为50%（七宗罪腰带的17%、英雄王的18%、+10氤氲之息的15%）；提升率为<code>16.67%</code>（1.75/1.5）。也可以很直接地得出，重剑苍月伯爵的提升率为：</p><p>1.2593*1.1667=<code>1.4692</code></p><p>重剑苍月伯爵的提升率为<code>46.92%</code>，也比较接近中上水准。同时重剑基础物攻较高，这与其他几把武器比起来也算是一种优势。但在不确定枪剑士每个转职职业的武器类型是否唯一的情况下，难以进行跨武器类型的对比，这里就暂时不说了。</p><h2 id="源力剑-反乌托邦之终结"><a href="#源力剑-反乌托邦之终结" class="headerlink" title="源力剑 反乌托邦之终结"></a>源力剑 反乌托邦之终结</h2><figure class="image-box">                <img src="https://github.com/CGNz/blogimage/raw/master/DNF-456/zylj.png" alt="反乌托邦之终结" title class>                <p>反乌托邦之终结</p>            </figure><p>​自制史诗源力剑（对应转职为源能专家）可增加18%智力、以及44%额外黄字伤害，同时可增加10%移速。源力剑是魔法类武器，源能专家也是四个枪剑士转职中唯一的魔法职业，整合自制史诗源力剑的所有伤害加成效果：</p><p>智力+18%：其他百分比智力加成数值取作33%，忽略智力系数；提升率为<code>13.53%</code>（1.51/1.33）。额外黄字伤害+44%：其他黄字伤害、额外黄字伤害仍然为20%、15%；提升率为<code>32.59%</code>（1.79/1.35）。最后可以得出自制史诗源力剑的提升率为：</p><blockquote><p>1.1353*1.3259=<code>1.5053</code></p></blockquote><p>自制史诗源力剑的提升率为<code>50.53%</code>，此提升率数值就要稍微理想一些了。但源能专家作为魔法职业，在技能造型和手感方面，与其他三个职业比起来确实要稍微差一点（当然这点是因人而异的，每位玩家都有不同的见解），所以想玩源力专家的玩家或许要相对少一些。策划可能是意识到了这一点，才把源力专家的自制史诗设定得相对较强。</p><h2 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h2><p>仅从提升率的数值看来，源力剑（源力专家）的提升率是最高的，小太刀（特工）和重剑（佣兵）则紧随其后；长刀（暗刃）在不考虑技能等级加成效果时，算是四把武器中相对较差的；但它的技能等级加成效果目前还未确定下来，这多半是由一觉、二觉造成的：</p><p>因为周年庆仅仅是<strong>枪剑士的一觉版本</strong>，如果在长刀的技能等级加成效果中包含二觉之后的技能，那么此时确实无法显示出来。我估计在长刀的技能等级加成效果真正确定之后，它的提升率也会达到不弱于前面三把武器的水准。所以到头来，枪剑士的四把自制史诗在伤害提升率上可以说是差不多的，我们大可不必根据武器的强度去选择转职职业，遵循自己的心意就好！</p><h1 id="枪剑士深渊史诗武器介绍及分析"><a href="#枪剑士深渊史诗武器介绍及分析" class="headerlink" title="枪剑士深渊史诗武器介绍及分析"></a>枪剑士深渊史诗武器介绍及分析</h1><ul><li>新职业深渊武器的水准如何？</li></ul><p>在说完枪剑士的自制史诗武器之后，有部分玩家可能觉得自制史诗的提升率不够理想，还是将武器目标定为了90级深渊史诗武器，那么本文就来为各位说一说枪剑士的90级深渊史诗武器。在属性方面，<strong>枪剑士的深渊史诗确实略强于自制史诗</strong>，并且部分武器的属性设计也具有一些新意，下面就来详细地分析一下每把武器的提升率。</p><h2 id="提升率分析-装备搭配前提"><a href="#提升率分析-装备搭配前提" class="headerlink" title="提升率分析 装备搭配前提"></a>提升率分析 装备搭配前提</h2><p>在以往的分析中，我都将装备搭配前提中的防具设为了七宗罪套装，虽然只是将其作为一个计算的前提条件，但也确实有部分玩家觉得，把每个职业的防具都设为七宗罪套装的做法不太合适。那么在这里我就试着将每个职业的精通防具B套作为搭配标准，首饰和特殊装备还是继续设为+10恍惚套和三神器。不过这样一来，就不能进行武器之间的横向对比了。</p><h2 id="长刀-鲜血猎杀"><a href="#长刀-鲜血猎杀" class="headerlink" title="长刀 鲜血猎杀"></a>长刀 鲜血猎杀</h2><figure class="image-box">                <img src="https://github.com/CGNz/blogimage/raw/master/DNF-456/scd.png" alt="鲜血猎杀" title class>                <p>鲜血猎杀</p>            </figure><p>​鲜血猎杀可<strong>增加26点所有属性强化</strong>，可<strong>增加18%属性白字伤害（取自身最高属强）</strong>、以及<strong>10%最终伤害</strong>，同时自带火属性攻击。职业暗刃的精通防具是轻甲，这里就将防具设为超大陆套装，整合长刀鲜血猎杀的所有属性：</p><p>所有属性强化+26点：基础属强数值设为220点，不计怪物的属性抗性，此时暂不考虑属性白字（后面会作考虑）；提升率为<code>5.91</code>（26/440）。最终伤害+10%：其他最终伤害数值取作68%（超大陆套装的35%、氤氲之息的15%、英雄王的18%），提升率为<code>5.95%</code>（1.78/1.68）。</p><p>属性白字附加伤害+18%：此时的属强数值为246点（基础220点、武器本身+26点），18%属性白字所对应普通白字的数值为<code>38.13%</code>（18%*（246/220+1））；其他白字伤害加成数值为49%（超大陆套装的22%，称号、宠物及装备的27%）。可以得出此效果的提升率为：不破招<code>25.59%</code>（1.8713/1.49），白字双破招<code>29.56%</code>。最后可以得出鲜血猎杀的提升率为：</p><blockquote><p>1.0591<em>1.0595</em>1.2559=<code>1.4092</code>（不破招）</p></blockquote><blockquote><p>1.0591<em>1.0595</em>1.2956=<code>1.4538</code>（白字双破招）</p></blockquote><p>长刀鲜血猎杀在不破招时的提升率为40.92%，在白字双破招时的提升率为<code>45.38%</code>，整体看来只算是90级史诗武器的中等水平。但分析时所用到的属强数值其实有点低，并且枪剑士难免会经历一段防具A套时期，在万世套这类高属强防具的支撑下，鲜血猎杀的属性白字会有一个很不错的提升率。</p><h2 id="小太刀-贝尔玛尔之剑"><a href="#小太刀-贝尔玛尔之剑" class="headerlink" title="小太刀 贝尔玛尔之剑"></a>小太刀 贝尔玛尔之剑</h2><figure class="image-box">                <img src="https://github.com/CGNz/blogimage/raw/master/DNF-456/sxtd.png" alt="贝尔玛尔之剑" title class>                <p>贝尔玛尔之剑</p>            </figure><p>​贝尔玛尔之剑可<strong>增加33点所有属性强化、以及40%额外黄字伤害</strong>，可使职业<strong>特工48-80级技能等级+1</strong>。职业特工的精通防具为皮甲，这里就将防具设为深渊恶魔套装。整合贝尔玛尔之剑的所有伤害提升效果：</p><p>所有属性强化+33点：基础属强设为299点（原基础220点，深渊恶魔套装+79点），不考虑怪物的属性抗性；首先33点属强的基础伤害提升率为6.36%（33/519），然后它为深渊恶魔套装属性白字所带来的提升率为<code>2.02%</code>（1.8973/1.8598）；所以此效果的总提升率为<code>8.51%</code>x（1.0636*1.0202）。</p><p>额外黄字伤害+40%：黄字伤害数值取作20%，其他额外黄字伤害取作12%（深渊恶魔腰带）；提升率为<code>30.3%</code>（1.72/1.32）。特工48-80级技能等级+1：虽然枪剑士在刚出的时候没有二觉，但二觉也只是时间的问题，这里就按照二觉技能的一个大约倍率来计算一下此效果的提升率。在被动技能方面的提升率大约为<code>3%</code>，对50-80级主动技能的提升率大约为<code>5.5%</code>。那么最终能够得出，小太刀贝尔玛尔之剑的提升率为：</p><blockquote><p>1.0851<em>1.303</em>1.03=<code>1.4563</code>（1-45级、85级技能）</p></blockquote><blockquote><p>1.0851<em>1.303</em>1.03*1.055=<code>1.5364</code>（50-80级技能）</p></blockquote><p>贝尔玛尔之剑对1-45级和85级技能的提升为<code>45.63%</code>，对50-80级技能的提升为<code>53.64%</code>，整体而言比较优秀，对50-80级技能的单独提升率较高，如果特工在此等级范围内的技能的伤害占比较高的话，贝尔玛尔之剑也将成为圣耀之下的首选武器。</p><h2 id="重剑-恶魔协奏曲"><a href="#重剑-恶魔协奏曲" class="headerlink" title="重剑 恶魔协奏曲"></a>重剑 恶魔协奏曲</h2><figure class="image-box">                <img src="https://github.com/CGNz/blogimage/raw/master/DNF-456/szj.png" alt="恶魔协奏曲" title class>                <p>恶魔协奏曲</p>            </figure><p>​恶魔协奏曲可<strong>增加6%技能攻击力</strong>、<strong>6%力智</strong>、以及<strong>46%白字附加伤害</strong>；同时可<strong>增加6%三速、以及6%暴击率</strong>，并自<strong>带光、暗属性攻击</strong>。此武器每项效果的加成数值很有新意，一眼看去就会觉得它很“6”。职业佣兵的精通防具为重甲，这里就将防具设为娜迦王套装，上衣和头肩的强化或增幅等级设为+10。整合恶魔协奏曲的伤害加成效果：</p><p>技能攻击力+6%：此项效果直接乘算，提升率为6%。力量、智力+6%：其他百分比力智加成数值取作30%（黄金杯的18%、娜迦王腰带的12%），暂不考虑力智系数；提升率为<code>4.62%</code>（1.36/1.3）。</p><p>白字附加伤害+46%：其他白字伤害加成数值取作47%（+10娜迦王上衣的20%，称号、宠物及装备的27%）；不破招提升率为31.29%（1.93/1.47），白字双破招提升率为<code>36.22%</code>。最终得出重剑恶魔协奏曲的提升率为：</p><blockquote><p>1.06<em>1.0462</em>1.3129=<code>1.456</code>（不破招）</p></blockquote><blockquote><p>1.06<em>1.0462</em>1.3622=<code>1.5106</code>（白字双破招）</p></blockquote><p>恶魔协奏曲在不破招时的提升率为<code>45.6%</code>，在白字双破招时的提升率为<code>51.06%</code>，虽然佣兵的精通防具是重甲，但从他的技能形态和对速度要求方面来看，也不一定要选择娜迦王。但只要防具不是皮甲B套，恶魔协奏曲都算是一把比较优秀的武器，在<strong>白字双破招时的提升率略高于自制史诗重剑</strong>。</p><h2 id="源力剑-阿迪奥斯"><a href="#源力剑-阿迪奥斯" class="headerlink" title="源力剑 阿迪奥斯"></a>源力剑 阿迪奥斯</h2><figure class="image-box">                <img src="https://github.com/CGNz/blogimage/raw/master/DNF-456/sylj.png" alt="阿迪奥斯" title class>                <p>阿迪奥斯</p>            </figure><p>​阿迪奥斯可<strong>增加10%最终伤害、以及30%额外暴击伤害</strong>；<strong>攻击时有30%几率使所有职业50-85级技能等级+1，最多叠加2次</strong>。50-85级算是技能等级加成效果中的一个新的等级分布，这也会<strong>为此武器赋予一个较具新意的伤害加成能力</strong>。职业源能专家的精通防具是布甲，这里就将防具设为布甲B套。整合阿迪奥斯的所有伤害加成效果：</p><p>最终伤害+10%：其他最终伤害数值取作68%（光怪陆离套装的35%、+10氤氲之息的15%、英雄王的18%）；提升率为<code>5.95%</code>（1.78/1.68）。额外暴击伤害+30%：暴击伤害数值取作20%，其他额外暴击伤害取布甲B套腰带的16%；提升率为<code>22.06%</code>（1.66/1.36）。</p><p>50-85级技能等级+2：被动技能（两级2觉被动）提升率大约为3%，50-80级技能的单独提升大约为11%，85级技能的单独提升大约为26%。最后可得出阿迪奥斯的提升率为：</p><blockquote><p>1.0595<em>1.2206</em>1.03=<code>1.332</code>（1-45级技能）</p></blockquote><blockquote><p>1.0595<em>1.2206</em>1.03*1.11=<code>1.4785</code>（50-80级技能）</p></blockquote><blockquote><p>1.0595<em>1.2206</em>1.03*1.26=<code>1.6783</code>（85级技能）</p></blockquote><p>阿迪奥斯对1-45级技能的提升为<code>33.2%</code>，对50-80级技能的提升为<code>47.85%</code>，对85级技能的提升为<code>67.83%</code>。整体而言，<strong>此武器对小技能的提升相对不理想，对50-80级大技能的提升比较中规中矩，对85级二觉技能的提升十分可观</strong>。自制史诗源力剑的提升率也是比较不错的，至于这把武器和自制史诗到底谁更强一些，就要等源能专家二觉之后，根据各技能的伤害占比来进行判断了。</p><h2 id="总结-3"><a href="#总结-3" class="headerlink" title="总结"></a>总结</h2><p>​枪剑士的四把90级深渊史诗都算是各有各的特点，<strong>长刀的属性白字有着不错的发展空间，小太刀对50-80级大技能的提升较大，重剑的整体伤害提升率比较理想，源力剑有着可观的二觉伤害、对50-80级大技能的提升也不小</strong>。整体而言，这四把武器在<strong>属性设计方面还比较令人满意</strong>，<strong>每把都可以带着过渡到圣耀</strong>。</p>]]></content>
      
      
      <categories>
          
          <category> DNF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DNF </tag>
            
            <tag> 游戏策划 </tag>
            
            <tag> 游戏数值分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>超时空副本装备提升率分析</title>
      <link href="/2018/06/28/%E8%B6%85%E6%97%B6%E7%A9%BA%E8%A3%85%E5%A4%87%E6%8F%90%E5%8D%87%E7%8E%87%E5%88%86%E6%9E%90/"/>
      <url>/2018/06/28/%E8%B6%85%E6%97%B6%E7%A9%BA%E8%A3%85%E5%A4%87%E6%8F%90%E5%8D%87%E7%8E%87%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>超时空团队副本、以及团队副本的所有新史诗装备都已经在国服实装了，超时空副本史诗装备的强度应该是各位最关心的问题。在此次全新的团队副本中，我们可以获得新的武器、首饰、特殊装备，其中首饰的单件部位应该是沿用了韩服魔兽首饰的单件属性。想必各位最近都在为未来的装备搭配方向而感到担忧，要解决这个问题，还是要从这些新装备的提升率分析开始，那么这次就先对超时空首饰的提升率进行一个分析。</p><h1 id="超时空首饰介绍及提升率分析"><a href="#超时空首饰介绍及提升率分析" class="headerlink" title="超时空首饰介绍及提升率分析"></a>超时空首饰介绍及提升率分析</h1><h2 id="超时空首饰分析-装备搭配前提"><a href="#超时空首饰分析-装备搭配前提" class="headerlink" title="超时空首饰分析 装备搭配前提"></a>超时空首饰分析 装备搭配前提</h2><p>既然新装备都出了，那么在装备搭配前提上也不应该停滞不前，这里就将其他装备设为：<strong>七宗罪套装、圣耀武器、海伯伦套装</strong>。为了便于进行计算，海伯伦套装直接取触发“暗”的效果。下面就来看看超时空首饰的提升率到底怎么样。</p><h2 id="引力：万物之拥-项链"><a href="#引力：万物之拥-项链" class="headerlink" title="引力：万物之拥 项链"></a><strong>引力：万物之拥</strong> 项链</h2><figure class="image-box">                <img src="https://github.com/CGNz/blogimage/raw/master/DNF-456/neck.png" alt="引力：万物之拥" title class>                <p>引力：万物之拥</p>            </figure><p>​项链万物之拥可<strong>增加20%物理、魔法、独立攻击力</strong>，可增加<strong>5%双速、7%施放速度</strong>。属性构成十分简洁，将其他装备的百分比三攻加成数值取为39%（七宗罪下装+17%、黑暗祭礼+22%），项链的提升率为<code>14.39%</code>（1.59/1.39），就单件来说自然是很不错的，当然我们的分析重点并不在单件上，这里就不说太多了。</p><h2 id="光：无垠之昼-手镯"><a href="#光：无垠之昼-手镯" class="headerlink" title="光：无垠之昼 手镯"></a><strong>光：无垠之昼</strong> 手镯</h2><figure class="image-box">                <img src="https://github.com/CGNz/blogimage/raw/master/DNF-456/hand.png" alt="光：无垠之昼" title class>                <p>光：无垠之昼</p>            </figure><p>​手镯无垠之昼可<strong>增加20%技能攻击力</strong>，同样可增加<strong>5%双速和7%施放速度</strong>。手镯的提升率没有太多可计算的，常规技能攻击力直接乘算，20%加成数值的提升率就是20%，从单件的角度来看，这也是一件十分优秀的强散。</p><h2 id="暗：无限之夜-戒指"><a href="#暗：无限之夜-戒指" class="headerlink" title="暗：无限之夜 戒指"></a><strong>暗：无限之夜</strong> 戒指</h2><figure class="image-box">                <img src="https://github.com/CGNz/blogimage/raw/master/DNF-456/ring.png" alt="暗：无限之夜" title class>                <p>暗：无限之夜</p>            </figure><p>​戒指无限之夜可<strong>增加20%力智</strong>，在<strong>速度方面的加成与项链、手镯相同</strong>。其他装备的百分比力智加成数值取为15%（七宗罪上衣），忽略力智系数，戒指无限之夜的提升率为<code>17.39%</code>（1.35/1.15）；再在此提升率基础上考虑力智系数，将基础力量设为3500点，此时戒指的实际提升率为<code>16.23%</code>，这样的单件提升率仍然是十分理想的。</p><h2 id="套装-黑洞湮灭"><a href="#套装-黑洞湮灭" class="headerlink" title="套装 黑洞湮灭"></a>套装 黑洞湮灭</h2><figure class="image-box">                <img src="https://github.com/CGNz/blogimage/raw/master/DNF-456/six.png" alt="套装属性" title class>                <p>套装属性</p>            </figure><p>​这里暂且将套装效果看成由三件首饰凑成的[3]套装，可增加19%额外黄字伤害、以及19%额外暴击伤害。此时其他装备的黄字伤害加成数值为0，其他额外黄字伤害加成数值为15%（七宗罪鞋），那么19%额外黄字的提升率为<code>16.52%</code>（1.34/1.15）。</p><p>同样的，此时其他装备的暴击伤害加成数值为0，其他额外暴击伤害加成数值为25%（七宗罪套装），那么19%额外暴击伤害的提升率为<code>15.2%</code>（1.44/1.25）。由于超时空首饰单件和套装所加成的属性种类不同，这里就没必要再对其进行整合了，直接将前面的提升率计算结果相乘，可得出超时空史诗首饰套装的提升率为：</p><blockquote><p>1.1439<em>1.2</em>1.1623<em>1.1652</em>1.152=<code>2.1416</code></p></blockquote><p>超时空史诗首饰套装的提升率为<code>114.16%</code>，我们先不管这个数值是高还是低，本次分析的目的在于确定以后的首饰搭配方向，那么不得不将超时空首饰的提升率，与恍惚套的提升率在同等条件下做一个比较。</p><h2 id="恍惚套-提升率分析"><a href="#恍惚套-提升率分析" class="headerlink" title="恍惚套 提升率分析"></a>恍惚套 提升率分析</h2><p>​恍惚套已经是我们相当熟悉的装备了，我在分析时也就长话短说。在分析恍惚套时，必须考虑的是单件部位的强化、增幅等级，这里直接将其设为+12，只考虑强化等级对其本身属性的影响（即不考虑增幅带来的力量或者智力加成），那么此时恍惚套的属性以及它们所对应的提升率为：</p><p>技能攻击力+17.6%：此类效果直接乘算，同时启明星基础的5%与强化的12%乘算，提升率为<code>17.6%</code>（1.05*1.12）。</p><p>最终伤害+17%：其他装备的最终伤害加成数值为37%（七宗罪腰带+17%、王冠非冠+20%）；提升率为<code>12.41%</code>（1.54/1.37）。</p><p>物理、魔法、独立攻击力+17%：其他百分比三攻加成数值为39%，提升率为<code>12.23%</code>（1.56/1.39）。</p><p>黄字伤害+20%：额外黄字伤害为七宗罪鞋的15%，提升率为<code>17.39%</code>（1.35/1.15）。<br>暴击伤害+20%：额外暴击伤害为七宗罪套装的25%，提升率为<code>16%</code>（1.45/1.25）。</p><p>部分玩家在这里肯定会问，为什么要按加算的方式来计算黄字、暴击伤害的提升率；因为<strong>黄字伤害和额外黄字伤害之间本身就是加算关系</strong>（暴击伤害同理），尤其是在将计算前提装备设定好的情况下，更应该充分考虑这种加算关系，这里也不多说了。最后不难得出，相同条件下+10恍惚套的提升率为：</p><blockquote><p>1.176<em>1.1241</em>1.1223<em>1.1739</em>1.16=<code>2.0203</code></p></blockquote><p>只考虑装备本身的属性，此时+12恍惚套的提升率为102.03%，这在相同的装备条件下，比黑洞湮灭首饰套装的提升率低了6%（2.1416/2.0203）。或许部分玩家对恍惚套提升率的认识，还停留在最初搭配防具A套的阶段，随着防具B套中最终伤害、百分比三攻、额外黄字暴击伤害数值的上升，恍惚套的提升率确实是受到了一定的影响。</p><p>通过提升率分析可得出，即便是+12的恍惚套（只考虑装备本身属性），也略弱于超时空首饰三件；当然，这仅仅是在七宗罪套装的搭配下所得出的结果，在防具不同时，超时空首饰、恍惚套各自的提升率都会发生一定的变化。但不管怎么变，在防具B套、海伯伦套装的搭配下，超时空首饰的提升率基本是大于等于+12恍惚套的。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>如果超时空首饰的属性确确实实是<strong>最强首饰套装</strong>。当然，其在制作方式上，也是通过恍惚套、星空套或者三无尽升级。总的说来，超时空首饰三件套虽然略强于恍惚套，但二者的差距并不大，其实可以勉强将二者并称为最强首饰套装。</p><p>并且两套首饰在属性加成的侧重点上有一些不同，出于对以后未知新装备的搭配考虑，各位可以在装备条件允许的情况下，保留已经打造好的恍惚套，用星空套或者三无尽来升级超时空首饰。</p><h1 id="超时空特殊装备三件套介绍及提升率"><a href="#超时空特殊装备三件套介绍及提升率" class="headerlink" title="超时空特殊装备三件套介绍及提升率"></a>超时空特殊装备三件套介绍及提升率</h1><ul><li>超时空特殊装备三件套提升率分析，与海伯伦孰强孰弱？</li></ul><p>这两天已经为各位分析过超时空武器和首饰的提升率了，那么本次就最后来说一下超时空特殊装备的提升率，也算是以此来为超时空装备的分析暂时地画上一个句号。在超时空的所有史诗装备中，特殊装备属性的确定时间是最早的，想必各位具备计算能力的玩家对此装备的提升能力已经有了一定的见解。令大部分玩家困惑的，应该是超时空特殊装备与海伯伦套装的强弱关系，以及涉及到特殊装备的装备搭配问题，那么下面我就从超时空特殊装备与海伯伦套装进行对比的角度出发，全面地分析一下这些问题。</p><h2 id="超时空特殊装备分析-装备搭配前提"><a href="#超时空特殊装备分析-装备搭配前提" class="headerlink" title="超时空特殊装备分析 装备搭配前提"></a>超时空特殊装备分析 装备搭配前提</h2><p>在分析超时空特殊装备的提升率时，仍然要将首饰设为恍惚套。虽然我们已经得知超时空首饰略强于恍惚套，但超时空首饰与超时空特殊装备是同一套装备，它们共同拥有[3]套装和[5]套装效果，在分析时无法准确地去确定分析所用到的基础属性，所以仍然要将首饰设为<strong>恍惚套</strong>，这里就将<strong>强化或增幅等级设为+12</strong>。防具仍然选为<strong>七宗罪套装</strong>，武器还是<strong>圣耀</strong>，下面就具体来计算一下超时空特殊装备的提升率。</p><h2 id="时：永恒凝滞-辅助装备"><a href="#时：永恒凝滞-辅助装备" class="headerlink" title="时：永恒凝滞 辅助装备"></a><strong>时：永恒凝滞</strong> 辅助装备</h2><figure class="image-box">                <img src="https://github.com/CGNz/blogimage/raw/master/DNF-456/left.png" alt="时：永恒凝滞" title class>                <p>时：永恒凝滞</p>            </figure><p>​辅助装备永恒凝滞有着标准数值的四维加成，可增加20点属强、以及14%额外黄字伤害。将角色属强数值设为220点，忽略怪物的属抗，并且此时没有属性白字装备，那么20点属强的提升率为<code>4.55%</code>（20/440）。</p><p>然后是14%额外黄字伤害：黄字伤害取恍惚套的20%，其他额外黄字伤害取七宗罪鞋的15%，那么这条效果的提升率为10.37%（1.49/1.35）。最后可以很容易地得出，永恒凝滞忽略基础力智后的单件提升率为<code>15.39%</code>（1.1037*1.0455）。仅从单件装备来看，此提升率并不理想，只算是85-90级史诗辅助装备的中等水平，但这套装备的意义也不在于单件，这里只是顺带提一提，各位不用放在心上，主要看得是套装。</p><h2 id="空：虚无之渊-魔法石"><a href="#空：虚无之渊-魔法石" class="headerlink" title="空：虚无之渊 魔法石"></a><strong>空：虚无之渊</strong> 魔法石</h2><p><img src="https://github.com/CGNz/blogimage/raw/master/DNF-456/right.png" alt="空：虚无之渊"></p><p>​魔法石虚无之渊可增加75点所有属性强化，和无尽贪食之源有些相似（超时空魔法石多5点属强）。同样将基础属强数值设为220点，忽略敌人属抗，无属性白字装备的存在；魔法石的提升率为<code>17.05%</code>（75/440）。就单件提升率而言还算不错，但也没有必要为了单件属性而去制作它。</p><h2 id="破：万物皆灭-耳环"><a href="#破：万物皆灭-耳环" class="headerlink" title="破：万物皆灭 耳环"></a><strong>破：万物皆灭</strong> 耳环</h2><p><img src="https://github.com/CGNz/blogimage/raw/master/DNF-456/ear.png" alt="破：万物皆灭"></p><p>​耳环万物皆灭可增加20点所有属性强化、以及14%额外暴击伤害。在属性的结构上与辅助装备有些相似，首先20点属强在相同属强数值设置下的提升率也为4.55%。然后对这14%额外暴击伤害而言，此时其他装备的暴击伤害数值为20%，其他额外暴击伤害数值为25%（七宗罪套装），那么这条效果的提升率为<code>9.66%</code>（1.59/1.45）。最后不难得出，超时空耳环的单件提升率为14.65%（1.0966*1.0455）。</p><ul><li>其实计算单件提升率的意义不大，因为单件的属强数值、额外黄字伤害数值等，最后都是要在整体分析时用总和来计算的。这里之所以算一下单件，也只想说明一下超时空特殊装备的单件属性并不强，在搭配还不完整的情况下，单件没有太大的使用意义。下面还是主要来看一下单件与套装属性的整合：</li></ul><h2 id="超时空特殊装备三件套-属性分析"><a href="#超时空特殊装备三件套-属性分析" class="headerlink" title="超时空特殊装备三件套 属性分析"></a>超时空特殊装备三件套 属性分析</h2><p>​超时空特殊装备三件套总共可增加115点所有属性强化、33%额外黄字伤害、33%额外暴击伤害；由于四维加成都是标准数值，这里就不纳入计算中了。总的说来属性构成比较简单，整合每条属性以及它们所对应的提升率：</p><p>所有属性强化+115点：基础属强数值仍然设为220点，不计敌人属性抗性，不带属性白字装备；提升率为<code>26.14%</code>（115/440）。额外黄字伤害+33%：黄字伤害取恍惚套的20%，其他额外黄字伤害仍然取七宗罪鞋的15%；提升率为<code>24.44%</code>（1.68/1.35）。额外暴击伤害+33%：暴击伤害也取恍惚套的20%，其他额外暴击伤害取七宗罪套装的25%；提升率为<code>22.76%</code>（1.78/1.45）。最后可以很轻松地得出，在七宗罪套装、恍惚套的搭配下，超时空特殊装备三件套的提升率为：</p><blockquote><p>1.2614<em>1.2444</em>1.2276=<code>1.9269</code></p></blockquote><p>在此搭配下的超时空特殊装备提升率为92.69%，我们仍然不急着评判此数值的高低，为了更加直观地感受超时空特殊装备的提升率，下面就在相同的装备搭配下，分析一下海伯伦套装的提升率。</p><h2 id="海伯伦套装-提升率分析"><a href="#海伯伦套装-提升率分析" class="headerlink" title="海伯伦套装 提升率分析"></a>海伯伦套装 提升率分析</h2><p>​因为海伯伦套装不是本次分析的主角，我在分析时也就长话短说了，计算时直接将触发效果取为黑暗荣耀。海伯伦套装可增加高出特殊装备标准数值的337点四维（王冠高出82点、祭礼高出55点、套装+200点）：以物理职业为例，基础力量数值设为3000点，单刷提升率为<code>10.37%</code>（337/3250）。</p><p>最终伤害+20%：其他最终伤害数值为34%（七宗罪腰带+17%，+12氤氲之息+17%），提升率为<code>14.93%</code>（1.54/1.34）。物理、魔法、独立攻击力+22%：其他百分比三攻加成数值取作34%（七宗罪下装+17%，+12清泉流响+17%），提升率为<code>16.42%</code>（1.56/1.34）。技能攻击力+32%（王座本源+10%，黑暗荣耀+20%，二者乘算）：此类效果相互之间直接乘算，所以提升率为<code>32%</code>（1.1*1.2）。</p><p>可使1-85级技能等级+1：被动技能部分的提升率记为5%，对1-45级技能的提升大约记为4%，对50-80级技能的提升大约记为5.5%，对85级技能的提升记为15%。最后得出海伯伦套装（暗）的提升率为：</p><blockquote><p>1.1037<em>1.1493</em>1.1642<em>1.32</em>1.05*1.04=<code>2.1287</code>（1-45级技能）</p></blockquote><blockquote><p>1.1037<em>1.1493</em>1.1642<em>1.32</em>1.05*1.055=<code>2.1594</code>（50-80级技能）</p></blockquote><blockquote><p>1.1037<em>1.1493</em>1.1642<em>1.32</em>1.05*1.15=<code>2.3538</code>（85级技能）</p></blockquote><p>海伯伦套装（暗）对1-45级技能的提升率大约为112.87%，对50-80级技能的提升率大约为115.94%，对85级技能的提升率大约为135.38%。由此可以看出，在板甲B套的搭配下，海伯伦套装（暗）至少比超时空三件套强10%，在二觉单技能伤害上则强了22%。所以由目前的分析可知，在防具是板甲B套时，仍然是海伯伦（暗）强一些。</p><h2 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h2><p>​随着防具的改变，装备中所对应加算属性的基础数值也会发生改变，所以在五套防具B套下得出的提升率结果并不相同，但海伯伦强于超时空的结论可以确定能适用于布甲、轻甲、板甲；我在皮甲和重甲方面还未进行计算，但即便皮甲、重甲之下的超时空略强于海伯伦，今后最优搭配仍然是超时空首饰加海伯伦，制作海伯伦绝对是没错的。</p><p>另外还有一种<strong>超时空5件、加一件提升率较高的单件</strong>的搭配方式，对此我也暂时没有进行计算，这个算起来会比较复杂，因为单件装备的不同会使提升率出现很多种结果，如果各位比较想知道这个问题的话，我在这段时间内也可以准备分析一下。最后还是那句话: <strong>海伯伦不会被超时空3打败</strong>，制作海伯伦套装仍然是未来装备发展的一个大方向。</p><h1 id="地狱拓荒者武器介绍及分析"><a href="#地狱拓荒者武器介绍及分析" class="headerlink" title="地狱拓荒者武器介绍及分析"></a>地狱拓荒者武器介绍及分析</h1><ul><li>地狱拓荒者对二觉技能的加成虽高，整体伤害却比不上圣耀</li></ul><p>地狱拓荒者武器的属性到现在已经确定，地狱拓荒者对二觉技能有着十分优秀的单独提升，同时在对整体伤害的加成方面也有技能攻击力和白字附加伤害的支撑。</p><p>但问题在于，在比较地狱拓荒者与圣耀武器的强弱时，应该如何将地狱拓荒者对二觉的等级加成体现到整体提升率上呢？在这方面我也是思考了很久，最后找到了一个相对合理的方法来解决此问题。那么这里先不说太多，下面就先对地狱拓荒者武器的提升率进行一个详细的分析。</p><h2 id="地狱拓荒者提升率分析-装备搭配前提"><a href="#地狱拓荒者提升率分析-装备搭配前提" class="headerlink" title="地狱拓荒者提升率分析-装备搭配前提]"></a>地狱拓荒者提升率分析-装备搭配前提]</h2><p>只要角色的卢克团本进度正常，在获得地狱拓荒者武器之时，装备应该已经是防具B套和海伯伦套装了，所以这里也将装备搭配前提设为：七宗罪套装、恍惚套、海伯伦套装（计算时默认触发“暗”）。至于首饰或者特殊装备是超时空史诗的搭配情况，就等进度到那里的时候再说。</p><h2 id="地狱拓荒者武器-属性分析"><a href="#地狱拓荒者武器-属性分析" class="headerlink" title="地狱拓荒者武器 属性分析"></a>地狱拓荒者武器 属性分析</h2><figure class="image-box">                <img src="https://github.com/CGNz/blogimage/raw/master/DNF-456/hell.png" alt="地狱拓荒者武器" title class>                <p>地狱拓荒者武器</p>            </figure><p>​地狱拓荒者武器可增加<strong>39%技能攻击力</strong>、以及<strong>10%白字附加伤害</strong>；<strong>攻击时有50%几率使85级技能等级+1，最高可+3</strong>；赋予自身最高属强所对应的属性攻击。除圣骑士的十字架之外，所有职业地狱拓荒者武器的伤害加成属性相同。整合地狱拓荒者武器的所有伤害提升效果：</p><p>技能攻击力+39%：乘算属性，提升率直接记为<code>39%</code>。白字附加伤害+10%：其他装备的白字加成数值取作42%（白字称号+10%，宠物和宠物装备+17%，七宗罪头肩+15%）；不破招提升率为<code>7.04%</code>（1.52/1.42），白字二次破招提升率为<code>8.2%</code>。85级技能等级+3：下面先详细地说一说这条效果的计算方式。</p><p>​在等级加成效果的提升率计算中，需要用到对应技能在对应等级差时的面板数据。以帕拉丁的二觉技能为例，在有契约的情况下，二觉技能可学习3级，如果没有穿戴其他增加二觉等级的装备，那么可将二觉等级的基准看作3级。帕拉丁3级二觉的百分比为151843%，4级二觉的百分比为175898%，此时可以得出，在二觉等级基准为3级的情况下，1级等级加成所带来的提升为：</p><blockquote><p>1759.98/1519.43=<code>1.1583</code></p></blockquote><p>在二觉的原本等级为3的情况下，1级等级加成对二觉的单独提升为15.83%。在所设装备前提下，若时装上衣的技能加成没有选为二觉，那么二觉的基础等级应该为4级（契约下可学习3级，王座本源+1级）。此时用7级二觉的百分比与4级二觉的百分比，在相同的计算方法下，即可得出地狱拓荒者3级等级加成对二觉的单独提升，结果大约为41%。那么可以得出地狱拓荒者的提升率为：</p><p>整体伤害：</p><blockquote><p>1.39<em>1.0704 或 </em>1.082=<code>1.4879</code>（不破招）或<code>1.504</code>（白字二次破招）</p></blockquote><p>二觉伤害：</p><blockquote><p>1.39<em>1.41</em>1.0704 或 *1.082=<code>2.098</code>（不破招）或<code>2.1206</code>（白字二次破招）</p></blockquote><p>地狱拓荒者在不破招时对整体伤害的提升为<code>48.79%</code>，对二觉的单独提升为<code>109.8%</code>；在白字二次破招时对整体伤害的提升为<code>50.4%</code>，对二觉的单独提升为<code>112.06%</code>。</p><p>就对整体伤害50%左右的提升而言，地狱拓荒者只是<strong>基本达到了90级自制史诗或者深渊史诗的水准</strong>；就对二觉伤害110%左右的提升而言，地狱拓荒者则是<strong>目前所有武器中最强</strong>的。在二觉的单技能伤害上、尤其是在<strong>追求二觉单技能秒杀时，地狱拓荒者与其他武器比起来有着绝对的优势</strong>。</p><p>但随着今后副本中怪物HP数值的增加，单技能秒杀对大部分玩家而言都会越来越难，那么就必须要考虑到整体提升率了。但是地狱拓荒者武器对二觉的单独提升，应该用何种方式来将其转换进整体提升率中呢？</p><h3 id="二觉单独提升率的转换"><a href="#二觉单独提升率的转换" class="headerlink" title="二觉单独提升率的转换"></a>二觉单独提升率的转换</h3><p>​首先在修练场中将每个输出技能使用一次，以此来简单得出每个技能在伤害中的占比。当然，不同职业的占比情况是不一样的，所以我在这里只能做一种大约的转换；并且这种方式没有将冷却时间考虑在内，比如一些冷却时间短的技能，在一次完整的输出过程中往往会被用到多次，这也会影响各个技能的伤害占比。对帕拉丁而言，<strong>二觉的伤害占比大约为23%</strong>，我们将总伤害假设为100点，按白字二次破招的情况来进行考虑，在带入地狱拓荒者的提升率之后，总伤害会上升至：</p><blockquote><p>100<em>（23%</em>2.1206+77*1.5123）=<code>165.22</code></p></blockquote><p>这时可以得出，在各技能的使用次数均为1的输出过程中，地狱拓荒者将二觉单独加成转换成整体加成之后的提升率为<code>65.22%</code>。但是在一次完整的输出过程中，随着冷却时间较短的技能的多次使用，二觉的伤害占比会降低；与之对应的，地狱拓荒者将二觉转换进整体的提升率也会降低，所以这里的提升率结果并不是固定的。下面还是从提升率计算的层面，对比一下地狱拓荒者和圣耀救赎武器。</p><h2 id="圣耀救赎武器-属性分析"><a href="#圣耀救赎武器-属性分析" class="headerlink" title="圣耀救赎武器 属性分析"></a>圣耀救赎武器 属性分析</h2><p>​除圣骑士的十字架之外，圣耀武器可增加40%技能攻击力，在开启魔能后可再增加22%技能攻击力。基础40%与魔能22%乘算，所以圣耀救赎武器的提升率为<code>70.8%</code>（1.4*1.22），强于转换二觉伤害之后的地狱拓荒者。</p><p>这里需要再次强调，地狱拓荒者通过转换二觉伤害所得出的提升率并不是固定或准确的，会随实战中各技能使用次数的变化而变化。这里为了使两把武器的比较结果更加清楚，就按具体技能来算一下二者的差距。</p><p>将地狱拓荒者武器的提升率取作白字二次破招时的数值，在<strong>1-80级技能上</strong>，圣耀救赎武器比地狱拓荒者强<code>13.56%</code>（1.708/1.504）；在<strong>二觉单技能伤害</strong>上，地狱拓荒者比圣耀救赎武器强<code>24.16%</code>（2.1206/1.708）。这样一来，我们就可以根据自己职业二觉伤害的占比，来对两把武器做出选择了。</p><h2 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h2><p>​其实在除了二觉单技能秒杀的情况之外，圣耀救赎武器都是要比地狱拓荒者强的，并且今后副本中的怪物在HP和防御力方面只会越来越高，即便我们现在可以在队伍顶配的情况下用二觉秒掉卢克副本中的任何怪物，但在今后的副本中，这种情况只会越来越少。到那时，装备之间的比较会越来越倾向于二者整体提升率的比较。</p><p>对部分技能单独提升高的装备，在对伤害整体提升高的装备面前，可能会越来越显得无力。所以从装备和副本的发展方向来看，还是建议各位<strong>将圣耀武器作为长远使用的武器</strong>。</p>]]></content>
      
      
      <categories>
          
          <category> DNF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DNF </tag>
            
            <tag> 游戏数值分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>超时空副本怪物打法</title>
      <link href="/2018/06/28/%E8%B6%85%E6%97%B6%E7%A9%BA%E5%89%AF%E6%9C%AC%E6%80%AA%E7%89%A9%E6%89%93%E6%B3%95/"/>
      <url>/2018/06/28/%E8%B6%85%E6%97%B6%E7%A9%BA%E5%89%AF%E6%9C%AC%E6%80%AA%E7%89%A9%E6%89%93%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<ul><li>对寻路和打怪都比较生疏的你，该如何攻坚超时空副本？</li></ul><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在超时空副本开放之后，各位玩家都已经全身心地投入了副本的开荒之中，首次开团就直接通关的玩家不在少数，但相对而言，或许有更多玩家面临的是一次又一次的攻坚失败。实不相瞒，我在第一天下午与自己团里的玩家们开荒时，也连续失败了四次，但同时也在这几次失败中加深了对超时空副本的理解。</p><p>就现在而言，在队员之间不缺乏沟通的前提下，基本能将通关时间控制在20分钟左右。那么下面就尽我所能，为各位讲解一下我在超时空副本中所理解到的经验与方法，希望能为还不熟悉这个副本的玩家们带来一点帮助。</p><h1 id="超时空副本-整体攻坚流程"><a href="#超时空副本-整体攻坚流程" class="headerlink" title="超时空副本 整体攻坚流程"></a>超时空副本 整体攻坚流程</h1><p>​我们在开荒时所遇到的一个关键问题，就是<strong>不知道该打哪儿</strong>。简单说来，在超时空副本中必须拿下的地图是：至少<strong>一个前哨</strong>、<strong>三个兵营</strong>、<strong>Boss</strong>。前哨会阻断我们去兵营的路，只要拿掉一个前哨，就可以从这个前哨直接绕路走到三个兵营中（小地图中的“实线”和“虚线”都表示地图之间有路可走）；但是前哨会定期召唤“可行走”的小怪，如果这个小怪行走到基地门口，会直接造成攻坚失败的结果，所以在不能保证兵营和Boss的通关效率时，最好还是将三个前哨都打掉。</p><p>三个兵营是必须要打的，只有这样才可以进入Boss地图。除此之外，特殊地图<strong>雷达</strong>与<strong>炮塔</strong>也存在较大的攻坚意义：打掉雷达之后，可以<code>增加我方队员10%技能攻击力</code>，同时能够探测到每个小地图Boss的具体种类。打掉炮塔之后，可以<code>减少敌人10%防御力</code>。在队伍配置不高、或者熟练度不足的情况下，不建议放弃雷达和炮塔。</p><p>对熟练程度相对较低的团队而言，个人建议的路线是：开局兵分两队，分别直奔上、下两路的雷达和炮塔，接着顺路打掉两路的前哨，然后行动较快的队伍去打掉中路前哨。消除前哨带来的威胁之后，再安心地去打兵营。在熟练度和配置相对不足时，不建议采取“只打一路前哨，绕道打兵营”的打法。</p><p>接着根据队伍配置、以及队员对怪物机制的掌握情况，来分配兵营三恶魔的攻坚方式。拿下三个兵营之后直接进入Boss（一支队伍进入纯白、另一只进入黑暗），两支队伍同时击杀Boss之后即可完成攻坚（纯白与黑暗之间存在联动机制）。下面就来具体讲一下[机制相对复杂]的怪物的击杀方式。</p><h1 id="怪物机制详解"><a href="#怪物机制详解" class="headerlink" title="怪物机制详解"></a>怪物机制详解</h1><h2 id="前哨Boss：引力恶魔-修丁厄（绿狗）"><a href="#前哨Boss：引力恶魔-修丁厄（绿狗）" class="headerlink" title="前哨Boss：引力恶魔-修丁厄（绿狗）"></a>前哨Boss：引力恶魔-修丁厄（绿狗）</h2><p>​全队在进入修丁厄所在房间之后，会进入沉默状态；此时一名队员捡起地上的[绿珠]，即可解除自身沉默状态，同时会触发[能量立方体施释放读条]。在读条期间，修丁厄会一直处于无敌状态，读条结束之后，修丁厄解除无敌并进入虚弱状态，之后即可开始输出。</p><p>捡起绿珠的<strong>角色的MP数值会持续减少</strong>（到0之后，HP会开始减少）。队员之间需要在能量立方体释放期间进行<strong>绿珠互传</strong>，建议的传递顺序</p><blockquote><p>光兵&gt;&gt;输出相对较低的C&gt;&gt;奶爸&gt;&gt;输出相对更高的C</p></blockquote><p>之所将奶爸放在主C之前，是为了让奶爸在将绿珠传出去之前<strong>放出一觉</strong>，然后主C接到绿珠，直接打出最大化的伤害。</p><p>此Boss比较考验队友之间的配合，路人团打这只怪物时，在缺少沟通的情况下会比较吃力；建议在进图之前，队员们先商量好传递绿珠的顺序（保证让伤害最高的C在最后接到绿珠即可）。</p><h2 id="前哨Boss：人类背叛者-宾柏"><a href="#前哨Boss：人类背叛者-宾柏" class="headerlink" title="前哨Boss：人类背叛者-宾柏"></a>前哨Boss：人类背叛者-宾柏</h2><p>​宾柏有着魔枪士的外形，会使用魔枪士四个转职的部分技能。此怪物在进图之后可以直接输出，但此怪物的HP数值较高，并且在施放部分技能时会进入无敌状态，队伍伤害不够的话，建议等它交出大招并进入虚弱状态之后再开始输出。</p><p>宾柏放出决战者的技能<code>狂龙怒啸</code>之后，会飞上天并朝地面发动秒杀攻击，它起飞之前会将所有角色震到在地，角色可以通过施放<code>受身蹲伏</code>来躲过秒杀攻击。宾柏落地之后会进入虚弱状态（防御力降低），此时全力对它进行输出就行了。</p><h2 id="前哨Boss：宇宙粉碎机-克鲁瑟"><a href="#前哨Boss：宇宙粉碎机-克鲁瑟" class="headerlink" title="前哨Boss：宇宙粉碎机-克鲁瑟"></a>前哨Boss：宇宙粉碎机-克鲁瑟</h2><p>前哨另外一个Boss（宇宙粉碎机）的机制相对要简单一点，根据它所呈现出的颜色，打掉对应颜色的小怪，在小怪被全部打掉之后即可破防，这里就不再多说了。</p><h2 id="兵营Boss：重力恶魔-白斯"><a href="#兵营Boss：重力恶魔-白斯" class="headerlink" title="兵营Boss：重力恶魔-白斯"></a>兵营Boss：重力恶魔-白斯</h2><p>​重力恶魔是三恶魔中机制最简单的，要说难点的话，就是HP数值相对较高。进图之后可以直接对重力恶魔进行输出，但与背叛者宾柏相似的是，普通状态下的重力恶魔相对较肉，对伤害不足的队伍而言，建议一边躲避它的攻击、一边用小技能输出，等它进入虚弱状态之后，再用大技能来输出。</p><p>重力恶魔在放完所有小技能之后，会放出可以召唤陨石的大招，小型陨石可用通过走位来躲避；最后的大型陨石带有秒杀能力，在它下落的前一刻，全队会被震到在地，接着仍然是通过施放<code>受身蹲伏</code>来躲避最后的秒杀攻击。此技能结束之后，重力恶魔进入虚弱状态（防御力降低），然后全队即可开始全力输出。</p><h2 id="兵营Boss：暗之恶魔-艾森"><a href="#兵营Boss：暗之恶魔-艾森" class="headerlink" title="兵营Boss：暗之恶魔-艾森"></a>兵营Boss：暗之恶魔-艾森</h2><p>​暗之恶魔的机制要稍微复杂一点，我们进图之后面对的是它的初始形态，此时可以直接输出，在打掉2500条左右的血量时，会触发暗之恶魔的机制。触发机制之后，地图会变黑，暗之恶魔会在黑暗中朝角色发动攻击。</p><p>在每次攻击之前，暗之恶魔会先闪现出一个“红点”，看到红点之后，角色需要让暗之恶魔受到单Hit攻击，每成功一次，地图上就会出现一道光柱。当地图出现四道光柱时，暗之恶魔的隐身攻击会停止，与此同时，四道光柱会开始发生位移，角色需要跟随光柱的位移，保证自己时刻站在光柱内（角色一旦离开光柱，就会进入僵直状态，HP会持续减少）。在跟随光柱行走一段时间后，四道光柱会在暗之恶魔的初始位置聚集在一起，之后暗之恶魔便会以虚弱状态现形，接着对它进行输出即可。</p><h2 id="兵营Boss：光之恶魔-欧格里"><a href="#兵营Boss：光之恶魔-欧格里" class="headerlink" title="兵营Boss：光之恶魔-欧格里"></a>兵营Boss：光之恶魔-欧格里</h2><p>​光之恶魔算是副本开荒阶段最难打的一个Boss，虽然它的机制也是单Hit抓破招，但由于每轮破招受读条时间的限制，会让人产生一种紧迫感。进图之后仍然是先进行直接输出，在打掉大约十分之一血量后，会触发光之恶魔的机制。</p><p>机制触发后，屏幕上会出现<strong>五个光珠</strong>，同时出现光之恶魔的读条。我们需要在光之恶魔发动攻击、头部出现闪光的一瞬间，让它受到单Hit攻击，每成功一次，即可减少一颗光珠。在读条时间内减少五颗光柱，即可让光之恶魔进入虚弱状态。</p><p>同时，如果没有在读条时间内打掉五颗光珠，还可以通过打接下来的<strong>分身</strong>来进行补救，打到一个分身，仍然会减少一颗光珠。如果在分身阶段补救失败的了话，光之恶魔就会发动全屏的魔法阵攻击，并在攻击结束之后重新生成五个光珠，一切又得从头开始。所以光之恶魔的击杀难点，在于抓破招打光珠的效率，效率较低的话，就会使抓破招的机制一直循环下去，从而一直不能对光之恶魔进行输出。</p><h2 id="超时空Boss：宇宙恶魔-罗什"><a href="#超时空Boss：宇宙恶魔-罗什" class="headerlink" title="超时空Boss：宇宙恶魔-罗什"></a>超时空Boss：宇宙恶魔-罗什</h2><p>​宇宙恶魔虽然是超时空副本的最终Boss，但它的击杀难度并不是很大。首先，两只队伍需要同时进入两个Boss地图（纯白与黑暗），纯白和黑暗之间存在联动机制。宇宙恶魔一共有五种机制形态，分别是：风、火、冰、属性宝石、棕色地板，前面四种机制中的Boss都是以<strong>分身</strong>的形态出现。</p><p><code>风、火、冰</code>形态的分身在击杀方面没有难度，我们只需要通过走位来避开攻击，一段时间后分身会自己进入虚弱状态（冰分身没有虚弱状态，需要边躲边打），此时将其击杀即可。[属性宝石]形态的分身在击杀时稍微有一点讲究，我们需要将地图中的所有宝石打成同一颜色，在此之后分身会进入虚弱状态，但只能用与属性宝石颜色相同的属性攻击来对它进行输出（比如红色宝石对应火属性攻击）。</p><p>​每当两支队伍共同通过四次机制时（有可能是A3次、B1次；也有可能是A2次、B2次），宇宙恶魔的真身就会以虚弱形态出现，此时便可对它进行伤害输出，如果在虚弱状态的持续时间内没有将宇宙恶魔击杀，就会再一次进入它的[分身]机制，此时两支队伍则需要再次通过三次机制。那么棕色地板是怎么回事呢？</p><p>假设A队遇到的机制依次是：风&gt;&gt;火，B队遇到的机制依次是：冰&gt;&gt;属性宝石；如果A队在打完分身之后遇到了棕色地板，则表示B队此时还未通过属性宝石机制。在B队通过属性宝石的机制后，A、B两队所在地图中的宇宙恶魔会以虚弱形态同时出现，此时两队需要同时对它进行伤害输出。</p><p>当宇宙恶魔的虚弱时间结束后，如果两队的任意一方没有将宇宙恶魔的HP减少到1%，宇宙恶魔都会重新发动分身机制，并将自身HP进行平均分配（比如A队还剩1%，B队还剩39%，接下来都会变成20%）。所以在攻打宇宙恶魔时，两支队伍需要尽量做到同步，即便不能及时沟通，也需要在宇宙恶魔的机制方面形成一种默契。一支队伍的失误不仅会拖慢自己队伍的击杀速度，还会使另一支队伍进入漫长等待中。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>在超时空副本开放的初阶段，能讲的就只有这么多了。因为担心部分玩家会因为“太长”而不看，一些机制相对简单的怪物，我在这里就没有讲到。在没有讲到的怪物中，基本上只有<strong>雷达</strong>的机制是需要稍微注意一下的（简单说来就是：吃红罩就打蓝怪，吃蓝罩就打红怪）。</p>]]></content>
      
      
      <categories>
          
          <category> DNF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DNF </tag>
            
            <tag> 游戏数值分析 </tag>
            
            <tag> 游戏攻略 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>游戏数值对玩家游戏体验的影响</title>
      <link href="/2018/06/28/%E6%B8%B8%E6%88%8F%E6%95%B0%E5%80%BC%E5%AF%B9%E7%8E%A9%E5%AE%B6%E6%B8%B8%E6%88%8F%E4%BD%93%E9%AA%8C%E7%9A%84%E5%BD%B1%E5%93%8D/"/>
      <url>/2018/06/28/%E6%B8%B8%E6%88%8F%E6%95%B0%E5%80%BC%E5%AF%B9%E7%8E%A9%E5%AE%B6%E6%B8%B8%E6%88%8F%E4%BD%93%E9%AA%8C%E7%9A%84%E5%BD%B1%E5%93%8D/</url>
      
        <content type="html"><![CDATA[<ul><li>本文撰写的时间较早，后续对DNF游戏系统及机制有更深入的理解，详细可见博客的另一篇文章<a href="https://cgnz.github.io/2018/06/12/%E5%86%99%E5%9C%A8DNF%E5%8D%81%E5%91%A8%E5%B9%B4/" target="_blank" rel="noopener"><strong>《写在DNF十周年》</strong></a></li></ul><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>绝大多数游戏都存在着两个循环：角色属性养成积累循环和玩家技能提升循环。对于大多数角色扮演类的网络游戏来说，主要还是在于角色属性的养成循环。而决定游戏角色的成长最为关键的就是数值的成长，良好的数值成长能够决定许多玩家的游戏体验，进而影响到游戏发展和收益。从两款角色扮演游戏（龙之谷、地下城与勇士）及英雄联盟部分百分比增益属性进行粗浅分析。</p><h1 id="DN-单个属性的极端成长"><a href="#DN-单个属性的极端成长" class="headerlink" title="DN-单个属性的极端成长"></a>DN-单个属性的极端成长</h1><p>龙之谷中，玩家的攻击属性除了常规的三维（力量、敏捷、智力）分别对不同职业有着不同的加成，属性攻击、以及致命一击（即暴击，上限89％）外，还有着一个在所有伤害计算的最后在进行加成的属性——最终伤害。最终伤害应用于所有攻击加成计算之后，计算在致命一击之后，致命一击仅仅是将伤害翻倍。最终伤害可以堆到100%。即在忽视防御属性的时候，玩家打出了10000伤害后，如果暴击，则会造成20000伤害，而在这些计算之后，才会计算最终伤害，如果最终伤害堆到100％后，则会将伤害再度翻倍到40000。而且对于属性伤害也是累计的乘算。可以说最终伤害可以将玩家之间差距翻倍也是每个玩家都可以堆叠出一定的最终伤害值来提升自己伤害。</p><figure class="image-box">                <img src="https://github.com/CGNz/blogimage/raw/master/DNF-DN/DN.png" alt="龙之谷最终伤害数值与收益率曲线图（80级）" title class>                <p>龙之谷最终伤害数值与收益率曲线图（80级）</p>            </figure><p>但是，最终伤害的堆叠曲线对于普通的平民玩家是很不友好的。在大多数人都能达到的最终伤害值的情况下，超过质变点，最终伤害的转换的收益是比较低的，而能够通过一些昂贵的特殊再往上堆叠数值后，最终伤害的收益才会成倍数的增长，可以说有了最终伤害这个属性，让这款游戏玩家之间有了质的差距，也让“充钱”的收益变得更加立竿见影。</p><h1 id="DNF-多属性的缓和稀释"><a href="#DNF-多属性的缓和稀释" class="headerlink" title="DNF-多属性的缓和稀释"></a>DNF-多属性的缓和稀释</h1><p>在地下城与勇士中，85版本的伤害词缀有伤害增加（黄字）、暴击伤害增加（爆伤）以及附加伤害（白字），其中前两者都是会冲突的属性（只会取身上装备属性的最高者），而附加伤害则是相互加算的，而且会因为加算的变多而受益递减，即所谓的稀释、边际效应。<br>而到了90版本后，增加了多种伤害机制，有额外增伤，额外爆伤，最终伤害（所攻），技能攻击力和攻击力增加（三攻），此外还有特殊减益机制无视防御力和减少防御力。额外增伤、爆伤、最终伤害、三攻加成都是加算，因而存在属性值较高时的稀释。而技能攻击力则是相互乘算，不存在稀释，因而属性值也显得十分珍贵。再看减益，无视防御也是取最高值，而减防，则是相互乘算。结合免伤率公式，乍看之下可以将通过减防效果的叠加敌人的防御力下降到0，实现所谓的“十倍增伤”，但是这个小漏洞很快就被修复了，在团本和高级的副本中敌人的防御力不会低于一定值，即所谓的减防下限。总结起来就是，玩家可以把各种属性进行合理搭配，同时堆出一定量值，但是随着属性上升到一定值后，收益就会下降。加之游戏内装备的属性，大部分人通过合理的搭配都能把各项属性值堆到一个相对较高但是又不是极端的水平，和土豪的玩家为了追求极限的伤害把属性值继续堆高收益就会有所下降。</p><h2 id="边际效应："><a href="#边际效应：" class="headerlink" title="边际效应："></a>边际效应：</h2><p>在0白字的基础上带上10%白字，收益率为110%/100%-100%=10%，如果在这个基础上再增加一条10%白字那么收益率就变成(110+10%)/110%-1=9.0909%了，以此类推收益率会逐渐降低。</p><h2 id="技能攻击力乘算："><a href="#技能攻击力乘算：" class="headerlink" title="技能攻击力乘算："></a>技能攻击力乘算：</h2><p>技能攻击力的特性在于，它不与任何其他伤害词缀相冲突，多个技能攻击力装备之间的算法为乘算，即常态荒古武器的技能攻击力为35%，在开启魔能之后其效果提升为135%<em>120%=162%，如果再使用当前的顶尖魔法石罗塞塔石碑则技能攻击力变为162%</em>118%=191.16%，即装备上写的是多少技能攻击力，这件装备的实际提升率就是多少，因而技能攻击力装备显得异常保值。</p><h2 id="减防免伤率计算："><a href="#减防免伤率计算：" class="headerlink" title="减防免伤率计算："></a>减防免伤率计算：</h2><p>以当前版本最热门的卢克团队模式副本为例，怪物的物理和魔法防御力为22.1万左右，而妖刀村正这类无视敌人防御力的装备起的作用就是在自身攻击时忽略掉敌人的这部分防御从而直接造成更大的伤害。<br>当前DNF的怪物减伤率计算公式为</p><blockquote><p>“实际防御力/(实际防御力+攻击方等级*200)”</p></blockquote><p>以卢克副本为例，入场的玩家等级均为90，则怪物的减伤率为221000/(221000+90<em>200)</em>100%=92.48%，即如果我们在面对0防御力的敌人时打出100000点伤害，那么到了卢克副本中只能打出100000*(100%-92.48%)=7520点伤害。以妖刀为例，在穿戴妖刀后我们能打出的伤害为</p><blockquote><p>100000<em>【1-221000</em>(100%-20%)/221000<em>(100%-20%)+90</em>200】=<code>9226</code>点伤害</p></blockquote><p>实际提升率大约22.7%。所以说，减防和无视防御类的技能其提升率都要略大于技能本身的数据。</p><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>以上两款游戏的数值简单介绍之后，分析一下两款游戏的现状，龙之谷在我玩的时候（3-4年前）就已经是相当花费金钱的游戏，少充甚至不充是很难在这款游戏中生存下去的，而最近与还在玩这款游戏的小伙伴交流之后，发现这种情况没有减轻，还有继续下去的趋势，玩的人也是一日不如一日。反观地下城与勇士，这款国服出了十年的游戏似乎有着回春的趋势，无论是在网吧还是现实生活中的朋友，玩家都是占了相当部分的比例的。结合我玩这两款游戏的实际经历，还是能看出些许的原因，稍作分析：</p><h2 id="1-数值方面的原因"><a href="#1-数值方面的原因" class="headerlink" title="1.数值方面的原因"></a>1.数值方面的原因</h2><p> 龙之谷由于最终伤害难以堆砌，以我当时玩的60-70版本来说，大部分人都能堆到300左右，而300左右的最终伤害值仅能对玩家带来10％的伤害加成，而剩下的部分，需要依靠及其稀有的多属性纹章以及抽奖和稀有装备来进行堆叠，一块有带有最终属性的高级纹章当时甚至能卖到1000块钱以上，更有极品的属性能够接近万元之高，因而花小钱精打细算普通玩家与花大钱的土豪玩家之间金币花费是相当巨大的。对于地下城与勇士，每个玩家培养的“大号”主角色属性值大都差距不大，而追求极限的土豪抠出的小细节也能让培养的角色伤害再上一个档次。</p><h2 id="2-游戏经济循环的问题"><a href="#2-游戏经济循环的问题" class="headerlink" title="2.游戏经济循环的问题"></a>2.游戏经济循环的问题</h2><p> 在玩龙之谷的时候，许多顶级的装备都是不可交易的，副本的收益大多数都是材料而非交易用的金币，只有副本里较低概率产出的装备比较值钱，因而普通玩家在不花大量时间的情况下收益相当低，甚至可以忽略不计，而对身上的装备养成都需要在游戏外来进行资源的支持（充钱）；而地下城与勇士的搬砖收益则相当可观，一个账号满疲劳一天（刷完疲劳大部分只需要半小时左右）下来可以收入3-5R人民币所价值的金币，原因除了通关副本后的大量金币奖励之外，还有副本产出的硬通货，团队副本的门票，绝大多数玩家都需要通过每周刷新的团队副本来获得提升自己装备的材料（深渊派对邀请函以及史诗灵魂）。因而玩家只要能够花上一定的时间，就能够实现所谓的“自给自足”，这种做法一定上提高了游戏用户的粘度，也使得玩家不会因为装备和材料的高价而产生挫败感和距离感。</p><h2 id="3-游戏关卡设计"><a href="#3-游戏关卡设计" class="headerlink" title="3.游戏关卡设计"></a>3.游戏关卡设计</h2><p> 我曾经跟别人吹牛的时候说道，当一款角色扮演类游戏土豪极限玩家所造成的伤害在普通玩家的三倍以上的时候，这个游戏就黄了，彻底成为砸钱氪金的游戏，如今看来，这个观点未免太过肤浅。龙之谷土豪与平民的差距在3-4倍左右，而地下城与勇士中这个差距也不比龙之谷低，甚至能够达到5倍以上。游戏角色自身的数值只是游戏核心的一部分，而想要让玩家体会到游戏核心的玩法和乐趣，关卡的设计更为重要。龙之谷的关卡（副本）的门槛是分级的，加上各种角色的定位分工类似魔兽世界（奶、T、主DPS、辅助型DPS等），普通的高级副本2-4个普通玩家可以刷的过去，而龙本又分为普通和硬核，普通级别的副本8个玩家在熟练的情况下，是能够顺利通关的，而硬核本的难度则较大，怪物机制难度增大，通常需要1-2个装备较好的DPS以及辅助相互配合才能够顺利通过，整体门槛在普通玩家之上，到后期就会出现所谓的金团（花钱请别人带过）。而版本后期，在大部分玩家的装备强度通过硬核龙本上升到更高层次后，会出现新的龙本，及开荒的龙本，此时这个开荒的副本门槛则更高，甚至会有全服首通奖励的存在，需要数个土豪级别的高玩前往开荒，在通关之后发出攻略等视频或者等到新的版本和等级开放，后面的玩家才能通过提升等级来通过。这种门槛淹没大部分玩家的关卡难度门槛设定虽然能够提升玩家不断挑战提升自己操作的快乐感，但对于伤害的门槛设定（如新副本需要在特定数秒内打出一定的输出否则团灭失败）有时候会让玩家有空有一身水平却无法施展的挫败感（甚至无法完成组队进入副本进行挑战），在心流体验中技术跟不上挑战难度，进而让玩家萌生退意。地下城与勇士则反其道而行之，早期的DNF副本同样十分困难，玩家当时的核心体验在于升级，面对同等级的副本进行挑战，成功之后的愉悦让许多老玩家印象深刻，而后来Neople及时作出了相应的改动，（大转移篇）角色的伤害翻倍提升，升级所需经验大大降低，后期还根据剧情推出了团队的副本并给予极高的奖励，这时候玩家的核心体验就变成了满级后通过远古图做出基本的装备，然后挑战深渊派对刷出自己所需的史诗装备，然后进入团本进行开荒。又如前面所说的，DNF的玩家间的差距虽然很大，但是为什么不会让玩家产生挫败感呢，原因就在于团队副本随着版本的更新难度变得越来越低，后期的门槛在绝大多数玩家角色之下。原来的开荒固定团才能通过到后期变成了流水的野团，甚至只需要少数装备好的搭配上辅助职业便可以通关团队副本，加上高额的奖励使得玩家对副本的依赖变得很大，而新出现的团本与此前的团本难度对接上也比较流畅，通过旧团本打造出来的角色可以较好的通关新的副本，因此许多玩家都能在新副本出现后第一时间通关，享受征服的乐趣。而通过新副本而提升的装备更能让自己在副本的表现中“叱咤风云”，满足玩家的成就感。简单来说就是“平民通、土豪秒”，每个玩家都能在自己的舒适圈内“装逼”。为了防止土豪玩家的较早毕业觉得无聊，加之游戏本身底蕴的积累，游戏内部的冒险团功能，让玩家乐于去新建小号培养，更能通过大号养小号，让游戏的乐趣得以延续。本来作为2D横版游戏的DNF，将自身难以硬核的劣势化为优势，让各种玩家都能体会到游戏的乐趣，吸引着越来越多的新老玩家。</p>]]></content>
      
      
      <categories>
          
          <category> DNF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DNF </tag>
            
            <tag> 游戏策划 </tag>
            
            <tag> 龙之谷 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown语法</title>
      <link href="/2018/06/22/Markdown%E8%AF%AD%E6%B3%95/"/>
      <url>/2018/06/22/Markdown%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>&emsp;&emsp;因为在写博客的过程中，常常会遇到忘记Markdown相关语法的情况，所以就把在网上找到的一些零碎的语法整理成一篇博客，既方便自己以后查阅，也加深自己对Markdown语法的记忆。</p><hr><h2 id="关于Markdown"><a href="#关于Markdown" class="headerlink" title="关于Markdown"></a>关于Markdown</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>&emsp;&emsp;Markdown是一种轻量级<code>标记语言</code>，设计的目的是希望大家使用“易于阅读、易于撰写的纯文字格式，并选择性的转换成有效的 XHTML (或是HTML)”。它允许人们“使用易读易写的纯文本格式编写文档，然后转换成有效的XHTML(或者HTML)文档”，语法简洁明了、学习容易。Markdown文件的文件拓展名为<code>.md</code>。</p><h3 id="为什么选择Markdown"><a href="#为什么选择Markdown" class="headerlink" title="为什么选择Markdown"></a>为什么选择Markdown</h3><ul><li>它基于纯文本，方便修改和共享</li><li>几乎可以在所有的<code>文本编辑器</code>中编写</li><li>有众多编程语言的实现，以及应用的相关扩展</li><li>在GitHub、SourceForge等网站都应用了Markdown或者其变种<code>(语法稍有不同)</code></li><li>很容易转换为HTML文档或其他格式</li><li>使用者可以更关注写作的内容，而不去太多地关注样式，适合用来编写文档、记录笔记、撰写文章</li><li>Markdown完全<code>兼容HTML语法</code>，可以直接在Markdown文档中插入HTML内容</li></ul><hr><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><h3 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h3><ul><li><p><strong>Setext 形式</strong><br>在文本下方加入<code>=</code>或者<code>-</code>。<code>=</code>或者<code>-</code>的数量是没有限制的，通常的做法是使其和标题文本的长度相同，这样看起来比较舒服。Setext 形式只支持两种H1和H2两种标题。  </p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">一级标题 H1</span><br><span class="line">====</span><br><span class="line"></span><br><span class="line">二级标题 H2</span><br><span class="line">----</span><br></pre></td></tr></table></figure></li><li><p><strong>atx 形式</strong><br>在文本前面加上<code>#</code>即可创建一级标题。同理，创建二级标题、三级标题等只需要增加<code>#</code>个数即可，Markdown 共支持六级标题。需要注意的是，<code>#左侧不能出现空格</code>。  </p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 一级标题</span></span><br><span class="line"><span class="section">## 二级标题</span></span><br><span class="line"><span class="section">### 三级标题</span></span><br><span class="line"><span class="section">#### 四级标题</span></span><br><span class="line"><span class="section">##### 五级标题</span></span><br><span class="line"><span class="section">###### 六级标题</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="段落与换行"><a href="#段落与换行" class="headerlink" title="段落与换行"></a>段落与换行</h3><ul><li>段落的<code>前后</code>必须是空行(行内什么都没有，或者只有空白符（空格或Tab）)</li><li>相邻两行文本，如果中间没有空行 会显示在一行中（换行符被转换为空格）</li><li>如果需要在段落内<code>换行</code>，可以在前一行的末尾加入<code>至少两个空格</code>，然后换行写其它的文字，这样能保证换行后的文字和前面文字的样式保持一致 </li></ul><hr><h3 id="强调"><a href="#强调" class="headerlink" title="强调"></a>强调</h3><ul><li><strong>斜体</strong><br>使用符号<code>*</code>或者<code>_</code>左右包裹文本。需要注意的是，符号和文本之间不能存在<code>空格</code>，有的Markdown版本不支持，且<code>*</code>会被解释成列表。     <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">*斜 体* </span><br><span class="line">_斜体_</span><br></pre></td></tr></table></figure></li></ul><blockquote><p><code>显示效果</code>：  </p><ul><li><em>斜 体</em>   </li><li>_斜体_  </li></ul></blockquote><ul><li><strong>粗体</strong><br>使用符号<code>**</code>或者<code>__</code>左右包裹文本。需要注意的是，符号之间、符号和文本之间不能存在<code>空格</code>，有的Markdown版本不支持。  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">**粗体**</span><br><span class="line">__粗体__</span><br></pre></td></tr></table></figure></li></ul><blockquote><p><code>显示效果</code>：</p><ul><li><strong>粗体</strong> </li><li><strong>粗体</strong></li></ul></blockquote><ul><li><strong>删除线</strong><br>使用符号<code>~~</code>左右包裹文本。需要注意的是，符号之间、符号和文本之间不能存在<code>空格</code>。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">~~删除线~~</span><br><span class="line">~~ 删除线~~</span><br></pre></td></tr></table></figure></li></ul><blockquote><p><code>显示效果</code>：</p><ul><li><del>删除线</del></li><li>~~ 删除线~~</li></ul></blockquote><ul><li><strong>嵌套使用</strong>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">***加粗斜体***</span><br><span class="line">**_加粗斜体_**</span><br><span class="line">**~~加粗删除线~~**</span><br></pre></td></tr></table></figure></li></ul><blockquote><p><code>显示效果</code>：</p><ul><li><strong><em>加粗斜体</em></strong></li><li><strong><em>加粗斜体</em></strong></li><li><strong><del>加粗删除线</del></strong></li></ul></blockquote><hr><h3 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h3><p>可以在一行中使用三个或更多的 <code>*</code>、<code>-</code> 或<code>_</code> 来添加分隔线，字符之间可以有空格（空白符），但不能有其他字符。但是对于符号<code>-</code>，必须添加空格，不然会解释为<code>H2标题</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">***</span><br><span class="line">- - -</span><br><span class="line">___</span><br></pre></td></tr></table></figure></p><p><code>显示效果</code></p><hr><hr><hr><h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><ul><li><strong>引用内容</strong><br>在段落或其他内容前使用<code>&gt;</code>符号，就可以将这段内容标记为<code>引用</code>的内容。当一行文本前面加上了<code>&gt;</code>符号的时候，后面所有相邻行都会被引用，除非隔上一个空行。注意，空行也能使用<code>&gt;</code>标记。  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;引用内容</span><br><span class="line">会被引用</span><br><span class="line">也会被引用</span><br><span class="line"></span><br><span class="line">不会被引用</span><br></pre></td></tr></table></figure></li></ul><p><code>显示效果</code>：</p><blockquote><p>引用内容<br>会被引用<br>也会被引用</p></blockquote><p>不会被引用</p><ul><li><strong>嵌套引用</strong><br>根据不同的层次加上不同数量的<code>&gt;</code>即可，注意，为了避免上一层引用对下面的影响，不同层的引用之间需要加入一个<code>空行</code>。  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;内层引用</span><br><span class="line">&gt;&gt;外层引用</span><br><span class="line">&gt;最外层引用</span><br></pre></td></tr></table></figure></li></ul><p><code>显示效果</code>：</p><blockquote><blockquote><blockquote><p>内层引用</p></blockquote><p>外层引用</p></blockquote><p>最外层引用</p></blockquote><hr><h3 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h3><ul><li><strong>行内代码</strong><br>使用<code></code> <code>(和</code>~`在同一个键上)包裹住行内代码， <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这里有一段代码`a + b = 10;`</span><br></pre></td></tr></table></figure></li></ul><p><code>显示效果</code>：<br>这里有一段代码<code>a + b = 10;</code></p><ul><li><strong>多行代码</strong><br>可以在代码钱缩进至少<code>四个空格</code>或者一个<code>Tab</code>，代码块会一直持续到没有缩进的那一行；也可以使用六个<code></code> `来包裹代码块，代码块前后分别有三个，且独占一行。</li></ul><hr><h3 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h3><ul><li><p>行内式<br>语法为<code>[链接文本](URL &#39;链接Title&#39;)</code>。<code>链接Title</code>的效果是鼠标悬停在链接上会出现指定的内容，<code>URL</code>可以是普通链接，也可以是本地链接。  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[Google](http://www.google.com/)</span><br><span class="line"></span><br><span class="line">[icon.png](./images/icon.png)</span><br></pre></td></tr></table></figure></li><li><p>参考式<br>在文档中需要插入链接的地方写<code>[链接文字][链接标记]</code>，在后面的任意位置添加<code>[链接标记]:URL &quot;链接Title&quot;</code>。其中，<code>URL</code>可以使用<code>&lt;&gt;</code> 包括起来，<code>链接Title</code>可以使用<code>&quot;&quot;</code>、<code>&#39;&#39;</code>、<code>()</code>包裹（考虑到兼容性，建议使用引号），<code>链接Title</code> 部分也可以换行来写。<br><code>如果某一个链接在文章中多处使用，那么使用参考式创建链接将非常好，它可以让你对链接进行统一的管理。</code></p></li><li>自动链接<br>使用<code>&lt;&gt;</code>包括的<code>URL</code>或<code>邮箱地址</code>会被自动转换为超链接<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;http://www.google.com/&gt;</span><br><span class="line"></span><br><span class="line">&lt;example@email.com&gt;</span><br></pre></td></tr></table></figure></li></ul><hr><h3 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h3><p>图片语法和超链接语法很像</p><ul><li>行内式<br>语法为<code>![图片Alt](图片URL &quot;图片Title&quot;)</code>。语法中<code>图片Alt</code>的意思是如果图片因为某些原因不能显示，就用定义的图片Alt文字来代替图片。<code>图片Title</code>表示鼠标悬停与图片上时出现的文字。Alt和Title都不是必须的，可以省略。需要注意的是，<code>!</code>为英文的感叹号，<code>图片URL</code>和<code>&quot;图片Title&quot;</code>之间有一个空格。</li><li>参考式<br>在文档要插入图片的地方写<code>![图片Alt][标记]</code>，在后面(一般是文档最后或者某一个统一的地方)写上<code>[标记]:图片地址 &quot;Title&quot;</code></li><li>指定图片大小<br>Markdown 不支持指定图片的显示大小，不过可以通过直接插入<img>标签来指定相关属性  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=&quot;src&quot; alt=&quot;alt&quot; title=&quot;title&quot; width=&quot;width&quot; height=&quot;height&quot; /&gt;</span><br></pre></td></tr></table></figure></li></ul><hr><h3 id="锚点"><a href="#锚点" class="headerlink" title="锚点"></a>锚点</h3><p>锚点其实就是<code>页内超链接</code>，也就是链接本文档内部的某些元素，实现当前页面中的跳转。需要注意的是，有一些版本的Markdown只支持在标题后插入锚点，其它地方无效。有的编辑器在编辑Markdown时可能出现锚点无法跳转，但是发布成笔记之后能正常调整的情况。<br>锚点的语法:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">## 目录&#123;#index&#125;</span><br><span class="line"></span><br><span class="line">跳转到[目录](#index)</span><br></pre></td></tr></table></figure></p><hr><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><ul><li><p><strong>无序列表</strong><br>无序列表的语法是：<code>符号 文本</code>。其中符号可以是<code>*</code>，<code>-</code>或者<code>+</code>，符号和文本之间，需要加上一个空格。</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">* </span>list1</span><br><span class="line"><span class="bullet">+ </span>list2</span><br><span class="line"><span class="bullet">- </span>list3</span><br></pre></td></tr></table></figure></li><li><p><strong>有序列表</strong><br>有序列表的语法是：<code>数字. 文本</code>。其中<code>数字</code>可以为任意数字，且使用的数组不会对解析之后的列表序号造成影响。</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1. </span>list1</span><br><span class="line"><span class="bullet">1. </span>list2</span><br><span class="line"><span class="bullet">1. </span>list3</span><br></pre></td></tr></table></figure><blockquote><p><code>显示效果</code></p><ol><li>list1</li><li>list2</li><li>list3</li></ol></blockquote></li><li><p><strong>嵌套列表</strong><br>无序列表和有序列表可以随意相互嵌套，子列表需要在前面加上<code>缩进</code>，或者至少<code>一个空格</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">* list1</span><br><span class="line"> 1. list</span><br><span class="line">* list2</span><br><span class="line"> * list</span><br></pre></td></tr></table></figure></li><li><p><strong>代办列表</strong> </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">- [ ] Eat</span><br><span class="line">- [x] Code</span><br><span class="line">  - [x] HTML</span><br><span class="line">  - [x] CSS</span><br><span class="line">  - [x] JavaScript</span><br><span class="line">- [ ] Sleep</span><br></pre></td></tr></table></figure></li></ul><ul><li style="list-style: none"><input type="checkbox"> Eat</li><li style="list-style: none"><input type="checkbox" checked> Code<ul><li style="list-style: none"><input type="checkbox" checked> HTML</li><li style="list-style: none"><input type="checkbox" checked> CSS</li><li style="list-style: none"><input type="checkbox" checked> JavaScript</li></ul></li><li style="list-style: none"><input type="checkbox"> Sleep</li></ul><ul><li><strong>其他</strong><br>如果要在列表项目内放进引用，那<code>&gt;</code>就需要缩进</li></ul><h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><p>使用<code>|</code>来分隔不同的单元格，使用<code>-</code>来分隔表头和其他行，<code>-</code>的数量没有限制但至少为一个。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">name | age</span><br><span class="line">---- | ---</span><br><span class="line">LearnShare | 12</span><br><span class="line">Mike |  32</span><br></pre></td></tr></table></figure></p><p>为了美观，可以使用空格对齐不同行的单元格，并在左右两侧都使用 | 来标记单元格边界。<br>在表头下方的分隔线标记中加入<code>:</code>，即可标记下方单元格内容的对齐方式（<code>_</code>没有数量限制，至少为一个）</p><ul><li><code>:---</code> 代表左对齐</li><li><code>:--:</code> 代表居中对齐</li><li><code>---:</code> 代表右对齐</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">| left | center | right |  </span><br><span class="line">| :--- | :----: | ----: |  </span><br><span class="line">| aaaa | bbbbbb | ccccc |  </span><br><span class="line">| a    | b      | c     |</span><br></pre></td></tr></table></figure><table><thead><tr><th style="text-align:left">left</th><th style="text-align:center">center</th><th style="text-align:right">right</th></tr></thead><tbody><tr><td style="text-align:left">aaaa</td><td style="text-align:center">bbbbbb</td><td style="text-align:right">ccccc</td></tr><tr><td style="text-align:left">a</td><td style="text-align:center">b</td><td style="text-align:right">c</td></tr></tbody></table><hr><h3 id="字符转义"><a href="#字符转义" class="headerlink" title="字符转义"></a>字符转义</h3><p>反斜线<code>\</code>用于显示在 Markdown 语法中有特殊作用的字符。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这是用来 \*演示\* 的 \_文本\_</span><br></pre></td></tr></table></figure></p><p>这是用来 *演示* 的 _文本_</p><hr><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>不同平台对Markdown语法的解释可能稍有不同，使用的时候可能需要根据实际情况进行调整.</p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo搭建教程</title>
      <link href="/2018/06/20/hello-world/"/>
      <url>/2018/06/20/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is my very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建个人博客</title>
      <link href="/2018/06/20/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
      <url>/2018/06/20/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>&emsp;&emsp;关于个人博客搭建，目前比较流行的解决方案有：</p><ul><li><a href="https://zh-cn.wordpress.com/com-vs-org/?sgmt=gb&amp;utm_source=adwords&amp;utm_campaign=G_Search_Brand_Desktop_CN_zh-cn_x_x&amp;utm_medium=cpc&amp;keyword=wordpress&amp;creative=199333013205&amp;campaignid=686689633&amp;adgroupid=33762481125&amp;matchtype=e&amp;device=c&amp;network=g&amp;targetid=aud-309211669636:kwd-313411415&amp;locationid=9061364&amp;gclid=Cj0KCQiAp8fSBRCUARIsABPL6JbuS6JioXKkmDC0zgI2uSyq-1z6UBQX9VIpo3y1F44j0WizDtbz7rcaAhmcEALw_wcB" target="_blank" rel="noopener">WorkPress</a>：需要购买独立域名和空间</li><li><a href="http://www.ghostchina.com/" target="_blank" rel="noopener">Ghost</a>：非常好用，但是需要租服务器，需要在个人服务器上托管Ghost程序</li><li>Github Pages + <a href="http://jekyllcn.com/" target="_blank" rel="noopener">Jekyll</a>：免费，但是个人角色Jekyll用起来麻烦</li><li>Github Pages + Hexo：免费，使用相对简单</li></ul><p>之所以选择Github Pages+Hexo搭建新博客，主要原因有：</p><ul><li>免费，使用Github Pages托管自己的博客，不需要自己租赁服务器；使用Github Pages提供的免费域名，不需要自己购买域名</li><li>快速，使用Hexo可以快速生成所需的静态文件</li><li>方便，配合git使用，只需要一个命令就能将博客部署到github上</li><li>支持Markdown<figure class="image-box">                <img src="http://ozy7xtk79.bkt.clouddn.com/hexo_github.png" alt="hexo+github pages" title class>                <p>hexo+github pages</p>            </figure></li></ul><p>本篇博客使用的系统为<code>windows10</code></p><h2 id="Github-Pages"><a href="#Github-Pages" class="headerlink" title="Github Pages"></a>Github Pages</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>&emsp;&emsp;<a href="https://pages.github.com/" target="_blank" rel="noopener">Github Pages</a>是Github官方提供的免费静态网站托管服务，用起来方便而且功能强大，不仅没有空间限制，还提供了一个免费域名供用户使用<code>用户名.github.io</code>，用户如果有需要还可以绑定自己的域名。</p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>使用Github Pages，需要先注册一个Github账号，然后创建一个名称为<code>xxx.github.io</code>的repository，这里的<code>xxx</code>为你的<code>Github用户名</code><br><figure class="image-box">                <img src="https://github.com/CGNz/blogimage/raw/master/blogimage1.png" alt="CGNz.github.io" title class>                <p>CGNz.github.io</p>            </figure></p><h2 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h2><h3 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h3><p>为了将本地静态博客推送到Github上，我们需要在我们的电脑上安装Git。由于众所周知的原因，直接在官网上下载Git速度很慢，推荐在<a href="https://github.com/AsanCai/git-for-win" target="_blank" rel="noopener">Git国内下载站</a>下载。<br>选择<code>64-bit Git for Windows Setup</code>下载，点击下载好的exe文件，选择Git的安装路径，一路next完成安装。</p><h3 id="配置Git"><a href="#配置Git" class="headerlink" title="配置Git"></a>配置Git</h3><p>为了将本地文件提交到Github上，我们需要在Github上添加本地电脑的SSH key，设置步骤如下：<br><strong>第一步</strong>，在任意目录下，右击鼠标-&gt;选择<code>Git Bash Here</code>，打开Git命令窗口，输入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name username #username为你的Github用户名，区分大小写</span><br><span class="line">git config --global user.email useremail #useremail为你的GitHub注册邮箱</span><br><span class="line">ssh-keygen -t rsa -C &quot;useremail&quot;  #useremail为你的GitHub注册邮箱</span><br></pre></td></tr></table></figure></p><p>然后一路回车，最后可以在用户主目录下看到一个<code>.ssh</code>文件夹，里面的<code>id_rsa.pub</code>文件即为我们需要的公钥文件。<br>如果在桌面找不到用户主目录，可以在<code>桌面</code>下<code>右击鼠标</code>，然后选择<code>个性化</code>打开个性化设置界面，然后按照以下步骤进行设置，在桌面显示用户主目录。</p><h2 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h2><h3 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h3><p><a href="https://hexo.io/zh-cn/docs/index.html" target="_blank" rel="noopener">Hexo</a>是一个快速、简洁且高效的博客框架。在安装Hexo之前，需要先在电脑上安装<code>Node.js</code>。可以直接在<a href="https://nodejs.org/zh-cn/download/releases/" target="_blank" rel="noopener">Node官网</a>下载对应版本(我的是8.6.0)的安装包进行安装，也可以先安装<code>nvm</code>，通过nvm安装。</p><h3 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h3><p>安装好Node.js之后便可以使用npm安装Hexo。打开cmd命令窗口，输入以下命令安装Hexo<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure></p><p>接着输入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo -v</span><br></pre></td></tr></table></figure></p><p>若出现版本信息，则Hexo已成功安装</p><h3 id="创建本地博客"><a href="#创建本地博客" class="headerlink" title="创建本地博客"></a>创建本地博客</h3><p>安装好Hexo之后，选择一个存放博客目录的地方，按<code>Shift+鼠标右键</code>，选择<code>在此处打开命令窗口</code>，输入以下命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo init &lt;folder&gt; #存放博客的文件夹名称</span><br><span class="line">cd &lt;folder&gt; </span><br><span class="line">npm install #安装必要的模块</span><br></pre></td></tr></table></figure></p><p>初始化完成之后，输入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g #生成静态文件 </span><br><span class="line">hexo s #启动本地服务器</span><br></pre></td></tr></table></figure></p><p>然后打开浏览器，输入<code>localhost:4000</code>即可看到自己的本地博客。</p><h3 id="配置博客"><a href="#配置博客" class="headerlink" title="配置博客"></a>配置博客</h3><p>按<code>Ctrl+C</code>关闭本地服务器进程，打开博客根目录下的<code>_config.yml文件</code>(建议使用VSCode或者其他文本编辑器进行修改)，拉到文件最后，可以看到<code>Development</code>选项，修改内容如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:  </span><br><span class="line"> type: git </span><br><span class="line"> repository: git@github.com:username/username.github.io.git #username为你的Github用户名，区分大小写  </span><br><span class="line"> branch: master</span><br></pre></td></tr></table></figure></p><p>修改完成之后，我们还需要安装<code>hexo-deployer-git</code>。在博客根目录下打开cmd命令窗口，输入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></p><p>安装完成之后，输入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g #生成静态文件 </span><br><span class="line">hexo d #将本地博客部署到Github上</span><br></pre></td></tr></table></figure></p><p>若部署成功，则可以打开浏览器，输入<code>username.github.io(这里的username不区分大小写)</code>浏览自己的个人博客了。</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>这里需要注意的是，配置好Git之后，初次部署博客可能会出现上传失败的问题。如果遇到这种问题，则需要在博客根目录下，右击鼠标选择<code>Git Bash Here</code>，输入以下指令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure></p><p>然后根据提示，输入<code>yes</code>即可</p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DNF中的伤害类型介绍</title>
      <link href="/2018/06/03/DNF%E4%B8%AD%E7%9A%84%E4%BC%A4%E5%AE%B3%E7%B1%BB%E5%9E%8B%E4%BB%8B%E7%BB%8D/"/>
      <url>/2018/06/03/DNF%E4%B8%AD%E7%9A%84%E4%BC%A4%E5%AE%B3%E7%B1%BB%E5%9E%8B%E4%BB%8B%E7%BB%8D/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><ul><li>对于很多刚刚回归或者才接触这个游戏不是很久的玩家而言，他们在选择装备上的最大困难点就是对于目前DNF装备体系内的<strong>伤害类词条</strong>了解甚少，不同的词条不同的属性到底加成什么?这件装备是否比那件装备更加优秀?今天我们就要来详细盘点一下游戏内的所有伤害类词条，为仍然一头雾水的勇士们指点迷津。</li></ul><h1 id="86版本伤害类型"><a href="#86版本伤害类型" class="headerlink" title="86版本伤害类型"></a>86版本伤害类型</h1><p>首先是出现于86版本的三个词条，<strong>暴击伤害</strong>、<strong>附加伤害</strong>和<strong>增加伤害</strong>。</p><h2 id="暴击伤害"><a href="#暴击伤害" class="headerlink" title="暴击伤害"></a>暴击伤害</h2><figure class="image-box">                <img src="https://github.com/CGNz/blogimage/raw/master/DNF-2/baoshang.png" alt="无尽贪食之殇" title class>                <p>无尽贪食之殇</p>            </figure><figure class="image-box">                <img src="https://github.com/CGNz/blogimage/raw/master/DNF-2/baoshang2.png" alt="耀之荣光手镯" title class>                <p>耀之荣光手镯</p>            </figure><p>暴击伤害是指在角色打出暴击时，伤害值会在原本的基础上增加，代表装备为无尽贪食之殇，该装备直接提升30%的暴击伤害。</p><p>系统默认爆伤为<code>150%</code>，装备爆伤为<strong>乘算</strong>，即如果你打出了<code>1000</code>点伤害，无爆伤类装备暴击时将造成<code>1500</code>点伤害，在穿戴无尽贪食之殇后最终伤害则为1000x【150%x(100+30%)】=<code>1950</code>点。装备的爆伤与角色技能带来的爆伤、角色防具精通带来的爆伤均不冲突，三者之间仍然为加算，公式为</p><blockquote><p>基础伤害x系统默认爆伤x角色技能爆伤x角色装备爆伤x装备爆伤= 最终伤害，</p></blockquote><p>在没有打出暴击时暴击伤害不起效果，因此推荐勇士们尽量地将自己的<strong>暴击率</strong>堆满。<br>关于爆伤我们需要注意的是，<strong>暴击伤害取最高值</strong>，即若身上的装备同时存在两件提升暴击伤害的装备，那么其效果不能叠加，系统会默认取最高的那个。例如说我们的手镯选择<strong>耀之荣光</strong>，戒指选择<strong>无尽贪食之殇</strong>，那么耀之荣光的5%爆伤加成<strong>不会起效</strong>。</p><h2 id="附加伤害"><a href="#附加伤害" class="headerlink" title="附加伤害"></a>附加伤害</h2><figure class="image-box">                <img src="https://github.com/CGNz/blogimage/raw/master/DNF-2/baizi.png" alt="兽人守护神称号" title class>                <p>兽人守护神称号</p>            </figure><p>附加伤害也被称之为<strong>白字</strong>，因为在比较久远的版本中这一类的伤害均是以白色的数字形式体现的，尽管随着版本变迁这个叫法已经名不副实，但<strong>白字</strong>的理念已经深入人心一时半会也无法改动了，因此玩家们也就继续叫了下去。</p><p>附加伤害的代表性装备如今年的<strong>春节称号兽人守护神</strong>，该称号直接<strong>附加10%的白字伤害</strong>。</p><p>附加伤害是指，角色若装备一件带有这一伤害词缀的装备，则在攻击时就会冒出一个额外的伤害数字，若穿戴两件则出现两个以此类推，穿戴的附加伤害类装备越多攻击时的伤害数字条数也就越多。<br>例如说某玩家仅穿戴了今年的春节称号并打出了<code>1000</code>点伤害，则这个大的1000旁边就会有一个小的100同时出现，此时我们对怪物就造成了1100点伤害，若再穿戴一件带有10%附加伤害的装备则会出现两个100，造成<code>1200</code>点伤害。<br>与暴击伤害不同，附加伤害是无冲突的，即只要穿戴即可起效，成型的玩家装备内一般都有<strong>5条左右</strong>的白字，唯一需要注意的是附加伤害的收益有稀释。在0白字的基础上带上10%白字，收益率为110%/100%-100%=<code>10%</code>，如果在这个基础上再增加一条10%白字那么收益率就变成(110+10%)/110%-1=<code>9.0909%</code>了，以此类推<strong>收益率会逐渐降低</strong>。</p><h2 id="增加伤害"><a href="#增加伤害" class="headerlink" title="增加伤害"></a>增加伤害</h2><figure class="image-box">                <img src="https://github.com/CGNz/blogimage/raw/master/DNF-2/huangzi.png" alt="兽人守护神称号" title class>                <p>兽人守护神称号</p>            </figure><p>增加伤害是<strong>直接放大角色本身输出</strong>的一条伤害词缀，俗称<strong>黄字</strong>。代表装备为<strong>无尽贪食之力</strong>。</p><p>和白字类似，增加伤害之前也曾经是黄字显示，因此两个概念是等同的。此外，上面提到的耀之荣光手镯也同样是黄字伤害，只不过描述不同。<br>黄字的加成会直接体现在角色伤害数字上，例如在装备无尽贪食之力前角色打出的伤害为<code>1000</code>，那么在装备后伤害则提升为1000*(100%+30%)=<code>1300</code>。<br>需要注意的是增加伤害也同样<strong>取最高值</strong>，即两件均带有增加伤害词条的装备只会取<strong>数值较高</strong>的那个，另一个则<strong>不发挥作用</strong>。</p><ul><li>简单地介绍过86版本的伤害词缀后，在下一篇中我们将探讨的是90级版本中出现的伤害词缀，以及属性提升率的计算。</li></ul><h1 id="90版本伤害类型"><a href="#90版本伤害类型" class="headerlink" title="90版本伤害类型"></a>90版本伤害类型</h1><ul><li>上面我们讲述了86版本即出现的三个伤害词缀，即<strong>暴击伤害</strong>、<strong>附加伤害</strong>和<strong>增加伤害</strong>，在这一期中90版本中新引入的词缀也将被归纳进来，方便回归和新手的勇士们更好地理解当前游戏内的伤害构成机制。</li></ul><h2 id="额外增加伤害"><a href="#额外增加伤害" class="headerlink" title="额外增加伤害"></a>额外增加伤害</h2><figure class="image-box">                <img src="https://github.com/CGNz/blogimage/raw/master/DNF-2/yaodao.png" alt="妖刀村正" title class>                <p>妖刀村正</p>            </figure><p>额外增加（追加）伤害，俗称<strong>黄追</strong>，代表性装备为90级史诗太刀<strong>妖刀村正</strong>。</p><p>妖刀村正的属性中有一条<strong>额外增加35%的伤害增加量</strong>，这个额外的伤害增加量实际上就是可叠加的黄字。与普通黄字取最高值不同，带有额外黄字的装备其效果是逐渐累加的，并<strong>不会出现冲突</strong>，<strong>计算公式是普通的加算</strong>，正因为它是<strong>增加伤害的一种进阶</strong>，很多人又把它称之为<strong>黄追</strong>。<br>例如说我佩戴了妖刀村正的同时还穿戴着库尔图洛的合金腰带，那么我当前身上的黄追伤害就是35%+6%=<code>41%</code>。</p><figure class="image-box">                <img src="https://github.com/CGNz/blogimage/raw/master/DNF-2/yaodai.png" alt="库尔图洛的合金腰带" title class>                <p>库尔图洛的合金腰带</p>            </figure><p>需要注意的是，黄追类的词缀在角色身上一件黄字伤害都没有的情况下也同样生效!两者之间并无直接联系，且黄追和黄字之间也为加算，即如果我佩戴的武器是别云剑-无用并穿着合金腰带，则总黄字量就是<code>50%+6%</code>。<br>从理论上来说黄追的性质和附加伤害的白字差不多，都是<strong>可叠加但数值越高稀释程度就越大</strong>，勇士们在搭配装备的时候要注意这一点。</p><h2 id="额外暴击伤害"><a href="#额外暴击伤害" class="headerlink" title="额外暴击伤害"></a>额外暴击伤害</h2><figure class="image-box">                <img src="https://github.com/CGNz/blogimage/raw/master/DNF-2/haojie.png" alt="地狱浩劫" title class>                <p>地狱浩劫</p>            </figure><p>额外暴击伤害，俗称<strong>爆追</strong>，代表性装备为90级史诗手弩<strong>地狱浩劫</strong>。</p><p>和上面提到的黄追类似，额外暴击伤害也同样是<strong>可叠加不冲突的暴击伤害</strong>，其效果和黄追完全一致因此也被玩家们成为<strong>爆追</strong>。<br>其性质为<strong>不与任何装备冲突</strong>、<strong>爆追之间为加算</strong>、<strong>爆追和爆伤之间也为加算</strong>且无需穿戴任何爆伤类装备仍可生效，其<strong>稀释也和黄追的效果一致</strong>，勇士们比照着上面的黄追词条查看即可。</p><h2 id="技能攻击力"><a href="#技能攻击力" class="headerlink" title="技能攻击力"></a>技能攻击力</h2><figure class="image-box">                <img src="https://github.com/CGNz/blogimage/raw/master/DNF-2/huanggu.png" alt="荒古遗尘光剑" title class>                <p>荒古遗尘光剑</p>            </figure><p>技能攻击力，俗称<strong>技攻</strong>，代表性装备为<strong>荒古遗尘系列武器</strong>。</p><p>在这个众多伤害词条均有稀释效果的版本中，技能攻击力作为唯一的<strong>非稀释类词条</strong>备受玩家们追捧。技能攻击力类的加成简单直白，比如说我在穿戴荒古遗尘系列武器时可以打出<code>1000</code>点伤害，那么我在开启魔能之后技能的伤害就会提高到<code>1200</code>点。<br>技能攻击力的特性在于，它<strong>不与任何其他伤害词缀相冲突</strong>，多个技能攻击力装备之间的算法为<strong>乘算</strong>，即常态荒古武器的技能攻击力为<code>35%</code>，在开启魔能之后其效果提升为</p><blockquote><p>135%x120%=<code>162%</code> </p></blockquote><p>如果再使用当前的顶尖魔法石罗塞塔石碑则技能攻击力变为</p><blockquote><p>162%x118%=<code>191.16%</code></p></blockquote><p>即<strong>装备上写的是多少技能攻击力，这件装备的实际提升率就是多少!</strong>，因而技能攻击力装备显得异常保值。</p><figure class="image-box">                <img src="https://github.com/CGNz/blogimage/raw/master/DNF-2/aigenisi.png" alt="源助力-艾格尼丝" title class>                <p>源助力-艾格尼丝</p>            </figure><p>需要注意的是，从安徒恩团队副本模式中获得的<strong>源助力-玛特伽</strong>和<strong>源助力-艾格尼斯</strong>的计算方式均为加算。以<strong>源助力-艾格尼斯为</strong>例，其实际提升率并没有<code>20%</code>，而是无论是否开启魔能其提升率均恒定为<code>14.9%</code>，这两件装备也是唯二的特例，因此也被玩家们戏称为<strong>技能攻击力之耻</strong>。</p><h2 id="减防、无视防御"><a href="#减防、无视防御" class="headerlink" title="减防、无视防御"></a>减防、无视防御</h2><figure class="image-box">                <img src="https://github.com/CGNz/blogimage/raw/master/DNF-2/yaodao.png" alt="妖刀村正again" title class>                <p>妖刀村正again</p>            </figure><p>无视防御力，代表性装备为90级史诗太刀<strong>妖刀村正</strong>。<br>是的，这把太刀又一次成为了我们剖析装备伤害的最佳模板。</p><p>在DNF这种MMORPG游戏内，玩家和怪物的防御力是个无法忽视的数值，因为防御力的高低直接决定了伤害数字是多少。以当前版本最热门的卢克团队模式副本为例，怪物的物理和魔法防御力为<code>22.1万</code>左右，而妖刀村正这类无视敌人防御力的装备起的作用就是<strong>在自身攻击时忽略掉敌人的这部分防御从而直接造成更大的伤害</strong>。<br>当前DNF的怪物减伤率计算公式为<strong>实际防御力/(实际防御力+攻击方等级*200)</strong>以卢克副本为例，入场的玩家等级均为90，则怪物的减伤率为</p><blockquote><p>221000/(221000+90<em>200)</em>100%=<code>92.48%</code></p></blockquote><p>即如果我们在面对0防御力的敌人时打出100000点伤害，那么到了卢克副本中只能打出100000x(100%-92.48%)=<code>7520</code>点伤害。</p><p>以妖刀为例，在穿戴妖刀后我们能打出的伤害为100000x【1-221000x(100%-20%)/221000x(100%-20%)+90x200】=<code>9226</code>点伤害，实际提升率大约<code>22.7%</code>。</p><p>所以说，减防和无视防御类的技能其<strong>提升率都要略大于技能本身的数据</strong>，这么一看妖刀简直强无敌。不，等等，因为DNF里还有另外的两个概念:<br>一个是<strong>减防上限</strong>，一个是<strong>减少防御力</strong>。</p><h3 id="减少敌人防御力"><a href="#减少敌人防御力" class="headerlink" title="减少敌人防御力"></a>减少敌人防御力</h3><figure class="image-box">                <img src="https://github.com/CGNz/blogimage/raw/master/DNF-2/yaodao.png" alt="改版前的女装B肩" title class>                <p>改版前的女装B肩</p>            </figure><p>减少敌人防御力，代表性装备为改版前的90级布甲史诗套光怪陆离的人生中的护肩<strong>崩坏的二次元护肩</strong>。</p><p>减少敌人防御力的属性与无视防御类似，但无视防御只能对角色自身起效，对于团队无增益，但减少敌人防御力类的装备在穿戴后全队有效，相对于团队增伤。但需要注意的是，尽管没有标明，但<strong>减防类装备的数值仅对普通怪物能够起到全部效果</strong>，对于<strong>精英怪物效果为75%</strong>，对于<strong>领主怪物的效果只有50%</strong>。</p><h3 id="减防上限"><a href="#减防上限" class="headerlink" title="减防上限"></a>减防上限</h3><p>那么有勇士可能会觉得，一个队伍里如果每人都带一个减防，那么卢克怪物岂不是相当于0防御的裸装状态随便打了吗?不，这里又会引入另外一个概念，即减防上限。<br>事实上由于安徒恩开荒时期鬼泣加驱魔的组合能够轻易地将怪物的防御力减少到0从而实现“十倍增伤”，因此NX在开发后续版本的时候就为安徒恩和卢克设定了减防上限，同时还将<strong>所有减防类职业的固定数值减防变更为了百分比减防</strong>。以卢克副本为例，无论你通过什么手段都<strong>不能使得怪物的防御力降低到146233点之下</strong>，对比完整的防御卢克副本的减防上限为<code>34%</code>。也就是说，如果队伍里同时有两名阿修罗、暗帝这类的减防职业(<strong>技能减防不受怪物本身影响，即普通绿名和领主一视同仁</strong>)，那么卢克副本的防御将直接从100%降低到100%-21.5%-21.5%=57%，但由于这一数值已经突破了减防下限因此有部分效果无法生效，卢克怪物的防御仍然是原本的<code>66%</code>，即146233点，这也就是减防上限的含义。</p><p>在队伍已经达到减防上限的情况下，妖刀村正<strong>无视敌人20%防御力</strong>的属性将变成一纸空文，即能对自身起效的属性仅剩下一条35%的黄追。即使只有一个减防职业，妖刀村正的持有者能享受到的装备无视部分也仅剩下<code>12.5%</code>，提升率只剩下<code>15%</code>不到。这也就是为何妖刀村正的属性不俗，但在高端副本的表现却不尽如人意的原因了。</p><h2 id="力智加成"><a href="#力智加成" class="headerlink" title="力智加成"></a>力智加成</h2><figure class="image-box">                <img src="https://github.com/CGNz/blogimage/raw/master/DNF-2/huangjinbei.png" alt="波利斯的黄金杯" title class>                <p>波利斯的黄金杯</p>            </figure><p>力量/智力加成，代表性装备为<strong>波利斯的黄金杯</strong>。</p><p>力量和智力的提升对于角色的伤害提升非常直接，其<strong>力量和智力加成会直接体现在角色的面板上</strong>，即如果我在未触发黄金杯效果时是<code>1000</code>点力量，那么在触发装备效果后力量将为1000x(100%+18%)=<code>1180</code>，其他装备也是如此。<br>需要注意的是，力量/智力类加成的装备由于计算公式基础系数的存在其伤害提升率永远无法达到标注的数字，即黄金杯18%力智加成的提升实际上略微小于<code>18%</code>。此外，<strong>加成力智的装备之间是加算，其收益同样存在稀释</strong>。<br>很有趣的一点是，在卢克光暗祭坛、机械王座地下城中在未通关能量的情况下角色的力量和智力会被强行减少50%，但增加力智的装备的数据不会受到影响，因此这类装备在此种情况下其提升率达到了<code>36%</code>，算是一个非常意外的收获。</p><h2 id="三攻加成"><a href="#三攻加成" class="headerlink" title="三攻加成"></a>三攻加成</h2><figure class="image-box">                <img src="https://github.com/CGNz/blogimage/raw/master/DNF-2/qingquan.png" alt="许愿清泉流响！！！" title class>                <p>许愿清泉流响！！！</p>            </figure><p>三攻加成，代表性装备为<strong>清泉流响</strong>。</p><p>三攻指的是<strong>角色的物理、魔法和独立攻击力三条属性</strong>。与力智加成类装备类似，<strong>三攻类的装备效果也会直接反映在角色的面板上</strong>，没记错的话大名鼎鼎的<strong>灵魂猎者</strong>是DNF历史上第一件直接增加三攻的装备。<br>*<em>三攻类装备彼此的加成为加算，属性加成互不冲突，但也同样存在稀释</em>。</p><h2 id="最终伤害"><a href="#最终伤害" class="headerlink" title="最终伤害"></a>最终伤害</h2><figure class="image-box">                <img src="https://github.com/CGNz/blogimage/raw/master/DNF-2/yingxiongwang.png" alt="英雄王的象征" title class>                <p>英雄王的象征</p>            </figure><p>最终伤害，代表性装备为<strong>英雄王的象征</strong>。</p><p>最终伤害是一条在90版本后才新增加的词缀，之前的国服版本将其翻译为<strong>所有攻击力</strong>，简称所攻。顾名思义，<strong>最终伤害的加成范围比之前提到的词条更加广泛，一个最好的例子就是异常类伤害</strong>。</p><figure class="image-box">                <img src="https://github.com/CGNz/blogimage/raw/master/DNF-2/yichang.png" alt="异常伤害" title class>                <p>异常伤害</p>            </figure><p>这个蓝色的数字就是异常类的伤害。<br>异常类伤害包括<strong>感电、出血、中毒和灼伤</strong>四种，受<strong>锻造和力量/智力加成</strong>。在DNF目前的职业体系中，异常伤害在技能框架内占比较大比例的职业是毒王。对她而言，一个很重要的问题是<strong>异常类伤害不享受附加伤害、增加伤害和暴击伤害的加成</strong>，只与敌人的异常属性抗性挂钩，这就使得毒王在很长的一段时间内只能对着怪物干瞪眼(初版安徒恩怪物的异常抗性都非常之高，心脏也不吃异常，后来进行了修改)。<br>为了解决这一问题，开发者在设计伤害词缀的时候引入了<strong>技能攻击力和最终伤害</strong>两个概念，这两个词缀<strong>均可以直接提升异常类的伤害</strong>。有趣的是，在面对一些防御力极高(说是防御力不如说是减伤率)的怪物，如吞噬魔时，异常类伤害将大展拳脚。</p><p>与90版本才出现的大多数伤害词缀一样，<strong>多个最终伤害之间也是彼此相加不冲突的关系，也同样存在收益的稀释</strong>。如改版前的90级史诗布甲套光怪陆离的人生就因为最终伤害过多而导致稀释严重，不那么受玩家们的欢迎。</p><h2 id="属性白字"><a href="#属性白字" class="headerlink" title="属性白字"></a>属性白字</h2><figure class="image-box">                <img src="https://github.com/CGNz/blogimage/raw/master/DNF-2/boli.png" alt="灵魂剥离" title class>                <p>灵魂剥离</p>            </figure><p>属性白字，简称<strong>属白</strong>代表性装备为90级史诗镰刀<strong>灵魂剥离</strong>。</p><p>属性白字的概念说起来并不复杂，简而言之就是<strong>受到自身属性强化加成的附加伤害</strong>，因此它的属性也和附加伤害一样，<strong>彼此之间为加算，不冲突但有收益稀释</strong>，且<strong>属性白字与属性白字、属性白字与普通白字之间均为加算，不存在取最高值的冲突项</strong>。<br>当前版本的属性白字计算公式如下：</p><blockquote><p>属性白字=【(玩家属强-怪物属抗)X0.0045+1.05】*装备白字属性特效</p></blockquote><p>同样以灵魂剥离这把武器为例。<br>我们假设角色现在有300点暗强，怪物暗抗为50，那么这把武器实际上可以带来的暗属性白字伤害提升为</p><blockquote><p>【(300-50)x0.0045+1.05】x25%= <code>54.375%</code></p></blockquote><p>(当前版本白字可以保留到小数点后五位)，也就是你的最终伤害打出后，还会附加一个54.375%的额外伤害。</p><ul><li>根据计算结果我们可以引出另外的两个问题:<br>一是白字之所以这么受欢迎，比较大的原因就在于<strong>角色属强越高，给白字效果带来的提升就越大</strong>。这也是为什么皮甲B套为什么能拥有这么高普及率的原因。<br>二是<strong>属性白字本身还受到怪物属抗的影响</strong>，因此我们应该尽力避免去对付与本职业属强相对应的怪物，光属性职业避免走卢克光路，暗属性职业避免走卢克暗路，等等，这一点的直接体现就是具有属性白字的装备在面对吃球后的吞噬魔时(吞噬魔吃掉对应属性的球其属抗将直接降到负1400左右)异常犀利。</li></ul><p>(虽然大部分情况下，第二个问题往往被忽略不计，但实际上大家在打团的时候还是推荐优先按照属性来划分队伍，打起来也会更加轻松)</p><h1 id="白字属性的破招和主属性提升率的计算"><a href="#白字属性的破招和主属性提升率的计算" class="headerlink" title="白字属性的破招和主属性提升率的计算"></a>白字属性的破招和主属性提升率的计算</h1><h2 id="白字双破"><a href="#白字双破" class="headerlink" title="白字双破"></a>白字双破</h2><p>白字双破，即<strong>角色身上的白字会在技能打出破招时进行二次加成</strong>。<br>DNF系统中，若破招攻击怪物，会有25%的破招伤害加成，即变为原本的<code>1.25</code>倍，而白字也同样享受这个破招的加成，这也就是“白字双破”这一词的含义。<br>所以在刷图过程中，没有必要控制怪物时，请不要施放多余的控制技能，保证自己的输出最大化。</p><h2 id="主属性值提升"><a href="#主属性值提升" class="headerlink" title="主属性值提升"></a>主属性值提升</h2><p>这里的属性值包括<strong>力量、智力、独立攻击力、物理攻击力、魔法攻击力和属性强化</strong>。</p><h3 id="属性值"><a href="#属性值" class="headerlink" title="属性值"></a>属性值</h3><p>DNF的属性值提升率计算都比较简单，只有两个公式:</p><blockquote><p>力量/智力提升率=新增数值/(原有数值+250)</p></blockquote><p>即如果我此前是2250点力量，在通过某些途径增加了250点力量的情况下新增力量的提升率就是250/(2250+250)x100%=<code>10%</code>。</p><h3 id="三攻"><a href="#三攻" class="headerlink" title="三攻"></a>三攻</h3><blockquote><p>独立/物理/魔法攻击力提升率=新增数值/原有数值</p></blockquote><p>即在2500点独立的情况下提升250点独立提升率为250/2500x100%=<code>10%</code>，物攻和魔攻也是同理。</p><h3 id="属性强化"><a href="#属性强化" class="headerlink" title="属性强化"></a>属性强化</h3><blockquote><p>属强提升率=新增属强x3/【(原本属强-怪物属抗)x3+700】</p></blockquote><p>即在原本属强为100，怪物属抗为0的情况下提升100属性强化，其提升率为100x3/【(100-0)x3+700】=<code>30%</code>。</p><ul><li>提到当前版本的主属性提升率的目的主要是为了给勇士们一个参考，在纠结某些附魔或装备选择时可自行计算，例如说今年的春节宠物附魔是应该选择双独立、单独立单属强还是双属强，从而在自己的基础上做出最适合自己的选择。</li></ul><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><ul><li>尽管目前大部分小伙伴的主号装备已经达到了可以“秒天秒地”的水平，但无梦觉得最大化提升伤害和输出，依旧是非常有必要了解和熟悉的，毕竟，一步步提高自己的战斗力和输出水平，一直都是大家的游戏乐趣之一。</li></ul>]]></content>
      
      
      <categories>
          
          <category> DNF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DNF </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
